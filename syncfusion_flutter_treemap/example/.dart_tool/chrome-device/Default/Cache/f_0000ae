define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/widgets/single_child_scroll_view.dart', 'packages/flutter/src/rendering/wrap.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/rendering/paragraph.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/painting/box_decoration.dart', 'packages/flutter/src/painting/gradient.dart', 'packages/flutter/src/painting/rounded_rectangle_border.dart', 'packages/flutter/src/widgets/async.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/rendering/stack.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/foundation/observer_list.dart'], (function load__packages__syncfusion_flutter_treemap__src__tooltip_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__widgets__single_child_scroll_view$46dart, packages__flutter__src__rendering__wrap$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__rendering__paragraph$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__painting__box_decoration$46dart, packages__flutter__src__painting__gradient$46dart, packages__flutter__src__painting__rounded_rectangle_border$46dart, packages__flutter__src__widgets__async$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__rendering__stack$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__foundation__observer_list$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const text$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const binding = packages__flutter__src__rendering__layer$46dart.src__rendering__binding;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const single_child_scroll_view = packages__flutter__src__widgets__single_child_scroll_view$46dart.src__widgets__single_child_scroll_view;
  const wrap = packages__flutter__src__rendering__wrap$46dart.src__rendering__wrap;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const paragraph = packages__flutter__src__rendering__paragraph$46dart.src__rendering__paragraph;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const box_decoration = packages__flutter__src__painting__box_decoration$46dart.src__painting__box_decoration;
  const gradient = packages__flutter__src__painting__gradient$46dart.src__painting__gradient;
  const rounded_rectangle_border = packages__flutter__src__painting__rounded_rectangle_border$46dart.src__painting__rounded_rectangle_border;
  const async$ = packages__flutter__src__widgets__async$46dart.src__widgets__async;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const observer_list = packages__flutter__src__foundation__observer_list$46dart.src__foundation__observer_list;
  var tooltip = Object.create(dart.library);
  var legend$ = Object.create(dart.library);
  var layouts = Object.create(dart.library);
  var treemap = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $isEmpty = dartx.isEmpty;
  var $toString = dartx.toString;
  var $isNotEmpty = dartx.isNotEmpty;
  var $split = dartx.split;
  var $replaceAll = dartx.replaceAll;
  var $_set = dartx._set;
  var $replaceRange = dartx.replaceRange;
  var $clear = dartx.clear;
  var $update = dartx.update;
  var $values = dartx.values;
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $abs = dartx.abs;
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $addAll = dartx.addAll;
  var $contains = dartx.contains;
  var $any = dartx.any;
  var $indexOf = dartx.indexOf;
  var $toInt = dartx.toInt;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    EnumPropertyOf_MapLegendType: () => (T.EnumPropertyOf_MapLegendType = dart.constFn(diagnostics.EnumProperty$(legend$._MapLegendType)))(),
    DiagnosticsPropertyOfEdgeInsetsGeometry: () => (T.DiagnosticsPropertyOfEdgeInsetsGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(edge_insets.EdgeInsetsGeometry)))(),
    DiagnosticsPropertyOfOffset: () => (T.DiagnosticsPropertyOfOffset = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Offset)))(),
    EnumPropertyOfAxis: () => (T.EnumPropertyOfAxis = dart.constFn(diagnostics.EnumProperty$(basic_types.Axis)))(),
    EnumPropertyOfTreemapLegendOverflowMode: () => (T.EnumPropertyOfTreemapLegendOverflowMode = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapLegendOverflowMode)))(),
    EnumPropertyOfTreemapLegendPosition: () => (T.EnumPropertyOfTreemapLegendPosition = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapLegendPosition)))(),
    DiagnosticsPropertyOfSize: () => (T.DiagnosticsPropertyOfSize = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Size)))(),
    EnumPropertyOfTreemapIconType: () => (T.EnumPropertyOfTreemapIconType = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapIconType)))(),
    EnumPropertyOfTreemapLegendLabelsPlacement: () => (T.EnumPropertyOfTreemapLegendLabelsPlacement = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapLegendLabelsPlacement)))(),
    EnumPropertyOfTreemapLegendEdgeLabelsPlacement: () => (T.EnumPropertyOfTreemapLegendEdgeLabelsPlacement = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapLegendEdgeLabelsPlacement)))(),
    EnumPropertyOfTreemapLabelOverflow: () => (T.EnumPropertyOfTreemapLabelOverflow = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapLabelOverflow)))(),
    EnumPropertyOfTreemapLegendPaintingStyle: () => (T.EnumPropertyOfTreemapLegendPaintingStyle = dart.constFn(diagnostics.EnumProperty$(legend$.TreemapLegendPaintingStyle)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    StringAndTreemapTileToNull: () => (T.StringAndTreemapTileToNull = dart.constFn(dart.fnType(core.Null, [core.String, layouts.TreemapTile])))(),
    IteratorOfTreemapTile: () => (T.IteratorOfTreemapTile = dart.constFn(core.Iterator$(layouts.TreemapTile)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    JSArrayOfColor: () => (T.JSArrayOfColor = dart.constFn(_interceptors.JSArray$(ui.Color)))(),
    JSArrayOf_GradientBarLabel: () => (T.JSArrayOf_GradientBarLabel = dart.constFn(_interceptors.JSArray$(legend$._GradientBarLabel)))(),
    BuildContextAndBoxConstraintsToWidget: () => (T.BuildContextAndBoxConstraintsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, box.BoxConstraints])))(),
    ListOfWidget: () => (T.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    intToWidget: () => (T.intToWidget = dart.constFn(dart.fnType(framework.Widget, [core.int])))(),
    boolTobool: () => (T.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    IdentityMapOfString$TreemapTile: () => (T.IdentityMapOfString$TreemapTile = dart.constFn(_js_helper.IdentityMap$(core.String, layouts.TreemapTile)))(),
    TreemapTileToTreemapTile: () => (T.TreemapTileToTreemapTile = dart.constFn(dart.fnType(layouts.TreemapTile, [layouts.TreemapTile])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidToTreemapTile: () => (T.VoidToTreemapTile = dart.constFn(dart.fnType(layouts.TreemapTile, [])))(),
    TreemapTileTodouble: () => (T.TreemapTileTodouble = dart.constFn(dart.fnType(core.double, [layouts.TreemapTile])))(),
    TAndTToT: () => (T.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    StateOfStatefulWidget: () => (T.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T.StateOfStatefulWidget())))(),
    FutureBuilderOfbool: () => (T.FutureBuilderOfbool = dart.constFn(async$.FutureBuilder$(core.bool)))(),
    BuildContextAndBoxConstraintsToSizedBox: () => (T.BuildContextAndBoxConstraintsToSizedBox = dart.constFn(dart.fnType(basic.SizedBox, [framework.BuildContext, box.BoxConstraints])))(),
    AsyncSnapshotOfbool: () => (T.AsyncSnapshotOfbool = dart.constFn(async$.AsyncSnapshot$(core.bool)))(),
    BuildContextAndAsyncSnapshotOfboolToLayoutBuilder: () => (T.BuildContextAndAsyncSnapshotOfboolToLayoutBuilder = dart.constFn(dart.fnType(layout_builder.LayoutBuilder, [framework.BuildContext, T.AsyncSnapshotOfbool()])))(),
    dynamicAnddynamicToint: () => (T.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    JSArrayOf_Tile: () => (T.JSArrayOf_Tile = dart.constFn(_interceptors.JSArray$(layouts._Tile)))(),
    BuildContextAndBoxConstraintsToStack: () => (T.BuildContextAndBoxConstraintsToStack = dart.constFn(dart.fnType(basic.Stack, [framework.BuildContext, box.BoxConstraints])))(),
    BuildContextAndBoxConstraintsToFlex: () => (T.BuildContextAndBoxConstraintsToFlex = dart.constFn(dart.fnType(basic.Flex, [framework.BuildContext, box.BoxConstraints])))(),
    PointerEnterEventTovoid: () => (T.PointerEnterEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerEnterEvent])))(),
    PointerHoverEventTovoid: () => (T.PointerHoverEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerHoverEvent])))(),
    PointerExitEventTovoid: () => (T.PointerExitEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerExitEvent])))(),
    TapUpDetailsTovoid: () => (T.TapUpDetailsTovoid = dart.constFn(dart.fnType(dart.void, [tap.TapUpDetails])))(),
    intTobool: () => (T.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    ObserverListOfVoidTovoid: () => (T.ObserverListOfVoidTovoid = dart.constFn(observer_list.ObserverList$(T.VoidTovoid())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 48,
        [_Location_line]: 33,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2], widget_inspector._Location);
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 34,
        [_Location_line]: 33,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/tooltip.dart"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285887861.0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294309365.0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "settings",
        [_Location_column]: 24,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "state",
        [_Location_column]: 44,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.constList([C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10], widget_inspector._Location);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[7] || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 63,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/tooltip.dart"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: tooltip._TooltipShape.prototype
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 3000000
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 100000
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: legend$._MapLegendType.prototype,
        [_name$]: "_MapLegendType.vector",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: legend$._MapLegendType.prototype,
        [_name$]: "_MapLegendType.bar",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.constList([C[15] || CT.C15, C[16] || CT.C16], legend$._MapLegendType);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: legend$.TreemapLegendPosition.prototype,
        [_name$]: "TreemapLegendPosition.left",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: legend$.TreemapLegendPosition.prototype,
        [_name$]: "TreemapLegendPosition.right",
        index: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: legend$.TreemapLegendPosition.prototype,
        [_name$]: "TreemapLegendPosition.top",
        index: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: legend$.TreemapLegendPosition.prototype,
        [_name$]: "TreemapLegendPosition.bottom",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21], legend$.TreemapLegendPosition);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: legend$.TreemapIconType.prototype,
        [_name$]: "TreemapIconType.circle",
        index: 0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: legend$.TreemapIconType.prototype,
        [_name$]: "TreemapIconType.rectangle",
        index: 1
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: legend$.TreemapIconType.prototype,
        [_name$]: "TreemapIconType.triangle",
        index: 2
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: legend$.TreemapIconType.prototype,
        [_name$]: "TreemapIconType.diamond",
        index: 3
      });
    },
    get C27() {
      return C[27] = dart.constList([C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26], legend$.TreemapIconType);
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: legend$.TreemapLegendOverflowMode.prototype,
        [_name$]: "TreemapLegendOverflowMode.scroll",
        index: 0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: legend$.TreemapLegendOverflowMode.prototype,
        [_name$]: "TreemapLegendOverflowMode.wrap",
        index: 1
      });
    },
    get C30() {
      return C[30] = dart.constList([C[28] || CT.C28, C[29] || CT.C29], legend$.TreemapLegendOverflowMode);
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: legend$.TreemapLabelOverflow.prototype,
        [_name$]: "TreemapLabelOverflow.hide",
        index: 0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: legend$.TreemapLabelOverflow.prototype,
        [_name$]: "TreemapLabelOverflow.visible",
        index: 1
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: legend$.TreemapLabelOverflow.prototype,
        [_name$]: "TreemapLabelOverflow.ellipsis",
        index: 2
      });
    },
    get C34() {
      return C[34] = dart.constList([C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33], legend$.TreemapLabelOverflow);
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: legend$.TreemapLegendLabelsPlacement.prototype,
        [_name$]: "TreemapLegendLabelsPlacement.onItem",
        index: 0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: legend$.TreemapLegendLabelsPlacement.prototype,
        [_name$]: "TreemapLegendLabelsPlacement.betweenItems",
        index: 1
      });
    },
    get C37() {
      return C[37] = dart.constList([C[35] || CT.C35, C[36] || CT.C36], legend$.TreemapLegendLabelsPlacement);
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: legend$.TreemapLegendEdgeLabelsPlacement.prototype,
        [_name$]: "TreemapLegendEdgeLabelsPlacement.inside",
        index: 0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: legend$.TreemapLegendEdgeLabelsPlacement.prototype,
        [_name$]: "TreemapLegendEdgeLabelsPlacement.center",
        index: 1
      });
    },
    get C40() {
      return C[40] = dart.constList([C[38] || CT.C38, C[39] || CT.C39], legend$.TreemapLegendEdgeLabelsPlacement);
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: legend$.TreemapLegendPaintingStyle.prototype,
        [_name$]: "TreemapLegendPaintingStyle.solid",
        index: 0
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: legend$.TreemapLegendPaintingStyle.prototype,
        [_name$]: "TreemapLegendPaintingStyle.gradient",
        index: 1
      });
    },
    get C43() {
      return C[43] = dart.constList([C[41] || CT.C41, C[42] || CT.C42], legend$.TreemapLegendPaintingStyle);
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 10,
        [EdgeInsets_right]: 10,
        [EdgeInsets_top]: 10,
        [EdgeInsets_left]: 10
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 8,
        [OffsetBase__dx]: 8
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 15,
        [_Location_line]: 1525,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 15,
        [_Location_line]: 1529,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.constList([C[48] || CT.C48, C[49] || CT.C49], widget_inspector._Location);
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[47] || CT.C47,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1524,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 26,
        [_Location_line]: 1536,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 46,
        [_Location_line]: 1536,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.constList([C[52] || CT.C52, C[53] || CT.C53], widget_inspector._Location);
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[51] || CT.C51,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 1536,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 15,
        [_Location_line]: 1533,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 15,
        [_Location_line]: 1534,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.constList([C[56] || CT.C56, C[57] || CT.C57], widget_inspector._Location);
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[55] || CT.C55,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1532,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 15,
        [_Location_line]: 1544,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 15,
        [_Location_line]: 1548,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.constList([C[60] || CT.C60, C[61] || CT.C61], widget_inspector._Location);
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[59] || CT.C59,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1543,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 26,
        [_Location_line]: 1555,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 46,
        [_Location_line]: 1555,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.constList([C[64] || CT.C64, C[65] || CT.C65], widget_inspector._Location);
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[63] || CT.C63,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 1555,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 15,
        [_Location_line]: 1552,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 15,
        [_Location_line]: 1553,
        [_Location_file]: null
      });
    },
    get C67() {
      return C[67] = dart.constList([C[68] || CT.C68, C[69] || CT.C69], widget_inspector._Location);
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[67] || CT.C67,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1551,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollDirection",
        [_Location_column]: 9,
        [_Location_line]: 1565,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1570,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.constList([C[72] || CT.C72, C[73] || CT.C73], widget_inspector._Location);
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[71] || CT.C71,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1564,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "direction",
        [_Location_column]: 9,
        [_Location_line]: 1576,
        [_Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "spacing",
        [_Location_column]: 9,
        [_Location_line]: 1581,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 1582,
        [_Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "runSpacing",
        [_Location_column]: 9,
        [_Location_line]: 1583,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "runAlignment",
        [_Location_column]: 9,
        [_Location_line]: 1584,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 9,
        [_Location_line]: 1585,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.constList([C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81], widget_inspector._Location);
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[75] || CT.C75,
        [_Location_name]: null,
        [_Location_column]: 28,
        [_Location_line]: 1575,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 24,
        [_Location_line]: 1589,
        [_Location_file]: null
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 59,
        [_Location_line]: 1589,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.constList([C[84] || CT.C84, C[85] || CT.C85], widget_inspector._Location);
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[83] || CT.C83,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 1589,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataSource",
        [_Location_column]: 11,
        [_Location_line]: 1597,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "settings",
        [_Location_column]: 11,
        [_Location_line]: 1598,
        [_Location_file]: null
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textStyle",
        [_Location_column]: 11,
        [_Location_line]: 1599,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.constList([C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90], widget_inspector._Location);
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[87] || CT.C87,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 1596,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataSource",
        [_Location_column]: 11,
        [_Location_line]: 1603,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "settings",
        [_Location_column]: 11,
        [_Location_line]: 1604,
        [_Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textStyle",
        [_Location_column]: 11,
        [_Location_line]: 1605,
        [_Location_file]: null
      });
    },
    get C92() {
      return C[92] = dart.constList([C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95], widget_inspector._Location);
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[92] || CT.C92,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 1602,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "text",
        [_Location_column]: 9,
        [_Location_line]: 1646,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "iconShapeColor",
        [_Location_column]: 9,
        [_Location_line]: 1647,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "settings",
        [_Location_column]: 9,
        [_Location_line]: 1648,
        [_Location_file]: null
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textStyle",
        [_Location_column]: 9,
        [_Location_line]: 1649,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.constList([C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100, C[101] || CT.C101], widget_inspector._Location);
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[97] || CT.C97,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1645,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: legend$._TreemapIconShape.prototype
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 12,
        [OffsetBase__dx]: 80
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "direction",
        [_Location_column]: 9,
        [_Location_line]: 1848,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "spacing",
        [_Location_column]: 9,
        [_Location_line]: 1849,
        [_Location_file]: null
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 1850,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "runSpacing",
        [_Location_column]: 9,
        [_Location_line]: 1851,
        [_Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "runAlignment",
        [_Location_column]: 9,
        [_Location_line]: 1852,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 9,
        [_Location_line]: 1853,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.constList([C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110, C[111] || CT.C111], widget_inspector._Location);
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[105] || CT.C105,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1847,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 7,
        [_Location_line]: 1846,
        [_Location_file]: null
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1847,
        [_Location_file]: null
      });
    },
    get C113() {
      return C[113] = dart.constList([C[114] || CT.C114, C[115] || CT.C115], widget_inspector._Location);
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[113] || CT.C113,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 1845,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 22,
        [_Location_line]: 1858,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 57,
        [_Location_line]: 1858,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.constList([C[118] || CT.C118, C[119] || CT.C119], widget_inspector._Location);
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[117] || CT.C117,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1858,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 17,
        [_Location_line]: 2048,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 17,
        [_Location_line]: 2049,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.constList([C[122] || CT.C122, C[123] || CT.C123], widget_inspector._Location);
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[121] || CT.C121,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 2047,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 15,
        [_Location_line]: 2046,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 2047,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.constList([C[126] || CT.C126, C[127] || CT.C127], widget_inspector._Location);
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[125] || CT.C125,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 2044,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 2042,
        [_Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 2043,
        [_Location_file]: null
      });
    },
    get C129() {
      return C[129] = dart.constList([C[130] || CT.C130, C[131] || CT.C131], widget_inspector._Location);
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[129] || CT.C129,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 2041,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 2040,
        [_Location_file]: null
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 2041,
        [_Location_file]: null
      });
    },
    get C133() {
      return C[133] = dart.constList([C[134] || CT.C134, C[135] || CT.C135], widget_inspector._Location);
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[133] || CT.C133,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2039,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 15,
        [_Location_line]: 2078,
        [_Location_file]: null
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 15,
        [_Location_line]: 2079,
        [_Location_file]: null
      });
    },
    get C137() {
      return C[137] = dart.constList([C[138] || CT.C138, C[139] || CT.C139], widget_inspector._Location);
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[137] || CT.C137,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 2077,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 13,
        [_Location_line]: 2076,
        [_Location_file]: null
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 2077,
        [_Location_file]: null
      });
    },
    get C141() {
      return C[141] = dart.constList([C[142] || CT.C142, C[143] || CT.C143], widget_inspector._Location);
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[141] || CT.C141,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 2074,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 9,
        [_Location_line]: 2072,
        [_Location_file]: null
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 2073,
        [_Location_file]: null
      });
    },
    get C145() {
      return C[145] = dart.constList([C[146] || CT.C146, C[147] || CT.C147], widget_inspector._Location);
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[145] || CT.C145,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2071,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 2070,
        [_Location_file]: null
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 2071,
        [_Location_file]: null
      });
    },
    get C149() {
      return C[149] = dart.constList([C[150] || CT.C150, C[151] || CT.C151], widget_inspector._Location);
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[149] || CT.C149,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 2069,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 2149,
        [_Location_file]: null
      });
    },
    get C153() {
      return C[153] = dart.constList([C[154] || CT.C154], widget_inspector._Location);
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[153] || CT.C153,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 2148,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 23,
        [_Location_line]: 2179,
        [_Location_file]: null
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 35,
        [_Location_line]: 2179,
        [_Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.constList([C[157] || CT.C157, C[158] || CT.C158], widget_inspector._Location);
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[156] || CT.C156,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2179,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 17,
        [_Location_line]: 2188,
        [_Location_file]: null
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "softWrap",
        [_Location_column]: 17,
        [_Location_line]: 2189,
        [_Location_file]: null
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overflow",
        [_Location_column]: 17,
        [_Location_line]: 2190,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 17,
        [_Location_line]: 2191,
        [_Location_file]: null
      });
    },
    get C160() {
      return C[160] = dart.constList([C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164], widget_inspector._Location);
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[160] || CT.C160,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 2187,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "offset",
        [_Location_column]: 15,
        [_Location_line]: 2186,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 2187,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.constList([C[167] || CT.C167, C[168] || CT.C168], widget_inspector._Location);
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[166] || CT.C166,
        [_Location_name]: null,
        [_Location_column]: 23,
        [_Location_line]: 2185,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 15,
        [_Location_line]: 2195,
        [_Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 15,
        [_Location_line]: 2196,
        [_Location_file]: null
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "softWrap",
        [_Location_column]: 15,
        [_Location_line]: 2197,
        [_Location_file]: null
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overflow",
        [_Location_column]: 15,
        [_Location_line]: 2198,
        [_Location_file]: null
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 15,
        [_Location_line]: 2203,
        [_Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.constList([C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173, C[174] || CT.C174, C[175] || CT.C175], widget_inspector._Location);
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[170] || CT.C170,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 2194,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 7,
        [_Location_line]: 2183,
        [_Location_file]: null
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 2184,
        [_Location_file]: null
      });
    },
    get C177() {
      return C[177] = dart.constList([C[178] || CT.C178, C[179] || CT.C179], widget_inspector._Location);
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[177] || CT.C177,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 2182,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 2338,
        [_Location_file]: null
      });
    },
    get C182() {
      return C[182] = dart.constList([C[183] || CT.C183], widget_inspector._Location);
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[182] || CT.C182,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2337,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 7,
        [_Location_line]: 2336,
        [_Location_file]: null
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 2337,
        [_Location_file]: null
      });
    },
    get C185() {
      return C[185] = dart.constList([C[186] || CT.C186, C[187] || CT.C187], widget_inspector._Location);
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[185] || CT.C185,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 2335,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 22,
        [_Location_line]: 2349,
        [_Location_file]: null
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 50,
        [_Location_line]: 2349,
        [_Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.constList([C[190] || CT.C190, C[191] || CT.C191], widget_inspector._Location);
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[189] || CT.C189,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2349,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 18,
        [_Location_line]: 2671,
        [_Location_file]: null
      });
    },
    get C193() {
      return C[193] = dart.constList([C[194] || CT.C194], widget_inspector._Location);
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[193] || CT.C193,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 2671,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 15,
        [_Location_line]: 2672,
        [_Location_file]: null
      });
    },
    get C196() {
      return C[196] = dart.constList([C[197] || CT.C197], widget_inspector._Location);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[196] || CT.C196,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 2672,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 2696,
        [_Location_file]: null
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 2697,
        [_Location_file]: null
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 9,
        [_Location_line]: 2698,
        [_Location_file]: null
      });
    },
    get C199() {
      return C[199] = dart.constList([C[200] || CT.C200, C[201] || CT.C201, C[202] || CT.C202], widget_inspector._Location);
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[199] || CT.C199,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 2695,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 11,
        [_Location_line]: 2704,
        [_Location_file]: null
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 11,
        [_Location_line]: 2705,
        [_Location_file]: null
      });
    },
    get C204() {
      return C[204] = dart.constList([C[205] || CT.C205, C[206] || CT.C206], widget_inspector._Location);
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[204] || CT.C204,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 2703,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 11,
        [_Location_line]: 2707,
        [_Location_file]: null
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 33,
        [_Location_line]: 2707,
        [_Location_file]: null
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 57,
        [_Location_line]: 2707,
        [_Location_file]: null
      });
    },
    get C208() {
      return C[208] = dart.constList([C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211], widget_inspector._Location);
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[208] || CT.C208,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 2706,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 27,
        [_Location_line]: 2718,
        [_Location_file]: null
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 40,
        [_Location_line]: 2718,
        [_Location_file]: null
      });
    },
    get C213() {
      return C[213] = dart.constList([C[214] || CT.C214, C[215] || CT.C215], widget_inspector._Location);
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[213] || CT.C213,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 2718,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 29,
        [_Location_line]: 2726,
        [_Location_file]: null
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 15,
        [_Location_line]: 2727,
        [_Location_file]: null
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "softWrap",
        [_Location_column]: 15,
        [_Location_line]: 2728,
        [_Location_file]: null
      });
    },
    get C217() {
      return C[217] = dart.constList([C[218] || CT.C218, C[219] || CT.C219, C[220] || CT.C220], widget_inspector._Location);
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[217] || CT.C217,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 2725,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "offset",
        [_Location_column]: 13,
        [_Location_line]: 2724,
        [_Location_file]: null
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 2725,
        [_Location_file]: null
      });
    },
    get C222() {
      return C[222] = dart.constList([C[223] || CT.C223, C[224] || CT.C224], widget_inspector._Location);
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[222] || CT.C222,
        [_Location_name]: null,
        [_Location_column]: 28,
        [_Location_line]: 2723,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 11,
        [_Location_line]: 2722,
        [_Location_file]: null
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 2723,
        [_Location_file]: null
      });
    },
    get C226() {
      return C[226] = dart.constList([C[227] || CT.C227, C[228] || CT.C228], widget_inspector._Location);
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[226] || CT.C226,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 2721,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 7,
        [_Location_line]: 2713,
        [_Location_file]: null
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 2714,
        [_Location_file]: null
      });
    },
    get C230() {
      return C[230] = dart.constList([C[231] || CT.C231, C[232] || CT.C232], widget_inspector._Location);
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[230] || CT.C230,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 2712,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart"
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: layouts.PointerKind.prototype,
        [_name$0]: "PointerKind.touch",
        index: 0
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: layouts.PointerKind.prototype,
        [_name$0]: "PointerKind.hover",
        index: 1
      });
    },
    get C235() {
      return C[235] = dart.constList([C[233] || CT.C233, C[234] || CT.C234], layouts.PointerKind);
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: layouts.LayoutType.prototype,
        [_name$0]: "LayoutType.squarified",
        index: 0
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: layouts.LayoutType.prototype,
        [_name$0]: "LayoutType.slice",
        index: 1
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: layouts.LayoutType.prototype,
        [_name$0]: "LayoutType.dice",
        index: 2
      });
    },
    get C239() {
      return C[239] = dart.constList([C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238], layouts.LayoutType);
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataCount",
        [_Location_column]: 9,
        [_Location_line]: 162,
        [_Location_file]: null
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataSource",
        [_Location_column]: 9,
        [_Location_line]: 163,
        [_Location_file]: null
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "totalWeight",
        [_Location_column]: 9,
        [_Location_line]: 164,
        [_Location_file]: null
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipKey",
        [_Location_column]: 9,
        [_Location_line]: 165,
        [_Location_file]: null
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 9,
        [_Location_line]: 166,
        [_Location_file]: null
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionSettings",
        [_Location_column]: 9,
        [_Location_line]: 167,
        [_Location_file]: null
      });
    },
    get C241() {
      return C[241] = dart.constList([C[242] || CT.C242, C[243] || CT.C243, C[244] || CT.C244, C[245] || CT.C245, C[246] || CT.C246, C[247] || CT.C247], widget_inspector._Location);
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[241] || CT.C241,
        [_Location_name]: null,
        [_Location_column]: 41,
        [_Location_line]: 161,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataCount",
        [_Location_column]: 9,
        [_Location_line]: 171,
        [_Location_file]: null
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataSource",
        [_Location_column]: 9,
        [_Location_line]: 172,
        [_Location_file]: null
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "type",
        [_Location_column]: 9,
        [_Location_line]: 173,
        [_Location_file]: null
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "totalWeight",
        [_Location_column]: 9,
        [_Location_line]: 174,
        [_Location_file]: null
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipKey",
        [_Location_column]: 9,
        [_Location_line]: 175,
        [_Location_file]: null
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 9,
        [_Location_line]: 176,
        [_Location_file]: null
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionSettings",
        [_Location_column]: 9,
        [_Location_line]: 177,
        [_Location_file]: null
      });
    },
    get C249() {
      return C[249] = dart.constList([C[250] || CT.C250, C[251] || CT.C251, C[252] || CT.C252, C[253] || CT.C253, C[254] || CT.C254, C[255] || CT.C255, C[256] || CT.C256], widget_inspector._Location);
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[249] || CT.C249,
        [_Location_name]: null,
        [_Location_column]: 45,
        [_Location_line]: 170,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 22,
        [_Location_line]: 181,
        [_Location_file]: null
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "settings",
        [_Location_column]: 40,
        [_Location_line]: 181,
        [_Location_file]: null
      });
    },
    get C258() {
      return C[258] = dart.constList([C[259] || CT.C259, C[260] || CT.C260], widget_inspector._Location);
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[258] || CT.C258,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 181,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataSource",
        [_Location_column]: 11,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "settings",
        [_Location_column]: 11,
        [_Location_line]: 190,
        [_Location_file]: null
      });
    },
    get C262() {
      return C[262] = dart.constList([C[263] || CT.C263, C[264] || CT.C264], widget_inspector._Location);
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[262] || CT.C262,
        [_Location_name]: null,
        [_Location_column]: 35,
        [_Location_line]: 188,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 60,
        [_Location_line]: 196,
        [_Location_file]: null
      });
    },
    get C266() {
      return C[266] = dart.constList([C[267] || CT.C267], widget_inspector._Location);
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[266] || CT.C266,
        [_Location_name]: null,
        [_Location_column]: 51,
        [_Location_line]: 196,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 24,
        [_Location_line]: 196,
        [_Location_file]: null
      });
    },
    get C269() {
      return C[269] = dart.constList([C[270] || CT.C270], widget_inspector._Location);
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[269] || CT.C269,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 196,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 52,
        [_Location_line]: 200,
        [_Location_file]: null
      });
    },
    get C272() {
      return C[272] = dart.constList([C[273] || CT.C273], widget_inspector._Location);
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[272] || CT.C272,
        [_Location_name]: null,
        [_Location_column]: 43,
        [_Location_line]: 200,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 24,
        [_Location_line]: 200,
        [_Location_file]: null
      });
    },
    get C275() {
      return C[275] = dart.constList([C[276] || CT.C276], widget_inspector._Location);
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[275] || CT.C275,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 200,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 63,
        [_Location_line]: 203,
        [_Location_file]: null
      });
    },
    get C278() {
      return C[278] = dart.constList([C[279] || CT.C279], widget_inspector._Location);
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[278] || CT.C278,
        [_Location_name]: null,
        [_Location_column]: 54,
        [_Location_line]: 203,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 27,
        [_Location_line]: 203,
        [_Location_file]: null
      });
    },
    get C281() {
      return C[281] = dart.constList([C[282] || CT.C282], widget_inspector._Location);
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[281] || CT.C281,
        [_Location_name]: null,
        [_Location_column]: 23,
        [_Location_line]: 203,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 55,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C284() {
      return C[284] = dart.constList([C[285] || CT.C285], widget_inspector._Location);
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[284] || CT.C284,
        [_Location_name]: null,
        [_Location_column]: 46,
        [_Location_line]: 206,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 27,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C287() {
      return C[287] = dart.constList([C[288] || CT.C288], widget_inspector._Location);
    },
    get C286() {
      return C[286] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[287] || CT.C287,
        [_Location_name]: null,
        [_Location_column]: 23,
        [_Location_line]: 206,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C291() {
      return C[291] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 30,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 59,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C290() {
      return C[290] = dart.constList([C[291] || CT.C291, C[292] || CT.C292], widget_inspector._Location);
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[290] || CT.C290,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 215,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 15,
        [_Location_line]: 214,
        [_Location_file]: null
      });
    },
    get C296() {
      return C[296] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C294() {
      return C[294] = dart.constList([C[295] || CT.C295, C[296] || CT.C296], widget_inspector._Location);
    },
    get C293() {
      return C[293] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[294] || CT.C294,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 213,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 211,
        [_Location_file]: null
      });
    },
    get C298() {
      return C[298] = dart.constList([C[299] || CT.C299], widget_inspector._Location);
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[298] || CT.C298,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 210,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C300() {
      return C[300] = dart.fn(math.max, T.TAndTToT());
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 27,
        [_Location_line]: 483,
        [_Location_file]: null
      });
    },
    get C302() {
      return C[302] = dart.constList([C[303] || CT.C303], widget_inspector._Location);
    },
    get C301() {
      return C[301] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[302] || CT.C302,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 483,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C306() {
      return C[306] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 15,
        [_Location_line]: 480,
        [_Location_file]: null
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 15,
        [_Location_line]: 481,
        [_Location_file]: null
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 482,
        [_Location_file]: null
      });
    },
    get C305() {
      return C[305] = dart.constList([C[306] || CT.C306, C[307] || CT.C307, C[308] || CT.C308], widget_inspector._Location);
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[305] || CT.C305,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 479,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 13,
        [_Location_line]: 475,
        [_Location_file]: null
      });
    },
    get C310() {
      return C[310] = dart.constList([C[311] || CT.C311], widget_inspector._Location);
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[310] || CT.C310,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 474,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "future",
        [_Location_column]: 7,
        [_Location_line]: 472,
        [_Location_file]: null
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 473,
        [_Location_file]: null
      });
    },
    get C313() {
      return C[313] = dart.constList([C[314] || CT.C314, C[315] || CT.C315], widget_inspector._Location);
    },
    get C312() {
      return C[312] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[313] || CT.C313,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 471,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C318() {
      return C[318] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 622,
        [_Location_file]: null
      });
    },
    get C319() {
      return C[319] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "details",
        [_Location_column]: 9,
        [_Location_line]: 623,
        [_Location_file]: null
      });
    },
    get C320() {
      return C[320] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipKey",
        [_Location_column]: 9,
        [_Location_line]: 624,
        [_Location_file]: null
      });
    },
    get C321() {
      return C[321] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "treemapController",
        [_Location_column]: 9,
        [_Location_line]: 625,
        [_Location_file]: null
      });
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 626,
        [_Location_file]: null
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 9,
        [_Location_line]: 627,
        [_Location_file]: null
      });
    },
    get C324() {
      return C[324] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionSettings",
        [_Location_column]: 9,
        [_Location_line]: 628,
        [_Location_file]: null
      });
    },
    get C317() {
      return C[317] = dart.constList([C[318] || CT.C318, C[319] || CT.C319, C[320] || CT.C320, C[321] || CT.C321, C[322] || CT.C322, C[323] || CT.C323, C[324] || CT.C324], widget_inspector._Location);
    },
    get C316() {
      return C[316] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[317] || CT.C317,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 621,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C327() {
      return C[327] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 17,
        [_Location_line]: 655,
        [_Location_file]: null
      });
    },
    get C326() {
      return C[326] = dart.constList([C[327] || CT.C327], widget_inspector._Location);
    },
    get C325() {
      return C[325] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[326] || CT.C326,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 654,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 17,
        [_Location_line]: 648,
        [_Location_file]: null
      });
    },
    get C329() {
      return C[329] = dart.constList([C[330] || CT.C330], widget_inspector._Location);
    },
    get C328() {
      return C[328] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[329] || CT.C329,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 647,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 647,
        [_Location_file]: null
      });
    },
    get C332() {
      return C[332] = dart.constList([C[333] || CT.C333], widget_inspector._Location);
    },
    get C331() {
      return C[331] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[332] || CT.C332,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 641,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C336() {
      return C[336] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 9,
        [_Location_line]: 638,
        [_Location_file]: null
      });
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 639,
        [_Location_file]: null
      });
    },
    get C335() {
      return C[335] = dart.constList([C[336] || CT.C336, C[337] || CT.C337], widget_inspector._Location);
    },
    get C334() {
      return C[334] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[335] || CT.C335,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 637,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 677,
        [_Location_file]: null
      });
    },
    get C339() {
      return C[339] = dart.constList([C[340] || CT.C340], widget_inspector._Location);
    },
    get C338() {
      return C[338] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[339] || CT.C339,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 676,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 675,
        [_Location_file]: null
      });
    },
    get C342() {
      return C[342] = dart.constList([C[343] || CT.C343], widget_inspector._Location);
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[342] || CT.C342,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 674,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 22,
        [_Location_line]: 727,
        [_Location_file]: null
      });
    },
    get C345() {
      return C[345] = dart.constList([C[346] || CT.C346], widget_inspector._Location);
    },
    get C344() {
      return C[344] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[345] || CT.C345,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 727,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C349() {
      return C[349] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 720,
        [_Location_file]: null
      });
    },
    get C348() {
      return C[348] = dart.constList([C[349] || CT.C349], widget_inspector._Location);
    },
    get C347() {
      return C[347] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[348] || CT.C348,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 719,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C352() {
      return C[352] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "type",
        [_Location_column]: 9,
        [_Location_line]: 780,
        [_Location_file]: null
      });
    },
    get C353() {
      return C[353] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 781,
        [_Location_file]: null
      });
    },
    get C354() {
      return C[354] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "details",
        [_Location_column]: 9,
        [_Location_line]: 782,
        [_Location_file]: null
      });
    },
    get C355() {
      return C[355] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipKey",
        [_Location_column]: 9,
        [_Location_line]: 783,
        [_Location_file]: null
      });
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "treemapController",
        [_Location_column]: 9,
        [_Location_line]: 784,
        [_Location_file]: null
      });
    },
    get C357() {
      return C[357] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 785,
        [_Location_file]: null
      });
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 9,
        [_Location_line]: 786,
        [_Location_file]: null
      });
    },
    get C359() {
      return C[359] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionSettings",
        [_Location_column]: 9,
        [_Location_line]: 787,
        [_Location_file]: null
      });
    },
    get C351() {
      return C[351] = dart.constList([C[352] || CT.C352, C[353] || CT.C353, C[354] || CT.C354, C[355] || CT.C355, C[356] || CT.C356, C[357] || CT.C357, C[358] || CT.C358, C[359] || CT.C359], widget_inspector._Location);
    },
    get C350() {
      return C[350] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[351] || CT.C351,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 779,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C362() {
      return C[362] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 28,
        [_Location_line]: 820,
        [_Location_file]: null
      });
    },
    get C361() {
      return C[361] = dart.constList([C[362] || CT.C362], widget_inspector._Location);
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[361] || CT.C361,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 820,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 25,
        [_Location_line]: 821,
        [_Location_file]: null
      });
    },
    get C364() {
      return C[364] = dart.constList([C[365] || CT.C365], widget_inspector._Location);
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[364] || CT.C364,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 821,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 17,
        [_Location_line]: 808,
        [_Location_file]: null
      });
    },
    get C367() {
      return C[367] = dart.constList([C[368] || CT.C368], widget_inspector._Location);
    },
    get C366() {
      return C[366] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[367] || CT.C367,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 807,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 807,
        [_Location_file]: null
      });
    },
    get C370() {
      return C[370] = dart.constList([C[371] || CT.C371], widget_inspector._Location);
    },
    get C369() {
      return C[369] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[370] || CT.C370,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 801,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C374() {
      return C[374] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 9,
        [_Location_line]: 798,
        [_Location_file]: null
      });
    },
    get C375() {
      return C[375] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 799,
        [_Location_file]: null
      });
    },
    get C373() {
      return C[373] = dart.constList([C[374] || CT.C374, C[375] || CT.C375], widget_inspector._Location);
    },
    get C372() {
      return C[372] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[373] || CT.C373,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 797,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C378() {
      return C[378] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 22,
        [_Location_line]: 840,
        [_Location_file]: null
      });
    },
    get C377() {
      return C[377] = dart.constList([C[378] || CT.C378], widget_inspector._Location);
    },
    get C376() {
      return C[376] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[377] || CT.C377,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 840,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C381() {
      return C[381] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 19,
        [_Location_line]: 841,
        [_Location_file]: null
      });
    },
    get C380() {
      return C[380] = dart.constList([C[381] || CT.C381], widget_inspector._Location);
    },
    get C379() {
      return C[379] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[380] || CT.C380,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 841,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C384() {
      return C[384] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 836,
        [_Location_file]: null
      });
    },
    get C383() {
      return C[383] = dart.constList([C[384] || CT.C384], widget_inspector._Location);
    },
    get C382() {
      return C[382] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[383] || CT.C383,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 835,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C387() {
      return C[387] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 22,
        [_Location_line]: 888,
        [_Location_file]: null
      });
    },
    get C386() {
      return C[386] = dart.constList([C[387] || CT.C387], widget_inspector._Location);
    },
    get C385() {
      return C[385] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[386] || CT.C386,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 888,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C390() {
      return C[390] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 19,
        [_Location_line]: 889,
        [_Location_file]: null
      });
    },
    get C389() {
      return C[389] = dart.constList([C[390] || CT.C390], widget_inspector._Location);
    },
    get C388() {
      return C[388] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[389] || CT.C389,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 889,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C393() {
      return C[393] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 880,
        [_Location_file]: null
      });
    },
    get C392() {
      return C[392] = dart.constList([C[393] || CT.C393], widget_inspector._Location);
    },
    get C391() {
      return C[391] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[392] || CT.C392,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 879,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C396() {
      return C[396] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 7,
        [_Location_line]: 921,
        [_Location_file]: null
      });
    },
    get C397() {
      return C[397] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "details",
        [_Location_column]: 7,
        [_Location_line]: 922,
        [_Location_file]: null
      });
    },
    get C398() {
      return C[398] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipKey",
        [_Location_column]: 7,
        [_Location_line]: 923,
        [_Location_file]: null
      });
    },
    get C399() {
      return C[399] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "treemapController",
        [_Location_column]: 7,
        [_Location_line]: 924,
        [_Location_file]: null
      });
    },
    get C400() {
      return C[400] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 925,
        [_Location_file]: null
      });
    },
    get C401() {
      return C[401] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 7,
        [_Location_line]: 926,
        [_Location_file]: null
      });
    },
    get C402() {
      return C[402] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionSettings",
        [_Location_column]: 7,
        [_Location_line]: 927,
        [_Location_file]: null
      });
    },
    get C395() {
      return C[395] = dart.constList([C[396] || CT.C396, C[397] || CT.C397, C[398] || CT.C398, C[399] || CT.C399, C[400] || CT.C400, C[401] || CT.C401, C[402] || CT.C402], widget_inspector._Location);
    },
    get C394() {
      return C[394] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[395] || CT.C395,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 920,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C405() {
      return C[405] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 25,
        [_Location_line]: 931,
        [_Location_file]: null
      });
    },
    get C406() {
      return C[406] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 53,
        [_Location_line]: 931,
        [_Location_file]: null
      });
    },
    get C404() {
      return C[404] = dart.constList([C[405] || CT.C405, C[406] || CT.C406], widget_inspector._Location);
    },
    get C403() {
      return C[403] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[404] || CT.C404,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 931,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C409() {
      return C[409] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 13,
        [_Location_line]: 936,
        [_Location_file]: null
      });
    },
    get C410() {
      return C[410] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 13,
        [_Location_line]: 937,
        [_Location_file]: null
      });
    },
    get C411() {
      return C[411] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 13,
        [_Location_line]: 938,
        [_Location_file]: null
      });
    },
    get C412() {
      return C[412] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 13,
        [_Location_line]: 939,
        [_Location_file]: null
      });
    },
    get C413() {
      return C[413] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 940,
        [_Location_file]: null
      });
    },
    get C408() {
      return C[408] = dart.constList([C[409] || CT.C409, C[410] || CT.C410, C[411] || CT.C411, C[412] || CT.C412, C[413] || CT.C413], widget_inspector._Location);
    },
    get C407() {
      return C[407] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[408] || CT.C408,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 935,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C416() {
      return C[416] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 20,
        [_Location_line]: 941,
        [_Location_file]: null
      });
    },
    get C417() {
      return C[417] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 39,
        [_Location_line]: 941,
        [_Location_file]: null
      });
    },
    get C418() {
      return C[418] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 60,
        [_Location_line]: 941,
        [_Location_file]: null
      });
    },
    get C415() {
      return C[415] = dart.constList([C[416] || CT.C416, C[417] || CT.C417, C[418] || CT.C418], widget_inspector._Location);
    },
    get C414() {
      return C[414] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[415] || CT.C415,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 941,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C421() {
      return C[421] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 1006,
        [_Location_file]: null
      });
    },
    get C422() {
      return C[422] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEnter",
        [_Location_column]: 11,
        [_Location_line]: 1007,
        [_Location_file]: null
      });
    },
    get C423() {
      return C[423] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHover",
        [_Location_column]: 11,
        [_Location_line]: 1016,
        [_Location_file]: null
      });
    },
    get C424() {
      return C[424] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onExit",
        [_Location_column]: 11,
        [_Location_line]: 1023,
        [_Location_file]: null
      });
    },
    get C420() {
      return C[420] = dart.constList([C[421] || CT.C421, C[422] || CT.C422, C[423] || CT.C423, C[424] || CT.C424], widget_inspector._Location);
    },
    get C419() {
      return C[419] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[420] || CT.C420,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 1005,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C427() {
      return C[427] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 9,
        [_Location_line]: 1037,
        [_Location_file]: null
      });
    },
    get C428() {
      return C[428] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1055,
        [_Location_file]: null
      });
    },
    get C426() {
      return C[426] = dart.constList([C[427] || CT.C427, C[428] || CT.C428], widget_inspector._Location);
    },
    get C425() {
      return C[425] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[426] || CT.C426,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 1036,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C431() {
      return C[431] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 25,
        [_Location_line]: 1236,
        [_Location_file]: null
      });
    },
    get C430() {
      return C[430] = dart.constList([C[431] || CT.C431], widget_inspector._Location);
    },
    get C429() {
      return C[429] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[430] || CT.C430,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 1236,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C434() {
      return C[434] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 7,
        [_Location_line]: 1252,
        [_Location_file]: null
      });
    },
    get C435() {
      return C[435] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1253,
        [_Location_file]: null
      });
    },
    get C433() {
      return C[433] = dart.constList([C[434] || CT.C434, C[435] || CT.C435], widget_inspector._Location);
    },
    get C432() {
      return C[432] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[433] || CT.C433,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 1251,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C438() {
      return C[438] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.none",
        index: 0
      });
    },
    get C439() {
      return C[439] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C437() {
      return C[437] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[438] || CT.C438,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[439] || CT.C439
      });
    },
    get C441() {
      return C[441] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C440() {
      return C[440] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[441] || CT.C441,
        [BorderRadius_bottomLeft]: C[441] || CT.C441,
        [BorderRadius_topRight]: C[441] || CT.C441,
        [BorderRadius_topLeft]: C[441] || CT.C441
      });
    },
    get C436() {
      return C[436] = dart.const({
        __proto__: rounded_rectangle_border.RoundedRectangleBorder.prototype,
        [OutlinedBorder_side]: C[437] || CT.C437,
        [RoundedRectangleBorder_borderRadius]: C[440] || CT.C440
      });
    },
    get C444() {
      return C[444] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 28,
        [_Location_line]: 1263,
        [_Location_file]: null
      });
    },
    get C445() {
      return C[445] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 46,
        [_Location_line]: 1263,
        [_Location_file]: null
      });
    },
    get C443() {
      return C[443] = dart.constList([C[444] || CT.C444, C[445] || CT.C445], widget_inspector._Location);
    },
    get C442() {
      return C[442] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[443] || CT.C443,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1263,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C448() {
      return C[448] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 1259,
        [_Location_file]: null
      });
    },
    get C449() {
      return C[449] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "foregroundPainter",
        [_Location_column]: 9,
        [_Location_line]: 1260,
        [_Location_file]: null
      });
    },
    get C450() {
      return C[450] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1261,
        [_Location_file]: null
      });
    },
    get C447() {
      return C[447] = dart.constList([C[448] || CT.C448, C[449] || CT.C449, C[450] || CT.C450], widget_inspector._Location);
    },
    get C446() {
      return C[446] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[447] || CT.C447,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 1258,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C453() {
      return C[453] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 21,
        [_Location_line]: 1278,
        [_Location_file]: null
      });
    },
    get C454() {
      return C[454] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 39,
        [_Location_line]: 1278,
        [_Location_file]: null
      });
    },
    get C452() {
      return C[452] = dart.constList([C[453] || CT.C453, C[454] || CT.C454], widget_inspector._Location);
    },
    get C451() {
      return C[451] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[452] || CT.C452,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 1278,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C457() {
      return C[457] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 9,
        [_Location_line]: 1274,
        [_Location_file]: null
      });
    },
    get C458() {
      return C[458] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 1275,
        [_Location_file]: null
      });
    },
    get C456() {
      return C[456] = dart.constList([C[457] || CT.C457, C[458] || CT.C458], widget_inspector._Location);
    },
    get C455() {
      return C[455] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[456] || CT.C456,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1273,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart"
      });
    },
    get C459() {
      return C[459] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 1,
        [EdgeInsets_right]: 1,
        [EdgeInsets_top]: 1,
        [EdgeInsets_left]: 1
      });
    },
    get C461() {
      return C[461] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 4,
        [Radius_x]: 4
      });
    },
    get C460() {
      return C[460] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[461] || CT.C461,
        [BorderRadius_bottomLeft]: C[461] || CT.C461,
        [BorderRadius_topRight]: C[461] || CT.C461,
        [BorderRadius_topLeft]: C[461] || CT.C461
      });
    },
    get C462() {
      return C[462] = dart.const({
        __proto__: treemap.TreemapSelectionSettings.prototype,
        [border$1]: null,
        [color$0]: null
      });
    },
    get C463() {
      return C[463] = dart.const({
        __proto__: treemap.TreemapTooltipSettings.prototype,
        [borderRadius$]: C[460] || CT.C460,
        [borderWidth$]: 1,
        [borderColor$]: null,
        [color$1]: null
      });
    },
    get C466() {
      return C[466] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "layoutType",
        [_Location_column]: 7,
        [_Location_line]: 2500,
        [_Location_file]: null
      });
    },
    get C467() {
      return C[467] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dataCount",
        [_Location_column]: 7,
        [_Location_line]: 2501,
        [_Location_file]: null
      });
    },
    get C468() {
      return C[468] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "levels",
        [_Location_column]: 7,
        [_Location_line]: 2502,
        [_Location_file]: null
      });
    },
    get C469() {
      return C[469] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weightValueMapper",
        [_Location_column]: 7,
        [_Location_line]: 2503,
        [_Location_file]: null
      });
    },
    get C470() {
      return C[470] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "colorMappers",
        [_Location_column]: 7,
        [_Location_line]: 2504,
        [_Location_file]: null
      });
    },
    get C471() {
      return C[471] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "legend",
        [_Location_column]: 7,
        [_Location_line]: 2505,
        [_Location_file]: null
      });
    },
    get C472() {
      return C[472] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 7,
        [_Location_line]: 2506,
        [_Location_file]: null
      });
    },
    get C473() {
      return C[473] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionSettings",
        [_Location_column]: 7,
        [_Location_line]: 2507,
        [_Location_file]: null
      });
    },
    get C474() {
      return C[474] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipSettings",
        [_Location_column]: 7,
        [_Location_line]: 2508,
        [_Location_file]: null
      });
    },
    get C475() {
      return C[475] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverBorder",
        [_Location_column]: 7,
        [_Location_line]: 2509,
        [_Location_file]: null
      });
    },
    get C465() {
      return C[465] = dart.constList([C[466] || CT.C466, C[467] || CT.C467, C[468] || CT.C468, C[469] || CT.C469, C[470] || CT.C470, C[471] || CT.C471, C[472] || CT.C472, C[473] || CT.C473, C[474] || CT.C474, C[475] || CT.C475], widget_inspector._Location);
    },
    get C464() {
      return C[464] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[465] || CT.C465,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 2499,
        [_Location_file]: "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/treemap.dart"
      });
    }
  }, false);
  var C = Array(476).fill(void 0);
  var I = [
    "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/tooltip.dart",
    "package:syncfusion_flutter_treemap/src/tooltip.dart",
    "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/legend.dart",
    "package:syncfusion_flutter_treemap/src/legend.dart",
    "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/src/layouts.dart",
    "package:syncfusion_flutter_treemap/src/layouts.dart",
    "file:///D:/Sources/TreeMapProject/flutter_treemap/syncfusion_flutter_treemap/lib/treemap.dart",
    "package:syncfusion_flutter_treemap/treemap.dart"
  ];
  var settings$ = dart.privateName(tooltip, "TreemapTooltip.settings");
  tooltip.TreemapTooltip = class TreemapTooltip extends framework.StatefulWidget {
    get settings() {
      return this[settings$];
    }
    set settings(value) {
      super.settings = value;
    }
    createState() {
      return new tooltip._TreemapTooltipState.new();
    }
  };
  (tooltip.TreemapTooltip.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[0], 14, 49, "settings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[settings$] = settings;
    tooltip.TreemapTooltip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tooltip.TreemapTooltip.prototype;
  dart.addTypeTests(tooltip.TreemapTooltip);
  dart.addTypeCaches(tooltip.TreemapTooltip);
  dart.setMethodSignature(tooltip.TreemapTooltip, () => ({
    __proto__: dart.getMethods(tooltip.TreemapTooltip.__proto__),
    createState: dart.fnType(tooltip._TreemapTooltipState, [])
  }));
  dart.setLibraryUri(tooltip.TreemapTooltip, I[1]);
  dart.setFieldSignature(tooltip.TreemapTooltip, () => ({
    __proto__: dart.getFields(tooltip.TreemapTooltip.__proto__),
    settings: dart.finalFieldType(treemap.TreemapTooltipSettings)
  }));
  var _child = dart.privateName(tooltip, "_child");
  var ___TreemapTooltipState__isDesktop = dart.privateName(tooltip, "_#_TreemapTooltipState#_isDesktop");
  var ___TreemapTooltipState_controller = dart.privateName(tooltip, "_#_TreemapTooltipState#controller");
  var _isDesktop = dart.privateName(tooltip, "_isDesktop");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Color_value = dart.privateName(ui, "Color.value");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(tooltip.TreemapTooltip) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(tooltip.TreemapTooltip)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(tooltip.TreemapTooltip));
  tooltip._TreemapTooltipState = class _TreemapTooltipState extends State_SingleTickerProviderStateMixin$36 {
    get [_isDesktop]() {
      let t0;
      t0 = this[___TreemapTooltipState__isDesktop];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_isDesktop")) : t0;
    }
    set [_isDesktop](t0) {
      if (t0 == null) dart.nullFailed(I[0], 26, 13, "null");
      this[___TreemapTooltipState__isDesktop] = t0;
    }
    get controller() {
      let t1;
      t1 = this[___TreemapTooltipState_controller];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("controller")) : t1;
    }
    set controller(t1) {
      if (t1 == null) dart.nullFailed(I[0], 27, 28, "null");
      this[___TreemapTooltipState_controller] = t1;
    }
    adoptChild(tile) {
      if (tile == null) dart.nullFailed(I[0], 29, 31, "tile");
      if (dart.test(this.mounted)) {
        this.setState(dart.fn(() => {
          let child = dart.nullCheck(tile.level.tooltipBuilder)(this.context, tile);
          this[_child] = child != null ? new basic.IgnorePointer.new({child: child, $creationLocationd_0dea112b090073317d4: C[0] || CT.C0}) : null;
        }, T.VoidTovoid()));
      }
    }
    initState() {
      this.controller = new animation_controller.AnimationController.new({vsync: this, duration: C[3] || CT.C3});
      super.initState();
    }
    dispose() {
      this.controller.dispose();
      super.dispose();
    }
    build(context) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 52, 29, "context");
      let themeData = theme.Theme.of(context);
      this[_isDesktop] = true || themeData.platform == platform.TargetPlatform.macOS || themeData.platform == platform.TargetPlatform.windows || themeData.platform == platform.TargetPlatform.linux;
      let settings = this.widget.settings.copyWith({color: (t2 = this.widget.settings.color, t2 == null ? themeData.brightness == ui.Brightness.light ? C[4] || CT.C4 : C[5] || CT.C5 : t2)});
      return new tooltip._TreemapTooltipRenderObjectWidget.new({child: this[_child], settings: settings, state: this, $creationLocationd_0dea112b090073317d4: C[6] || CT.C6});
    }
  };
  (tooltip._TreemapTooltipState.new = function() {
    this[_child] = null;
    this[___TreemapTooltipState__isDesktop] = null;
    this[___TreemapTooltipState_controller] = null;
    tooltip._TreemapTooltipState.__proto__.new.call(this);
    ;
  }).prototype = tooltip._TreemapTooltipState.prototype;
  dart.addTypeTests(tooltip._TreemapTooltipState);
  dart.addTypeCaches(tooltip._TreemapTooltipState);
  dart.setMethodSignature(tooltip._TreemapTooltipState, () => ({
    __proto__: dart.getMethods(tooltip._TreemapTooltipState.__proto__),
    adoptChild: dart.fnType(dart.void, [layouts.TreemapTile]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(tooltip._TreemapTooltipState, () => ({
    __proto__: dart.getGetters(tooltip._TreemapTooltipState.__proto__),
    [_isDesktop]: core.bool,
    controller: animation_controller.AnimationController
  }));
  dart.setSetterSignature(tooltip._TreemapTooltipState, () => ({
    __proto__: dart.getSetters(tooltip._TreemapTooltipState.__proto__),
    [_isDesktop]: core.bool,
    controller: animation_controller.AnimationController
  }));
  dart.setLibraryUri(tooltip._TreemapTooltipState, I[1]);
  dart.setFieldSignature(tooltip._TreemapTooltipState, () => ({
    __proto__: dart.getFields(tooltip._TreemapTooltipState.__proto__),
    [_child]: dart.fieldType(dart.nullable(framework.Widget)),
    [___TreemapTooltipState__isDesktop]: dart.fieldType(dart.nullable(core.bool)),
    [___TreemapTooltipState_controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  var state$ = dart.privateName(tooltip, "_TreemapTooltipRenderObjectWidget.state");
  var settings$0 = dart.privateName(tooltip, "_TreemapTooltipRenderObjectWidget.settings");
  tooltip._TreemapTooltipRenderObjectWidget = class _TreemapTooltipRenderObjectWidget extends framework.SingleChildRenderObjectWidget {
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    get settings() {
      return this[settings$0];
    }
    set settings(value) {
      super.settings = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 78, 49, "context");
      return new tooltip.RenderTooltip.new({settings: this.settings, mediaQueryData: media_query.MediaQuery.of(context), state: this.state});
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 87, 40, "context");
      tooltip.RenderTooltip.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 87, 63, "renderObject");
      t2 = renderObject;
      (() => {
        t2.settings = this.settings;
        t2.mediaQueryData = media_query.MediaQuery.of(context);
        return t2;
      })();
    }
  };
  (tooltip._TreemapTooltipRenderObjectWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[0], 71, 37, "settings");
    let state = opts && 'state' in opts ? opts.state : null;
    if (state == null) dart.nullFailed(I[0], 71, 61, "state");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[settings$0] = settings;
    this[state$] = state;
    tooltip._TreemapTooltipRenderObjectWidget.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tooltip._TreemapTooltipRenderObjectWidget.prototype;
  dart.addTypeTests(tooltip._TreemapTooltipRenderObjectWidget);
  dart.addTypeCaches(tooltip._TreemapTooltipRenderObjectWidget);
  dart.setMethodSignature(tooltip._TreemapTooltipRenderObjectWidget, () => ({
    __proto__: dart.getMethods(tooltip._TreemapTooltipRenderObjectWidget.__proto__),
    createRenderObject: dart.fnType(tooltip.RenderTooltip, [framework.BuildContext])
  }));
  dart.setLibraryUri(tooltip._TreemapTooltipRenderObjectWidget, I[1]);
  dart.setFieldSignature(tooltip._TreemapTooltipRenderObjectWidget, () => ({
    __proto__: dart.getFields(tooltip._TreemapTooltipRenderObjectWidget.__proto__),
    state: dart.finalFieldType(tooltip._TreemapTooltipState),
    settings: dart.finalFieldType(treemap.TreemapTooltipSettings)
  }));
  var _tooltipShape = dart.privateName(tooltip, "_tooltipShape");
  var _waitDuration = dart.privateName(tooltip, "_waitDuration");
  var _hideDeferDuration = dart.privateName(tooltip, "_hideDeferDuration");
  var __RenderTooltip__scaleAnimation = dart.privateName(tooltip, "_#RenderTooltip#_scaleAnimation");
  var _showTimer = dart.privateName(tooltip, "_showTimer");
  var _hideDeferTimer = dart.privateName(tooltip, "_hideDeferTimer");
  var _tileSize = dart.privateName(tooltip, "_tileSize");
  var _position = dart.privateName(tooltip, "_position");
  var _preferTooltipOnTop = dart.privateName(tooltip, "_preferTooltipOnTop");
  var _shouldCalculateTooltipPosition = dart.privateName(tooltip, "_shouldCalculateTooltipPosition");
  var _previousTile = dart.privateName(tooltip, "_previousTile");
  var __RenderTooltip__textDirection = dart.privateName(tooltip, "_#RenderTooltip#_textDirection");
  var _pointerKind = dart.privateName(tooltip, "_pointerKind");
  var __RenderTooltip__settings = dart.privateName(tooltip, "_#RenderTooltip#_settings");
  var _mediaQueryData = dart.privateName(tooltip, "_mediaQueryData");
  var _state = dart.privateName(tooltip, "_state");
  var _scaleAnimation = dart.privateName(tooltip, "_scaleAnimation");
  var _textDirection = dart.privateName(tooltip, "_textDirection");
  var _settings = dart.privateName(tooltip, "_settings");
  var _updatePositionAndDirection = dart.privateName(tooltip, "_updatePositionAndDirection");
  tooltip.RenderTooltip = class RenderTooltip extends proxy_box.RenderProxyBox {
    get [_scaleAnimation]() {
      let t2;
      t2 = this[__RenderTooltip__scaleAnimation];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_scaleAnimation")) : t2;
    }
    set [_scaleAnimation](t2) {
      if (t2 == null) dart.nullFailed(I[0], 117, 26, "null");
      this[__RenderTooltip__scaleAnimation] = t2;
    }
    get [_textDirection]() {
      let t3;
      t3 = this[__RenderTooltip__textDirection];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_textDirection")) : t3;
    }
    set [_textDirection](t3) {
      if (t3 == null) dart.nullFailed(I[0], 125, 22, "null");
      this[__RenderTooltip__textDirection] = t3;
    }
    get settings() {
      return this[_settings];
    }
    get [_settings]() {
      let t4;
      t4 = this[__RenderTooltip__settings];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_settings")) : t4;
    }
    set [_settings](t4) {
      if (t4 == null) dart.nullFailed(I[0], 130, 31, "null");
      this[__RenderTooltip__settings] = t4;
    }
    set settings(value) {
      if (value == null) dart.nullFailed(I[0], 131, 39, "value");
      if (dart.equals(this[_settings], value)) {
        return;
      }
      this[_settings] = value;
    }
    get mediaQueryData() {
      return this[_mediaQueryData];
    }
    set mediaQueryData(value) {
      if (value == null) dart.nullFailed(I[0], 141, 37, "value");
      if (this[_mediaQueryData].orientation == value.orientation) {
        return;
      }
      this[_mediaQueryData] = value;
      this.hide({immediately: true});
    }
    show(globalFocalPoint, tile, tileSize, kind) {
      let t5, t5$, t5$0;
      if (globalFocalPoint == null) dart.nullFailed(I[0], 150, 20, "globalFocalPoint");
      if (tile == null) dart.nullFailed(I[0], 150, 50, "tile");
      if (tileSize == null) dart.nullFailed(I[0], 150, 61, "tileSize");
      if (kind == null) dart.nullFailed(I[0], 151, 19, "kind");
      this[_pointerKind] = kind;
      if (dart.test(this[_state][_isDesktop]) && dart.equals(this[_previousTile], tile)) {
        return;
      }
      this[_shouldCalculateTooltipPosition] = true;
      this[_state].adoptChild(tile);
      this[_position] = this.globalToLocal(globalFocalPoint);
      this[_tileSize] = tileSize;
      t5 = this[_hideDeferTimer];
      t5 == null ? null : t5.cancel();
      if (dart.test(this[_state][_isDesktop]) && this[_pointerKind] == layouts.PointerKind.hover) {
        if (!dart.equals(this[_previousTile], tile)) {
          this[_previousTile] = tile;
          if (dart.notNull(this[_state].controller.value) > 0) {
            this[_state].controller.reset();
          }
          t5$ = this[_showTimer];
          t5$ == null ? null : t5$.cancel();
          this[_showTimer] = async.Timer.new(C[14] || CT.C14, dart.fn(() => {
            this[_state].controller.forward({from: 0.0});
          }, T.VoidTovoid()));
        }
      } else {
        this[_state].controller.forward({from: 0.0});
        t5$0 = this[_showTimer];
        t5$0 == null ? null : t5$0.cancel();
        if (this[_pointerKind] == layouts.PointerKind.touch) {
          this[_showTimer] = async.Timer.new(this[_waitDuration], dart.bind(this, 'hide'));
        }
      }
    }
    hide(opts) {
      let t5, t5$;
      let immediately = opts && 'immediately' in opts ? opts.immediately : false;
      if (immediately == null) dart.nullFailed(I[0], 184, 19, "immediately");
      this[_previousTile] = null;
      this[_pointerKind] = null;
      t5 = this[_showTimer];
      t5 == null ? null : t5.cancel();
      if (dart.test(immediately)) {
        this[_state].controller.reset();
        return;
      }
      if (dart.test(this[_state][_isDesktop])) {
        t5$ = this[_hideDeferTimer];
        t5$ == null ? null : t5$.cancel();
        this[_hideDeferTimer] = async.Timer.new(this[_hideDeferDuration], dart.fn(() => {
          this[_state].controller.reverse();
        }, T.VoidTovoid()));
      } else {
        this[_state].controller.reverse();
      }
    }
    get isRepaintBoundary() {
      return true;
    }
    performLayout() {
      let t5;
      t5 = this.child;
      t5 == null ? null : t5.layout(this.constraints);
      this.size = new ui.Size.new(this.constraints.maxWidth, this.constraints.maxHeight);
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[0], 214, 29, "owner");
      super.attach(owner);
      this[_scaleAnimation].addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t5, t5$;
      t5 = this[_showTimer];
      t5 == null ? null : t5.cancel();
      t5$ = this[_hideDeferTimer];
      t5$ == null ? null : t5$.cancel();
      this[_scaleAnimation].removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 228, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 228, 46, "offset");
      if (this.child != null && dart.test(dart.nullCheck(this.child).attached) && this[_position] != null) {
        if (dart.test(this[_shouldCalculateTooltipPosition])) {
          this[_updatePositionAndDirection]();
          this[_shouldCalculateTooltipPosition] = false;
        }
        this[_tooltipShape].paint(context, offset, dart.nullCheck(this[_position]), this[_preferTooltipOnTop], this, this[_scaleAnimation], this[_settings], this[_textDirection]);
      }
    }
    [_updatePositionAndDirection]() {
      let height = dart.notNull(dart.nullCheck(this.child).size.height) + 7;
      if (height + 15 < dart.notNull(dart.nullCheck(this[_tileSize]).height) * 0.7) {
        this[_position] = dart.nullCheck(this[_position])['+'](new ui.Offset.new(dart.notNull(dart.nullCheck(this[_tileSize]).width) / 2, height + 15));
        this[_preferTooltipOnTop] = true;
      } else {
        this[_position] = dart.nullCheck(this[_position])['+'](new ui.Offset.new(dart.notNull(dart.nullCheck(this[_tileSize]).width) / 2, dart.notNull(dart.nullCheck(this[_tileSize]).height) * 0.3));
        this[_preferTooltipOnTop] = this.paintBounds.contains(dart.nullCheck(this[_position])['-'](new ui.Offset.new(0.0, height)));
      }
    }
  };
  (tooltip.RenderTooltip.new = function(opts) {
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[0], 98, 37, "settings");
    let mediaQueryData = opts && 'mediaQueryData' in opts ? opts.mediaQueryData : null;
    if (mediaQueryData == null) dart.nullFailed(I[0], 99, 29, "mediaQueryData");
    let state = opts && 'state' in opts ? opts.state : null;
    if (state == null) dart.nullFailed(I[0], 100, 35, "state");
    this[_tooltipShape] = C[11] || CT.C11;
    this[_waitDuration] = C[12] || CT.C12;
    this[_hideDeferDuration] = C[13] || CT.C13;
    this[__RenderTooltip__scaleAnimation] = null;
    this[_showTimer] = null;
    this[_hideDeferTimer] = null;
    this[_tileSize] = null;
    this[_position] = null;
    this[_preferTooltipOnTop] = true;
    this[_shouldCalculateTooltipPosition] = false;
    this[_previousTile] = null;
    this[__RenderTooltip__textDirection] = null;
    this[_pointerKind] = null;
    this[__RenderTooltip__settings] = null;
    this[__RenderTooltip__settings] = settings;
    this[_mediaQueryData] = mediaQueryData;
    this[_state] = state;
    tooltip.RenderTooltip.__proto__.new.call(this);
    this[_scaleAnimation] = new animations.CurvedAnimation.new({parent: this[_state].controller, curve: curves.Curves.easeOutBack});
    this[_textDirection] = basic.Directionality.of(this[_state].context);
  }).prototype = tooltip.RenderTooltip.prototype;
  dart.addTypeTests(tooltip.RenderTooltip);
  dart.addTypeCaches(tooltip.RenderTooltip);
  dart.setMethodSignature(tooltip.RenderTooltip, () => ({
    __proto__: dart.getMethods(tooltip.RenderTooltip.__proto__),
    show: dart.fnType(dart.void, [ui.Offset, layouts.TreemapTile, ui.Size, layouts.PointerKind]),
    hide: dart.fnType(dart.void, [], {immediately: core.bool}, {}),
    [_updatePositionAndDirection]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(tooltip.RenderTooltip, () => ({
    __proto__: dart.getGetters(tooltip.RenderTooltip.__proto__),
    [_scaleAnimation]: animation.Animation$(core.double),
    [_textDirection]: ui.TextDirection,
    settings: treemap.TreemapTooltipSettings,
    [_settings]: treemap.TreemapTooltipSettings,
    mediaQueryData: media_query.MediaQueryData
  }));
  dart.setSetterSignature(tooltip.RenderTooltip, () => ({
    __proto__: dart.getSetters(tooltip.RenderTooltip.__proto__),
    [_scaleAnimation]: animation.Animation$(core.double),
    [_textDirection]: ui.TextDirection,
    [_settings]: treemap.TreemapTooltipSettings,
    settings: treemap.TreemapTooltipSettings,
    mediaQueryData: media_query.MediaQueryData
  }));
  dart.setLibraryUri(tooltip.RenderTooltip, I[1]);
  dart.setFieldSignature(tooltip.RenderTooltip, () => ({
    __proto__: dart.getFields(tooltip.RenderTooltip.__proto__),
    [_state]: dart.finalFieldType(tooltip._TreemapTooltipState),
    [_tooltipShape]: dart.finalFieldType(tooltip._TooltipShape),
    [_waitDuration]: dart.finalFieldType(core.Duration),
    [_hideDeferDuration]: dart.finalFieldType(core.Duration),
    [__RenderTooltip__scaleAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_showTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [_hideDeferTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [_tileSize]: dart.fieldType(dart.nullable(ui.Size)),
    [_position]: dart.fieldType(dart.nullable(ui.Offset)),
    [_preferTooltipOnTop]: dart.fieldType(core.bool),
    [_shouldCalculateTooltipPosition]: dart.fieldType(core.bool),
    [_previousTile]: dart.fieldType(dart.nullable(layouts.TreemapTile)),
    [__RenderTooltip__textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_pointerKind]: dart.fieldType(dart.nullable(layouts.PointerKind)),
    [__RenderTooltip__settings]: dart.fieldType(dart.nullable(treemap.TreemapTooltipSettings)),
    [_mediaQueryData]: dart.fieldType(media_query.MediaQueryData)
  }));
  dart.defineLazy(tooltip.RenderTooltip, {
    /*tooltip.RenderTooltip.tooltipTriangleHeight*/get tooltipTriangleHeight() {
      return 7;
    },
    /*tooltip.RenderTooltip._topPadding*/get _topPadding() {
      return 15;
    }
  }, false);
  var _getTooltipPath = dart.privateName(tooltip, "_getTooltipPath");
  var _getShiftPosition = dart.privateName(tooltip, "_getShiftPosition");
  tooltip._TooltipShape = class _TooltipShape extends core.Object {
    paint(context, offset, center, preferTooltipOnTop, parentBox, tooltipAnimation, tooltipSettings, textDirection) {
      let t5, t5$, t5$0;
      if (context == null) dart.nullFailed(I[0], 269, 23, "context");
      if (offset == null) dart.nullFailed(I[0], 270, 14, "offset");
      if (center == null) dart.nullFailed(I[0], 271, 14, "center");
      if (preferTooltipOnTop == null) dart.nullFailed(I[0], 272, 12, "preferTooltipOnTop");
      if (parentBox == null) dart.nullFailed(I[0], 273, 22, "parentBox");
      if (tooltipAnimation == null) dart.nullFailed(I[0], 274, 25, "tooltipAnimation");
      if (tooltipSettings == null) dart.nullFailed(I[0], 275, 30, "tooltipSettings");
      if (textDirection == null) dart.nullFailed(I[0], 276, 21, "textDirection");
      let path = ui.Path.new();
      let borderRadius = tooltipSettings.borderRadius.resolve(textDirection);
      let tooltipWidth = dart.nullCheck(parentBox.child).size.width;
      let tooltipHeight = dart.nullCheck(parentBox.child).size.height;
      let halfTooltipWidth = dart.notNull(tooltipWidth) / 2;
      let halfTooltipHeight = dart.notNull(tooltipHeight) / 2;
      let triangleHeight = 7;
      let tooltipStartPoint = triangleHeight + dart.notNull(tooltipHeight) / 2;
      let tooltipTriangleOffsetY = tooltipStartPoint - triangleHeight;
      let endGlobal = dart.notNull(parentBox.size.width) - 6;
      let rightLineWidth = dart.notNull(center.dx) + halfTooltipWidth > endGlobal ? endGlobal - dart.notNull(center.dx) : halfTooltipWidth;
      let leftLineWidth = dart.notNull(center.dx) - halfTooltipWidth < 6 ? dart.notNull(center.dx) - 6 : dart.notNull(tooltipWidth) - rightLineWidth;
      rightLineWidth = leftLineWidth < halfTooltipWidth ? halfTooltipWidth - leftLineWidth + rightLineWidth : rightLineWidth;
      let moveNosePoint = leftLineWidth < dart.notNull(tooltipWidth) * 0.2 ? dart.notNull(tooltipWidth) * 0.2 - leftLineWidth : 0.0;
      moveNosePoint = rightLineWidth < dart.notNull(tooltipWidth) * 0.2 ? -(dart.notNull(tooltipWidth) * 0.2 - rightLineWidth) : moveNosePoint;
      let shiftText = leftLineWidth > rightLineWidth ? -(halfTooltipWidth - rightLineWidth) : 0.0;
      shiftText = leftLineWidth < rightLineWidth ? halfTooltipWidth - leftLineWidth : shiftText;
      rightLineWidth = rightLineWidth + 0;
      if (!dart.test(preferTooltipOnTop)) {
        triangleHeight = triangleHeight * -1;
        halfTooltipHeight = halfTooltipHeight * -1;
        tooltipTriangleOffsetY = tooltipTriangleOffsetY * -1;
        tooltipHeight = dart.notNull(tooltipHeight) * -1;
        borderRadius = new border_radius.BorderRadius.only({topRight: new ui.Radius.elliptical(borderRadius.bottomRight.x, -dart.notNull(borderRadius.bottomRight.y)), bottomRight: new ui.Radius.elliptical(borderRadius.topRight.x, -dart.notNull(borderRadius.topRight.y)), topLeft: new ui.Radius.elliptical(borderRadius.bottomLeft.x, -dart.notNull(borderRadius.bottomLeft.y)), bottomLeft: new ui.Radius.elliptical(borderRadius.topLeft.x, -dart.notNull(borderRadius.topLeft.y))});
      }
      path = this[_getTooltipPath](path, triangleHeight, halfTooltipHeight, 6, tooltipTriangleOffsetY, moveNosePoint, rightLineWidth, leftLineWidth, borderRadius, tooltipHeight);
      context.canvas.save();
      context.canvas.translate(center.dx, dart.notNull(center.dy) - triangleHeight - halfTooltipHeight);
      context.canvas.scale(tooltipAnimation.value);
      let strokeColor = (t5 = tooltipSettings.borderColor, t5 == null ? colors.Colors.transparent : t5);
      let paint = (t5$ = ui.Paint.new(), (() => {
        t5$.color = strokeColor;
        t5$.strokeWidth = dart.notNull(tooltipSettings.borderWidth) * 2;
        t5$.style = ui.PaintingStyle.stroke;
        return t5$;
      })());
      context.canvas.drawPath(path, paint);
      t5$0 = paint;
      (() => {
        t5$0.style = ui.PaintingStyle.fill;
        t5$0.color = dart.nullCheck(tooltipSettings.color);
        return t5$0;
      })();
      context.canvas.drawPath(path, paint);
      context.canvas.clipPath(path);
      context.paintChild(dart.nullCheck(parentBox.child), offset['-'](this[_getShiftPosition](offset, center, parentBox)));
      context.canvas.restore();
    }
    [_getTooltipPath](path, tooltipTriangleHeight, halfTooltipHeight, halfTooltipTriangleWidth, tooltipTriangleOffsetY, moveNosePoint, rightLineWidth, leftLineWidth, borderRadius, tooltipHeight) {
      if (path == null) dart.nullFailed(I[0], 382, 12, "path");
      if (tooltipTriangleHeight == null) dart.nullFailed(I[0], 383, 14, "tooltipTriangleHeight");
      if (halfTooltipHeight == null) dart.nullFailed(I[0], 384, 14, "halfTooltipHeight");
      if (halfTooltipTriangleWidth == null) dart.nullFailed(I[0], 385, 14, "halfTooltipTriangleWidth");
      if (tooltipTriangleOffsetY == null) dart.nullFailed(I[0], 386, 14, "tooltipTriangleOffsetY");
      if (moveNosePoint == null) dart.nullFailed(I[0], 387, 14, "moveNosePoint");
      if (rightLineWidth == null) dart.nullFailed(I[0], 388, 14, "rightLineWidth");
      if (leftLineWidth == null) dart.nullFailed(I[0], 389, 14, "leftLineWidth");
      if (borderRadius == null) dart.nullFailed(I[0], 390, 20, "borderRadius");
      if (tooltipHeight == null) dart.nullFailed(I[0], 391, 14, "tooltipHeight");
      path.reset();
      path.moveTo(0.0, dart.notNull(tooltipTriangleHeight) + dart.notNull(halfTooltipHeight));
      path.lineTo(dart.notNull(halfTooltipTriangleWidth) + dart.notNull(moveNosePoint), tooltipTriangleOffsetY);
      path.lineTo(dart.notNull(rightLineWidth) - dart.notNull(borderRadius.bottomRight.x), tooltipTriangleOffsetY);
      path.quadraticBezierTo(rightLineWidth, tooltipTriangleOffsetY, rightLineWidth, dart.notNull(tooltipTriangleOffsetY) - dart.notNull(borderRadius.bottomRight.y));
      path.lineTo(rightLineWidth, dart.notNull(tooltipTriangleOffsetY) - dart.notNull(tooltipHeight) + dart.notNull(borderRadius.topRight.y));
      path.quadraticBezierTo(rightLineWidth, dart.notNull(tooltipTriangleOffsetY) - dart.notNull(tooltipHeight), dart.notNull(rightLineWidth) - dart.notNull(borderRadius.topRight.x), dart.notNull(tooltipTriangleOffsetY) - dart.notNull(tooltipHeight));
      path.lineTo(-dart.notNull(leftLineWidth) + dart.notNull(borderRadius.topLeft.x), dart.notNull(tooltipTriangleOffsetY) - dart.notNull(tooltipHeight));
      path.quadraticBezierTo(-dart.notNull(leftLineWidth), dart.notNull(tooltipTriangleOffsetY) - dart.notNull(tooltipHeight), -dart.notNull(leftLineWidth), dart.notNull(tooltipTriangleOffsetY) - dart.notNull(tooltipHeight) + dart.notNull(borderRadius.topLeft.y));
      path.lineTo(-dart.notNull(leftLineWidth), dart.notNull(tooltipTriangleOffsetY) - dart.notNull(borderRadius.bottomLeft.y));
      path.quadraticBezierTo(-dart.notNull(leftLineWidth), tooltipTriangleOffsetY, -dart.notNull(leftLineWidth) + dart.notNull(borderRadius.bottomLeft.x), tooltipTriangleOffsetY);
      path.lineTo(-dart.notNull(halfTooltipTriangleWidth) + dart.notNull(moveNosePoint), tooltipTriangleOffsetY);
      path.close();
      return path;
    }
    [_getShiftPosition](offset, center, parentBox) {
      if (offset == null) dart.nullFailed(I[0], 477, 14, "offset");
      if (center == null) dart.nullFailed(I[0], 477, 29, "center");
      if (parentBox == null) dart.nullFailed(I[0], 477, 52, "parentBox");
      let childSize = dart.nullCheck(parentBox.child).size;
      let halfChildWidth = dart.notNull(childSize.width) / 2;
      let halfChildHeight = dart.notNull(childSize.height) / 2;
      if (dart.notNull(center.dx) + halfChildWidth + 6 > dart.notNull(parentBox.size.width)) {
        return new ui.Offset.new(dart.notNull(childSize.width) + dart.notNull(center.dx) - dart.notNull(parentBox.size.width) + 6, halfChildHeight);
      } else if (dart.notNull(center.dx) - halfChildWidth - 6 < dart.notNull(offset.dx)) {
        return new ui.Offset.new(dart.notNull(center.dx) - 6, halfChildHeight);
      }
      return new ui.Offset.new(halfChildWidth, halfChildHeight);
    }
  };
  (tooltip._TooltipShape.new = function() {
    ;
  }).prototype = tooltip._TooltipShape.prototype;
  dart.addTypeTests(tooltip._TooltipShape);
  dart.addTypeCaches(tooltip._TooltipShape);
  dart.setMethodSignature(tooltip._TooltipShape, () => ({
    __proto__: dart.getMethods(tooltip._TooltipShape.__proto__),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, ui.Offset, core.bool, proxy_box.RenderProxyBox, animation.Animation$(core.double), treemap.TreemapTooltipSettings, ui.TextDirection]),
    [_getTooltipPath]: dart.fnType(ui.Path, [ui.Path, core.double, core.double, core.double, core.double, core.double, core.double, core.double, border_radius.BorderRadius, core.double]),
    [_getShiftPosition]: dart.fnType(ui.Offset, [ui.Offset, ui.Offset, proxy_box.RenderProxyBox])
  }));
  dart.setLibraryUri(tooltip._TooltipShape, I[1]);
  dart.defineLazy(tooltip._TooltipShape, {
    /*tooltip._TooltipShape.marginSpace*/get marginSpace() {
      return 6;
    }
  }, false);
  var _name$ = dart.privateName(legend$, "_name");
  legend$._MapLegendType = class _MapLegendType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$._MapLegendType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 11, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 11, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$._MapLegendType.prototype;
  dart.addTypeTests(legend$._MapLegendType);
  dart.addTypeCaches(legend$._MapLegendType);
  dart.setLibraryUri(legend$._MapLegendType, I[3]);
  dart.setFieldSignature(legend$._MapLegendType, () => ({
    __proto__: dart.getFields(legend$._MapLegendType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$._MapLegendType, ['toString']);
  legend$._MapLegendType.vector = C[15] || CT.C15;
  legend$._MapLegendType.bar = C[16] || CT.C16;
  legend$._MapLegendType.values = C[17] || CT.C17;
  legend$.TreemapLegendPosition = class TreemapLegendPosition extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapLegendPosition.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 14, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 14, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapLegendPosition.prototype;
  dart.addTypeTests(legend$.TreemapLegendPosition);
  dart.addTypeCaches(legend$.TreemapLegendPosition);
  dart.setLibraryUri(legend$.TreemapLegendPosition, I[3]);
  dart.setFieldSignature(legend$.TreemapLegendPosition, () => ({
    __proto__: dart.getFields(legend$.TreemapLegendPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapLegendPosition, ['toString']);
  legend$.TreemapLegendPosition.left = C[18] || CT.C18;
  legend$.TreemapLegendPosition.right = C[19] || CT.C19;
  legend$.TreemapLegendPosition.top = C[20] || CT.C20;
  legend$.TreemapLegendPosition.bottom = C[21] || CT.C21;
  legend$.TreemapLegendPosition.values = C[22] || CT.C22;
  legend$.TreemapIconType = class TreemapIconType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapIconType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 29, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 29, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapIconType.prototype;
  dart.addTypeTests(legend$.TreemapIconType);
  dart.addTypeCaches(legend$.TreemapIconType);
  dart.setLibraryUri(legend$.TreemapIconType, I[3]);
  dart.setFieldSignature(legend$.TreemapIconType, () => ({
    __proto__: dart.getFields(legend$.TreemapIconType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapIconType, ['toString']);
  legend$.TreemapIconType.circle = C[23] || CT.C23;
  legend$.TreemapIconType.rectangle = C[24] || CT.C24;
  legend$.TreemapIconType.triangle = C[25] || CT.C25;
  legend$.TreemapIconType.diamond = C[26] || CT.C26;
  legend$.TreemapIconType.values = C[27] || CT.C27;
  legend$.TreemapLegendOverflowMode = class TreemapLegendOverflowMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapLegendOverflowMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 44, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 44, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapLegendOverflowMode.prototype;
  dart.addTypeTests(legend$.TreemapLegendOverflowMode);
  dart.addTypeCaches(legend$.TreemapLegendOverflowMode);
  dart.setLibraryUri(legend$.TreemapLegendOverflowMode, I[3]);
  dart.setFieldSignature(legend$.TreemapLegendOverflowMode, () => ({
    __proto__: dart.getFields(legend$.TreemapLegendOverflowMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapLegendOverflowMode, ['toString']);
  legend$.TreemapLegendOverflowMode.scroll = C[28] || CT.C28;
  legend$.TreemapLegendOverflowMode.wrap = C[29] || CT.C29;
  legend$.TreemapLegendOverflowMode.values = C[30] || CT.C30;
  legend$.TreemapLabelOverflow = class TreemapLabelOverflow extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapLabelOverflow.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 53, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 53, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapLabelOverflow.prototype;
  dart.addTypeTests(legend$.TreemapLabelOverflow);
  dart.addTypeCaches(legend$.TreemapLabelOverflow);
  dart.setLibraryUri(legend$.TreemapLabelOverflow, I[3]);
  dart.setFieldSignature(legend$.TreemapLabelOverflow, () => ({
    __proto__: dart.getFields(legend$.TreemapLabelOverflow.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapLabelOverflow, ['toString']);
  legend$.TreemapLabelOverflow.hide = C[31] || CT.C31;
  legend$.TreemapLabelOverflow.visible = C[32] || CT.C32;
  legend$.TreemapLabelOverflow.ellipsis = C[33] || CT.C33;
  legend$.TreemapLabelOverflow.values = C[34] || CT.C34;
  legend$.TreemapLegendLabelsPlacement = class TreemapLegendLabelsPlacement extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapLegendLabelsPlacement.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 67, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 67, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapLegendLabelsPlacement.prototype;
  dart.addTypeTests(legend$.TreemapLegendLabelsPlacement);
  dart.addTypeCaches(legend$.TreemapLegendLabelsPlacement);
  dart.setLibraryUri(legend$.TreemapLegendLabelsPlacement, I[3]);
  dart.setFieldSignature(legend$.TreemapLegendLabelsPlacement, () => ({
    __proto__: dart.getFields(legend$.TreemapLegendLabelsPlacement.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapLegendLabelsPlacement, ['toString']);
  legend$.TreemapLegendLabelsPlacement.onItem = C[35] || CT.C35;
  legend$.TreemapLegendLabelsPlacement.betweenItems = C[36] || CT.C36;
  legend$.TreemapLegendLabelsPlacement.values = C[37] || CT.C37;
  legend$.TreemapLegendEdgeLabelsPlacement = class TreemapLegendEdgeLabelsPlacement extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapLegendEdgeLabelsPlacement.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 78, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 78, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapLegendEdgeLabelsPlacement.prototype;
  dart.addTypeTests(legend$.TreemapLegendEdgeLabelsPlacement);
  dart.addTypeCaches(legend$.TreemapLegendEdgeLabelsPlacement);
  dart.setLibraryUri(legend$.TreemapLegendEdgeLabelsPlacement, I[3]);
  dart.setFieldSignature(legend$.TreemapLegendEdgeLabelsPlacement, () => ({
    __proto__: dart.getFields(legend$.TreemapLegendEdgeLabelsPlacement.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapLegendEdgeLabelsPlacement, ['toString']);
  legend$.TreemapLegendEdgeLabelsPlacement.inside = C[38] || CT.C38;
  legend$.TreemapLegendEdgeLabelsPlacement.center = C[39] || CT.C39;
  legend$.TreemapLegendEdgeLabelsPlacement.values = C[40] || CT.C40;
  legend$.TreemapLegendPaintingStyle = class TreemapLegendPaintingStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (legend$.TreemapLegendPaintingStyle.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[2], 88, 6, "index");
    if (_name == null) dart.nullFailed(I[2], 88, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = legend$.TreemapLegendPaintingStyle.prototype;
  dart.addTypeTests(legend$.TreemapLegendPaintingStyle);
  dart.addTypeCaches(legend$.TreemapLegendPaintingStyle);
  dart.setLibraryUri(legend$.TreemapLegendPaintingStyle, I[3]);
  dart.setFieldSignature(legend$.TreemapLegendPaintingStyle, () => ({
    __proto__: dart.getFields(legend$.TreemapLegendPaintingStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend$.TreemapLegendPaintingStyle, ['toString']);
  legend$.TreemapLegendPaintingStyle.solid = C[41] || CT.C41;
  legend$.TreemapLegendPaintingStyle.gradient = C[42] || CT.C42;
  legend$.TreemapLegendPaintingStyle.values = C[43] || CT.C43;
  var title$ = dart.privateName(legend$, "TreemapLegend.title");
  var padding$ = dart.privateName(legend$, "TreemapLegend.padding");
  var direction$ = dart.privateName(legend$, "TreemapLegend.direction");
  var position$ = dart.privateName(legend$, "TreemapLegend.position");
  var offset$ = dart.privateName(legend$, "TreemapLegend.offset");
  var spacing$ = dart.privateName(legend$, "TreemapLegend.spacing");
  var textStyle$ = dart.privateName(legend$, "TreemapLegend.textStyle");
  var overflowMode$ = dart.privateName(legend$, "TreemapLegend.overflowMode");
  var _iconType = dart.privateName(legend$, "TreemapLegend._iconType");
  var _segmentSize = dart.privateName(legend$, "TreemapLegend._segmentSize");
  var _iconSize = dart.privateName(legend$, "TreemapLegend._iconSize");
  var _labelsPlacement = dart.privateName(legend$, "TreemapLegend._labelsPlacement");
  var _edgeLabelsPlacement = dart.privateName(legend$, "TreemapLegend._edgeLabelsPlacement");
  var _labelOverflow = dart.privateName(legend$, "TreemapLegend._labelOverflow");
  var _legendType = dart.privateName(legend$, "TreemapLegend._legendType");
  var _segmentPaintingStyle = dart.privateName(legend$, "TreemapLegend._segmentPaintingStyle");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _iconType$ = dart.privateName(legend$, "_iconType");
  var _segmentSize$ = dart.privateName(legend$, "_segmentSize");
  var _iconSize$ = dart.privateName(legend$, "_iconSize");
  var _labelsPlacement$ = dart.privateName(legend$, "_labelsPlacement");
  var _edgeLabelsPlacement$ = dart.privateName(legend$, "_edgeLabelsPlacement");
  var _labelOverflow$ = dart.privateName(legend$, "_labelOverflow");
  var _legendType$ = dart.privateName(legend$, "_legendType");
  var _segmentPaintingStyle$ = dart.privateName(legend$, "_segmentPaintingStyle");
  legend$.TreemapLegend = class TreemapLegend extends diagnostics.DiagnosticableTree {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get spacing() {
      return this[spacing$];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get overflowMode() {
      return this[overflowMode$];
    }
    set overflowMode(value) {
      super.overflowMode = value;
    }
    get [_iconType$]() {
      return this[_iconType];
    }
    set [_iconType$](value) {
      super[_iconType$] = value;
    }
    get [_segmentSize$]() {
      return this[_segmentSize];
    }
    set [_segmentSize$](value) {
      super[_segmentSize$] = value;
    }
    get [_iconSize$]() {
      return this[_iconSize];
    }
    set [_iconSize$](value) {
      super[_iconSize$] = value;
    }
    get [_labelsPlacement$]() {
      return this[_labelsPlacement];
    }
    set [_labelsPlacement$](value) {
      super[_labelsPlacement$] = value;
    }
    get [_edgeLabelsPlacement$]() {
      return this[_edgeLabelsPlacement];
    }
    set [_edgeLabelsPlacement$](value) {
      super[_edgeLabelsPlacement$] = value;
    }
    get [_labelOverflow$]() {
      return this[_labelOverflow];
    }
    set [_labelOverflow$](value) {
      super[_labelOverflow$] = value;
    }
    get [_legendType$]() {
      return this[_legendType];
    }
    set [_legendType$](value) {
      super[_legendType$] = value;
    }
    get [_segmentPaintingStyle$]() {
      return this[_segmentPaintingStyle];
    }
    set [_segmentPaintingStyle$](value) {
      super[_segmentPaintingStyle$] = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      if (legend$.TreemapLegend.is(other) && other[_legendType$] != this[_legendType$]) {
        return false;
      }
      return legend$.TreemapLegend.is(other) && dart.equals(other.padding, this.padding) && dart.equals(other.offset, this.offset) && other.spacing == this.spacing && other.direction == this.direction && other.overflowMode == this.overflowMode && other.position == this.position && dart.equals(other.textStyle, this.textStyle) && dart.equals(other.title, this.title);
    }
    get hashCode() {
      return ui.hashValues(this.padding, this.offset, this.spacing, this.direction, this.overflowMode, this.position, this.textStyle, this.title);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[2], 1452, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOf_MapLegendType()).new("legendType", this[_legendType$]));
      properties.add(new (T.DiagnosticsPropertyOfEdgeInsetsGeometry()).new("padding", this.padding));
      properties.add(new (T.DiagnosticsPropertyOfOffset()).new("offset", this.offset));
      properties.add(new diagnostics.DoubleProperty.new("spacing", this.spacing));
      if (this.direction != null) {
        properties.add(new (T.EnumPropertyOfAxis()).new("direction", this.direction));
      }
      properties.add(new (T.EnumPropertyOfTreemapLegendOverflowMode()).new("overflowMode", this.overflowMode));
      properties.add(new (T.EnumPropertyOfTreemapLegendPosition()).new("position", this.position));
      if (this.textStyle != null) {
        properties.add(dart.nullCheck(this.textStyle).toDiagnosticsNode({name: "textStyle"}));
      }
      if (this[_legendType$] == legend$._MapLegendType.vector) {
        properties.add(new (T.DiagnosticsPropertyOfSize()).new("iconSize", this[_iconSize$]));
        properties.add(new (T.EnumPropertyOfTreemapIconType()).new("iconType", this[_iconType$]));
      } else {
        properties.add(new (T.DiagnosticsPropertyOfSize()).new("segmentSize", this[_segmentSize$]));
        properties.add(new (T.EnumPropertyOfTreemapLegendLabelsPlacement()).new("labelsPlacement", this[_labelsPlacement$]));
        properties.add(new (T.EnumPropertyOfTreemapLegendEdgeLabelsPlacement()).new("edgeLabelsPlacement", this[_edgeLabelsPlacement$]));
        properties.add(new (T.EnumPropertyOfTreemapLabelOverflow()).new("labelOverflowMode", this[_labelOverflow$]));
        properties.add(new (T.EnumPropertyOfTreemapLegendPaintingStyle()).new("segmentPaintingStyle", this[_segmentPaintingStyle$]));
      }
    }
  };
  (legend$.TreemapLegend.new = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let position = opts && 'position' in opts ? opts.position : C[20] || CT.C20;
    if (position == null) dart.nullFailed(I[2], 304, 10, "position");
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let overflowMode = opts && 'overflowMode' in opts ? opts.overflowMode : C[29] || CT.C29;
    if (overflowMode == null) dart.nullFailed(I[2], 306, 10, "overflowMode");
    let direction = opts && 'direction' in opts ? opts.direction : null;
    let padding = opts && 'padding' in opts ? opts.padding : C[44] || CT.C44;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 10;
    if (spacing == null) dart.nullFailed(I[2], 309, 10, "spacing");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let iconType = opts && 'iconType' in opts ? opts.iconType : C[23] || CT.C23;
    if (iconType == null) dart.nullFailed(I[2], 311, 21, "iconType");
    let iconSize = opts && 'iconSize' in opts ? opts.iconSize : C[45] || CT.C45;
    if (iconSize == null) dart.nullFailed(I[2], 312, 10, "iconSize");
    this[title$] = title;
    this[position$] = position;
    this[offset$] = offset;
    this[overflowMode$] = overflowMode;
    this[direction$] = direction;
    this[padding$] = padding;
    this[spacing$] = spacing;
    this[textStyle$] = textStyle;
    this[_legendType] = legend$._MapLegendType.vector;
    this[_iconType] = iconType;
    this[_iconSize] = iconSize;
    this[_segmentSize] = null;
    this[_labelsPlacement] = null;
    this[_edgeLabelsPlacement] = null;
    this[_labelOverflow] = null;
    this[_segmentPaintingStyle] = null;
    if (!(dart.notNull(spacing) >= 0)) dart.assertFailed(null, I[2], 321, 16, "spacing >= 0");
    legend$.TreemapLegend.__proto__.new.call(this);
    ;
  }).prototype = legend$.TreemapLegend.prototype;
  (legend$.TreemapLegend.bar = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let overflowMode = opts && 'overflowMode' in opts ? opts.overflowMode : C[28] || CT.C28;
    if (overflowMode == null) dart.nullFailed(I[2], 425, 10, "overflowMode");
    let padding = opts && 'padding' in opts ? opts.padding : C[44] || CT.C44;
    let position = opts && 'position' in opts ? opts.position : C[20] || CT.C20;
    if (position == null) dart.nullFailed(I[2], 427, 10, "position");
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 2;
    if (spacing == null) dart.nullFailed(I[2], 429, 10, "spacing");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let direction = opts && 'direction' in opts ? opts.direction : null;
    let segmentSize = opts && 'segmentSize' in opts ? opts.segmentSize : null;
    let labelsPlacement = opts && 'labelsPlacement' in opts ? opts.labelsPlacement : null;
    let edgeLabelsPlacement = opts && 'edgeLabelsPlacement' in opts ? opts.edgeLabelsPlacement : C[38] || CT.C38;
    if (edgeLabelsPlacement == null) dart.nullFailed(I[2], 434, 38, "edgeLabelsPlacement");
    let labelOverflow = opts && 'labelOverflow' in opts ? opts.labelOverflow : C[32] || CT.C32;
    if (labelOverflow == null) dart.nullFailed(I[2], 436, 26, "labelOverflow");
    let segmentPaintingStyle = opts && 'segmentPaintingStyle' in opts ? opts.segmentPaintingStyle : C[41] || CT.C41;
    if (segmentPaintingStyle == null) dart.nullFailed(I[2], 437, 32, "segmentPaintingStyle");
    this[title$] = title;
    this[overflowMode$] = overflowMode;
    this[padding$] = padding;
    this[position$] = position;
    this[offset$] = offset;
    this[spacing$] = spacing;
    this[textStyle$] = textStyle;
    this[direction$] = direction;
    this[_legendType] = legend$._MapLegendType.bar;
    this[_labelsPlacement] = labelsPlacement;
    this[_edgeLabelsPlacement] = edgeLabelsPlacement;
    this[_labelOverflow] = labelOverflow;
    this[_segmentPaintingStyle] = segmentPaintingStyle;
    this[_segmentSize] = segmentSize;
    this[_iconType] = null;
    this[_iconSize] = null;
    if (!(dart.notNull(spacing) >= 0)) dart.assertFailed(null, I[2], 447, 16, "spacing >= 0");
    legend$.TreemapLegend.__proto__.new.call(this);
    ;
  }).prototype = legend$.TreemapLegend.prototype;
  dart.addTypeTests(legend$.TreemapLegend);
  dart.addTypeCaches(legend$.TreemapLegend);
  dart.setLibraryUri(legend$.TreemapLegend, I[3]);
  dart.setFieldSignature(legend$.TreemapLegend, () => ({
    __proto__: dart.getFields(legend$.TreemapLegend.__proto__),
    title: dart.finalFieldType(dart.nullable(framework.Widget)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    direction: dart.finalFieldType(dart.nullable(basic_types.Axis)),
    position: dart.finalFieldType(legend$.TreemapLegendPosition),
    offset: dart.finalFieldType(dart.nullable(ui.Offset)),
    spacing: dart.finalFieldType(core.double),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    overflowMode: dart.finalFieldType(legend$.TreemapLegendOverflowMode),
    [_iconType$]: dart.finalFieldType(dart.nullable(legend$.TreemapIconType)),
    [_segmentSize$]: dart.finalFieldType(dart.nullable(ui.Size)),
    [_iconSize$]: dart.finalFieldType(dart.nullable(ui.Size)),
    [_labelsPlacement$]: dart.finalFieldType(dart.nullable(legend$.TreemapLegendLabelsPlacement)),
    [_edgeLabelsPlacement$]: dart.finalFieldType(dart.nullable(legend$.TreemapLegendEdgeLabelsPlacement)),
    [_labelOverflow$]: dart.finalFieldType(dart.nullable(legend$.TreemapLabelOverflow)),
    [_legendType$]: dart.finalFieldType(legend$._MapLegendType),
    [_segmentPaintingStyle$]: dart.finalFieldType(dart.nullable(legend$.TreemapLegendPaintingStyle))
  }));
  dart.defineExtensionMethods(legend$.TreemapLegend, ['_equals']);
  dart.defineExtensionAccessors(legend$.TreemapLegend, ['hashCode']);
  var dataSource$ = dart.privateName(legend$, "LegendWidget.dataSource");
  var settings$1 = dart.privateName(legend$, "LegendWidget.settings");
  legend$.LegendWidget = class LegendWidget extends framework.StatefulWidget {
    get dataSource() {
      return this[dataSource$];
    }
    set dataSource(value) {
      super.dataSource = value;
    }
    get settings() {
      return this[settings$1];
    }
    set settings(value) {
      super.settings = value;
    }
    createState() {
      return new legend$._LegendWidgetState.new();
    }
  };
  (legend$.LegendWidget.new = function(opts) {
    let dataSource = opts && 'dataSource' in opts ? opts.dataSource : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[2], 1490, 57, "settings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataSource$] = dataSource;
    this[settings$1] = settings;
    legend$.LegendWidget.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = legend$.LegendWidget.prototype;
  dart.addTypeTests(legend$.LegendWidget);
  dart.addTypeCaches(legend$.LegendWidget);
  dart.setMethodSignature(legend$.LegendWidget, () => ({
    __proto__: dart.getMethods(legend$.LegendWidget.__proto__),
    createState: dart.fnType(legend$._LegendWidgetState, [])
  }));
  dart.setLibraryUri(legend$.LegendWidget, I[3]);
  dart.setFieldSignature(legend$.LegendWidget, () => ({
    __proto__: dart.getFields(legend$.LegendWidget.__proto__),
    dataSource: dart.finalFieldType(dart.dynamic),
    settings: dart.finalFieldType(legend$.TreemapLegend)
  }));
  var ___LegendWidgetState__textStyle = dart.privateName(legend$, "_#_LegendWidgetState#_textStyle");
  var _textStyle = dart.privateName(legend$, "_textStyle");
  var _getScrollableWidget = dart.privateName(legend$, "_getScrollableWidget");
  var _getLegendItems = dart.privateName(legend$, "_getLegendItems");
  var _getLegendItem = dart.privateName(legend$, "_getLegendItem");
  legend$._LegendWidgetState = class _LegendWidgetState extends framework.State$(legend$.LegendWidget) {
    get [_textStyle]() {
      let t5;
      t5 = this[___LegendWidgetState__textStyle];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_textStyle")) : t5;
    }
    set [_textStyle](t5) {
      if (t5 == null) dart.nullFailed(I[2], 1503, 18, "null");
      this[___LegendWidgetState__textStyle] = t5;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[2], 1507, 29, "context");
      let themeData = theme.Theme.of(context);
      this[_textStyle] = dart.nullCheck(themeData.textTheme.caption).copyWith({color: dart.nullCheck(dart.nullCheck(themeData.textTheme.caption).color).withOpacity(0.87)}).merge(this.widget.settings.textStyle);
      if (this.widget.settings.title == null) {
        switch (this.widget.settings.overflowMode) {
          case C[28] || CT.C28:
          {
            return this[_getScrollableWidget]();
          }
          case C[29] || CT.C29:
          {
            return this.actualChild;
          }
        }
      } else {
        switch (this.widget.settings.overflowMode) {
          case C[28] || CT.C28:
          {
            if (this.widget.settings.position == legend$.TreemapLegendPosition.top || this.widget.settings.position == legend$.TreemapLegendPosition.bottom) {
              return new basic.Column.new({mainAxisAlignment: this.widget.settings.position == legend$.TreemapLegendPosition.bottom ? flex.MainAxisAlignment.end : flex.MainAxisAlignment.start, children: T.JSArrayOfWidget().of([dart.nullCheck(this.widget.settings.title), this[_getScrollableWidget]()]), $creationLocationd_0dea112b090073317d4: C[46] || CT.C46});
            } else {
              return new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([dart.nullCheck(this.widget.settings.title), new basic.Flexible.new({fit: flex.FlexFit.loose, child: this[_getScrollableWidget](), $creationLocationd_0dea112b090073317d4: C[50] || CT.C50})]), $creationLocationd_0dea112b090073317d4: C[54] || CT.C54});
            }
          }
          case C[29] || CT.C29:
          {
            if (this.widget.settings.position == legend$.TreemapLegendPosition.top || this.widget.settings.position == legend$.TreemapLegendPosition.bottom) {
              return new basic.Column.new({mainAxisAlignment: this.widget.settings.position == legend$.TreemapLegendPosition.bottom ? flex.MainAxisAlignment.end : flex.MainAxisAlignment.start, children: T.JSArrayOfWidget().of([dart.nullCheck(this.widget.settings.title), this.actualChild]), $creationLocationd_0dea112b090073317d4: C[58] || CT.C58});
            } else {
              return new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([dart.nullCheck(this.widget.settings.title), new basic.Flexible.new({fit: flex.FlexFit.loose, child: this.actualChild, $creationLocationd_0dea112b090073317d4: C[62] || CT.C62})]), $creationLocationd_0dea112b090073317d4: C[66] || CT.C66});
            }
          }
        }
      }
    }
    [_getScrollableWidget]() {
      return new single_child_scroll_view.SingleChildScrollView.new({scrollDirection: this.widget.settings.position == legend$.TreemapLegendPosition.top || this.widget.settings.position == legend$.TreemapLegendPosition.bottom ? basic_types.Axis.horizontal : basic_types.Axis.vertical, child: this.actualChild, $creationLocationd_0dea112b090073317d4: C[70] || CT.C70});
    }
    get actualChild() {
      let t6;
      if (this.widget.settings[_legendType$] == legend$._MapLegendType.vector) {
        let child = new basic.Wrap.new({direction: (t6 = this.widget.settings.direction, t6 == null ? this.widget.settings.position == legend$.TreemapLegendPosition.top || this.widget.settings.position == legend$.TreemapLegendPosition.bottom ? basic_types.Axis.horizontal : basic_types.Axis.vertical : t6), spacing: this.widget.settings.spacing, children: this[_getLegendItems](), runSpacing: 6.0, runAlignment: wrap.WrapAlignment.center, alignment: wrap.WrapAlignment.start, $creationLocationd_0dea112b090073317d4: C[74] || CT.C74});
        if (this.widget.settings.padding != null) {
          return new basic.Padding.new({padding: dart.nullCheck(this.widget.settings.padding), child: child, $creationLocationd_0dea112b090073317d4: C[82] || CT.C82});
        }
        return child;
      } else {
        if (this.widget.settings[_segmentPaintingStyle$] == legend$.TreemapLegendPaintingStyle.solid) {
          return new legend$._SolidBarLegend.new({dataSource: this.widget.dataSource, settings: this.widget.settings, textStyle: this[_textStyle], $creationLocationd_0dea112b090073317d4: C[86] || CT.C86});
        } else {
          return new legend$._GradientBarLegend.new({dataSource: this.widget.dataSource, settings: this.widget.settings, textStyle: this[_textStyle], $creationLocationd_0dea112b090073317d4: C[91] || CT.C91});
        }
      }
    }
    [_getLegendItems]() {
      let t6;
      let legendItems = T.JSArrayOfWidget().of([]);
      if (this.widget.dataSource != null && dart.dtest(dart.dload(this.widget.dataSource, 'isNotEmpty'))) {
        if (core.List.is(this.widget.dataSource)) {
          let length = core.int.as(dart.dload(this.widget.dataSource, 'length'));
          for (let i = 0; i < dart.notNull(length); i = i + 1) {
            let colorMapper = treemap.TreemapColorMapper.as(dart.dsend(this.widget.dataSource, '_get', [i]));
            let text = colorMapper.from != null ? (t6 = colorMapper.name, t6 == null ? dart.str(colorMapper.from) + " - " + dart.str(colorMapper.to) : t6) : dart.nullCheck(colorMapper.value);
            legendItems[$add](this[_getLegendItem](text, colorMapper.color));
          }
        } else {
          dart.dsend(this.widget.dataSource, 'forEach', [dart.fn((key, treeModel) => {
              if (key == null) dart.nullFailed(I[2], 1631, 43, "key");
              if (treeModel == null) dart.nullFailed(I[2], 1631, 60, "treeModel");
              legendItems[$add](this[_getLegendItem](treeModel.group, treeModel.color));
            }, T.StringAndTreemapTileToNull())]);
        }
      }
      return legendItems;
    }
    [_getLegendItem](text, color) {
      if (text == null) dart.nullFailed(I[2], 1644, 32, "text");
      return new legend$._LegendItem.new({text: text, iconShapeColor: color, settings: this.widget.settings, textStyle: this[_textStyle], $creationLocationd_0dea112b090073317d4: C[96] || CT.C96});
    }
  };
  (legend$._LegendWidgetState.new = function() {
    this[___LegendWidgetState__textStyle] = null;
    legend$._LegendWidgetState.__proto__.new.call(this);
    ;
  }).prototype = legend$._LegendWidgetState.prototype;
  dart.addTypeTests(legend$._LegendWidgetState);
  dart.addTypeCaches(legend$._LegendWidgetState);
  dart.setMethodSignature(legend$._LegendWidgetState, () => ({
    __proto__: dart.getMethods(legend$._LegendWidgetState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getScrollableWidget]: dart.fnType(framework.Widget, []),
    [_getLegendItems]: dart.fnType(core.List$(framework.Widget), []),
    [_getLegendItem]: dart.fnType(framework.Widget, [core.String, dart.nullable(ui.Color)])
  }));
  dart.setGetterSignature(legend$._LegendWidgetState, () => ({
    __proto__: dart.getGetters(legend$._LegendWidgetState.__proto__),
    [_textStyle]: text_style.TextStyle,
    actualChild: framework.Widget
  }));
  dart.setSetterSignature(legend$._LegendWidgetState, () => ({
    __proto__: dart.getSetters(legend$._LegendWidgetState.__proto__),
    [_textStyle]: text_style.TextStyle
  }));
  dart.setLibraryUri(legend$._LegendWidgetState, I[3]);
  dart.setFieldSignature(legend$._LegendWidgetState, () => ({
    __proto__: dart.getFields(legend$._LegendWidgetState.__proto__),
    [___LegendWidgetState__textStyle]: dart.fieldType(dart.nullable(text_style.TextStyle))
  }));
  var text$0 = dart.privateName(legend$, "_LegendItem.text");
  var iconShapeColor$ = dart.privateName(legend$, "_LegendItem.iconShapeColor");
  var settings$2 = dart.privateName(legend$, "_LegendItem.settings");
  var textStyle$0 = dart.privateName(legend$, "_LegendItem.textStyle");
  legend$._LegendItem = class _LegendItem extends framework.LeafRenderObjectWidget {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get iconShapeColor() {
      return this[iconShapeColor$];
    }
    set iconShapeColor(value) {
      super.iconShapeColor = value;
    }
    get settings() {
      return this[settings$2];
    }
    set settings(value) {
      super.settings = value;
    }
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 1667, 48, "context");
      return new legend$._RenderLegendItem.new({text: this.text, iconShapeColor: this.iconShapeColor, settings: this.settings, textStyle: this.textStyle, mediaQueryData: media_query.MediaQuery.of(context)});
    }
    updateRenderObject(context, renderObject) {
      let t6;
      if (context == null) dart.nullFailed(I[2], 1679, 20, "context");
      legend$._RenderLegendItem.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 1679, 47, "renderObject");
      t6 = renderObject;
      (() => {
        t6.text = this.text;
        t6.iconShapeColor = this.iconShapeColor;
        t6.settings = this.settings;
        t6.textStyle = this.textStyle;
        t6.mediaQueryData = media_query.MediaQuery.of(context);
        return t6;
      })();
    }
  };
  (legend$._LegendItem.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    if (text == null) dart.nullFailed(I[2], 1655, 19, "text");
    let iconShapeColor = opts && 'iconShapeColor' in opts ? opts.iconShapeColor : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[2], 1657, 19, "settings");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    if (textStyle == null) dart.nullFailed(I[2], 1658, 19, "textStyle");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[text$0] = text;
    this[iconShapeColor$] = iconShapeColor;
    this[settings$2] = settings;
    this[textStyle$0] = textStyle;
    legend$._LegendItem.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = legend$._LegendItem.prototype;
  dart.addTypeTests(legend$._LegendItem);
  dart.addTypeCaches(legend$._LegendItem);
  dart.setMethodSignature(legend$._LegendItem, () => ({
    __proto__: dart.getMethods(legend$._LegendItem.__proto__),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(legend$._LegendItem, I[3]);
  dart.setFieldSignature(legend$._LegendItem, () => ({
    __proto__: dart.getFields(legend$._LegendItem.__proto__),
    text: dart.finalFieldType(core.String),
    iconShapeColor: dart.finalFieldType(dart.nullable(ui.Color)),
    settings: dart.finalFieldType(legend$.TreemapLegend),
    textStyle: dart.finalFieldType(text_style.TextStyle)
  }));
  var _spacing = dart.privateName(legend$, "_spacing");
  var _iconShape = dart.privateName(legend$, "_iconShape");
  var ___RenderLegendItem__textPainter = dart.privateName(legend$, "_#_RenderLegendItem#_textPainter");
  var _text = dart.privateName(legend$, "_text");
  var _iconShapeColor = dart.privateName(legend$, "_iconShapeColor");
  var _settings$ = dart.privateName(legend$, "_settings");
  var _mediaQueryData$ = dart.privateName(legend$, "_mediaQueryData");
  var _textPainter = dart.privateName(legend$, "_textPainter");
  var _updateTextPainter = dart.privateName(legend$, "_updateTextPainter");
  legend$._RenderLegendItem = class _RenderLegendItem extends box.RenderBox {
    get [_textPainter]() {
      let t6;
      t6 = this[___RenderLegendItem__textPainter];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_textPainter")) : t6;
    }
    set [_textPainter](t6) {
      if (t6 == null) dart.nullFailed(I[2], 1707, 20, "null");
      this[___RenderLegendItem__textPainter] = t6;
    }
    get text() {
      return this[_text];
    }
    set text(value) {
      if (value == null) dart.nullFailed(I[2], 1711, 19, "value");
      if (this[_text] == value) {
        return;
      }
      this[_text] = value;
      this[_updateTextPainter]();
      this.markNeedsLayout();
    }
    get iconShapeColor() {
      return this[_iconShapeColor];
    }
    set iconShapeColor(value) {
      if (dart.equals(this[_iconShapeColor], value)) {
        return;
      }
      this[_iconShapeColor] = value;
      this.markNeedsPaint();
    }
    get settings() {
      return this[_settings$];
    }
    set settings(value) {
      if (value == null) dart.nullFailed(I[2], 1732, 30, "value");
      if (dart.equals(this[_settings$], value)) {
        return;
      }
      this[_settings$] = value;
      this[_updateTextPainter]();
      this.markNeedsLayout();
    }
    get mediaQueryData() {
      return this[_mediaQueryData$];
    }
    set mediaQueryData(value) {
      if (value == null) dart.nullFailed(I[2], 1743, 37, "value");
      if (dart.equals(this[_mediaQueryData$], value)) {
        return;
      }
      this[_mediaQueryData$] = value;
      this[_updateTextPainter]();
      this.markNeedsLayout();
    }
    get textStyle() {
      return this[_textStyle];
    }
    set textStyle(value) {
      if (value == null) dart.nullFailed(I[2], 1754, 27, "value");
      if (dart.equals(this[_textStyle], value)) {
        return;
      }
      this[_textStyle] = value;
      this.markNeedsLayout();
    }
    [_updateTextPainter]() {
      this[_textPainter].textScaleFactor = this[_mediaQueryData$].textScaleFactor;
      this[_textPainter].text = new text_span.TextSpan.new({text: this[_text], style: this.textStyle});
      this[_textPainter].layout();
    }
    performLayout() {
      let width = dart.notNull(dart.nullCheck(this[_settings$][_iconSize$]).width) + dart.notNull(this[_spacing]) + dart.notNull(this[_textPainter].width);
      let height = math.max(core.double, dart.nullCheck(this[_settings$][_iconSize$]).height, this[_textPainter].height) + dart.notNull(this[_spacing]);
      this.size = new ui.Size.new(width, height);
    }
    paint(context, offset) {
      let t7;
      if (context == null) dart.nullFailed(I[2], 1778, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 1778, 46, "offset");
      let iconColor = null;
      let actualOffset = null;
      iconColor = this[_iconShapeColor];
      let halfIconSize = this[_iconShape].getPreferredSize(dart.nullCheck(this[_settings$][_iconSize$]))['/'](2.0);
      actualOffset = offset['+'](new ui.Offset.new(0.0, (dart.notNull(this.size.height) - dart.notNull(halfIconSize.height) * 2) / 2));
      this[_iconShape].paint(context, actualOffset, {parentBox: this, iconSize: dart.nullCheck(this[_settings$][_iconSize$]), color: (t7 = iconColor, t7 == null ? colors.Colors.transparent : t7), iconType: dart.nullCheck(this[_settings$][_iconType$])});
      this[_textPainter].text = new text_span.TextSpan.new({style: this.textStyle.copyWith({color: this.textStyle.color}), text: this[_text]});
      this[_textPainter].layout();
      actualOffset = offset['+'](new ui.Offset.new(dart.notNull(dart.nullCheck(this[_settings$][_iconSize$]).width) + dart.notNull(this[_spacing]), (dart.notNull(this.size.height) - dart.notNull(this[_textPainter].height)) / 2));
      this[_textPainter].paint(context.canvas, actualOffset);
    }
  };
  (legend$._RenderLegendItem.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    if (text == null) dart.nullFailed(I[2], 1691, 21, "text");
    let iconShapeColor = opts && 'iconShapeColor' in opts ? opts.iconShapeColor : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[2], 1693, 28, "settings");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    if (textStyle == null) dart.nullFailed(I[2], 1694, 24, "textStyle");
    let mediaQueryData = opts && 'mediaQueryData' in opts ? opts.mediaQueryData : null;
    if (mediaQueryData == null) dart.nullFailed(I[2], 1695, 29, "mediaQueryData");
    this[_spacing] = 3;
    this[_iconShape] = C[102] || CT.C102;
    this[___RenderLegendItem__textPainter] = null;
    this[_text] = text;
    this[_iconShapeColor] = iconShapeColor;
    this[_settings$] = settings;
    this[_textStyle] = textStyle;
    this[_mediaQueryData$] = mediaQueryData;
    legend$._RenderLegendItem.__proto__.new.call(this);
    this[_textPainter] = new text_painter.TextPainter.new({textDirection: ui.TextDirection.ltr});
    this[_updateTextPainter]();
  }).prototype = legend$._RenderLegendItem.prototype;
  dart.addTypeTests(legend$._RenderLegendItem);
  dart.addTypeCaches(legend$._RenderLegendItem);
  dart.setMethodSignature(legend$._RenderLegendItem, () => ({
    __proto__: dart.getMethods(legend$._RenderLegendItem.__proto__),
    [_updateTextPainter]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(legend$._RenderLegendItem, () => ({
    __proto__: dart.getGetters(legend$._RenderLegendItem.__proto__),
    [_textPainter]: text_painter.TextPainter,
    text: core.String,
    iconShapeColor: dart.nullable(ui.Color),
    settings: legend$.TreemapLegend,
    mediaQueryData: media_query.MediaQueryData,
    textStyle: text_style.TextStyle
  }));
  dart.setSetterSignature(legend$._RenderLegendItem, () => ({
    __proto__: dart.getSetters(legend$._RenderLegendItem.__proto__),
    [_textPainter]: text_painter.TextPainter,
    text: core.String,
    iconShapeColor: dart.nullable(ui.Color),
    settings: legend$.TreemapLegend,
    mediaQueryData: media_query.MediaQueryData,
    textStyle: text_style.TextStyle
  }));
  dart.setLibraryUri(legend$._RenderLegendItem, I[3]);
  dart.setFieldSignature(legend$._RenderLegendItem, () => ({
    __proto__: dart.getFields(legend$._RenderLegendItem.__proto__),
    [_spacing]: dart.finalFieldType(core.int),
    [_iconShape]: dart.finalFieldType(legend$._TreemapIconShape),
    [___RenderLegendItem__textPainter]: dart.fieldType(dart.nullable(text_painter.TextPainter)),
    [_text]: dart.fieldType(core.String),
    [_iconShapeColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_settings$]: dart.fieldType(legend$.TreemapLegend),
    [_mediaQueryData$]: dart.fieldType(media_query.MediaQueryData),
    [_textStyle]: dart.fieldType(text_style.TextStyle)
  }));
  var dataSource$0 = dart.privateName(legend$, "_SolidBarLegend.dataSource");
  var settings$3 = dart.privateName(legend$, "_SolidBarLegend.settings");
  var textStyle$1 = dart.privateName(legend$, "_SolidBarLegend.textStyle");
  legend$._SolidBarLegend = class _SolidBarLegend extends framework.StatefulWidget {
    get dataSource() {
      return this[dataSource$0];
    }
    set dataSource(value) {
      super.dataSource = value;
    }
    get settings() {
      return this[settings$3];
    }
    set settings(value) {
      super.settings = value;
    }
    get textStyle() {
      return this[textStyle$1];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    createState() {
      return new legend$._SolidBarLegendState.new();
    }
  };
  (legend$._SolidBarLegend.new = function(opts) {
    let dataSource = opts && 'dataSource' in opts ? opts.dataSource : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[2], 1805, 21, "settings");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    if (textStyle == null) dart.nullFailed(I[2], 1806, 21, "textStyle");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataSource$0] = dataSource;
    this[settings$3] = settings;
    this[textStyle$1] = textStyle;
    legend$._SolidBarLegend.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = legend$._SolidBarLegend.prototype;
  dart.addTypeTests(legend$._SolidBarLegend);
  dart.addTypeCaches(legend$._SolidBarLegend);
  dart.setMethodSignature(legend$._SolidBarLegend, () => ({
    __proto__: dart.getMethods(legend$._SolidBarLegend.__proto__),
    createState: dart.fnType(legend$._SolidBarLegendState, [])
  }));
  dart.setLibraryUri(legend$._SolidBarLegend, I[3]);
  dart.setFieldSignature(legend$._SolidBarLegend, () => ({
    __proto__: dart.getFields(legend$._SolidBarLegend.__proto__),
    dataSource: dart.finalFieldType(dart.dynamic),
    settings: dart.finalFieldType(legend$.TreemapLegend),
    textStyle: dart.finalFieldType(text_style.TextStyle)
  }));
  var ___SolidBarLegendState__direction = dart.privateName(legend$, "_#_SolidBarLegendState#_direction");
  var ___SolidBarLegendState__textDirection = dart.privateName(legend$, "_#_SolidBarLegendState#_textDirection");
  var ___SolidBarLegendState__textPainter = dart.privateName(legend$, "_#_SolidBarLegendState#_textPainter");
  var _isOverlapSegmentText = dart.privateName(legend$, "_isOverlapSegmentText");
  var ___SolidBarLegendState__segmentSize = dart.privateName(legend$, "_#_SolidBarLegendState#_segmentSize");
  var _direction = dart.privateName(legend$, "_direction");
  var _textDirection$ = dart.privateName(legend$, "_textDirection");
  var _getBarSegments = dart.privateName(legend$, "_getBarSegments");
  var _getSegmentsForColorMapper = dart.privateName(legend$, "_getSegmentsForColorMapper");
  var _getSegmentsForShapeSource = dart.privateName(legend$, "_getSegmentsForShapeSource");
  var _getText = dart.privateName(legend$, "_getText");
  var _getTrimmedText = dart.privateName(legend$, "_getTrimmedText");
  var _getStartSegmentLabel = dart.privateName(legend$, "_getStartSegmentLabel");
  var _getTextWidth = dart.privateName(legend$, "_getTextWidth");
  var _getSegment = dart.privateName(legend$, "_getSegment");
  var _getBarWithLabel = dart.privateName(legend$, "_getBarWithLabel");
  var _getTextOffset = dart.privateName(legend$, "_getTextOffset");
  var _getCrossAxisAlignment = dart.privateName(legend$, "_getCrossAxisAlignment");
  var _getTextWidget = dart.privateName(legend$, "_getTextWidget");
  var _getVerticalBar = dart.privateName(legend$, "_getVerticalBar");
  var _getStartSegmentText = dart.privateName(legend$, "_getStartSegmentText");
  var _getAlignedTextWidget = dart.privateName(legend$, "_getAlignedTextWidget");
  var _getStartTextOffset = dart.privateName(legend$, "_getStartTextOffset");
  var _getHorizontalTextOffset = dart.privateName(legend$, "_getHorizontalTextOffset");
  var _getVerticalTextOffset = dart.privateName(legend$, "_getVerticalTextOffset");
  legend$._SolidBarLegendState = class _SolidBarLegendState extends framework.State$(legend$._SolidBarLegend) {
    get [_direction]() {
      let t7;
      t7 = this[___SolidBarLegendState__direction];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("_direction")) : t7;
    }
    set [_direction](t7) {
      if (t7 == null) dart.nullFailed(I[2], 1817, 13, "null");
      this[___SolidBarLegendState__direction] = t7;
    }
    get [_textDirection$]() {
      let t8;
      t8 = this[___SolidBarLegendState__textDirection];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_textDirection")) : t8;
    }
    set [_textDirection$](t8) {
      if (t8 == null) dart.nullFailed(I[2], 1818, 22, "null");
      this[___SolidBarLegendState__textDirection] = t8;
    }
    get [_textPainter]() {
      let t9;
      t9 = this[___SolidBarLegendState__textPainter];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_textPainter")) : t9;
    }
    set [_textPainter](t9) {
      if (t9 == null) dart.nullFailed(I[2], 1820, 20, "null");
      this[___SolidBarLegendState__textPainter] = t9;
    }
    get [_segmentSize$]() {
      let t10;
      t10 = this[___SolidBarLegendState__segmentSize];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_segmentSize")) : t10;
    }
    set [_segmentSize$](t10) {
      if (t10 == null) dart.nullFailed(I[2], 1822, 13, "null");
      this[___SolidBarLegendState__segmentSize] = t10;
    }
    initState() {
      this[_textPainter] = new text_painter.TextPainter.new({textDirection: ui.TextDirection.ltr});
      super.initState();
    }
    build(context) {
      let t11, t11$;
      if (context == null) dart.nullFailed(I[2], 1831, 29, "context");
      this[_segmentSize$] = (t11 = this.widget.settings[_segmentSize$], t11 == null ? C[103] || CT.C103 : t11);
      this[_labelsPlacement$] = this.widget.settings[_labelsPlacement$];
      let textDirection = basic.Directionality.of(context);
      this[_direction] = (t11$ = this.widget.settings.direction, t11$ == null ? this.widget.settings.position == legend$.TreemapLegendPosition.top || this.widget.settings.position == legend$.TreemapLegendPosition.bottom ? basic_types.Axis.horizontal : basic_types.Axis.vertical : t11$);
      this[_textDirection$] = textDirection == ui.TextDirection.ltr ? textDirection : this[_direction] == basic_types.Axis.vertical ? ui.TextDirection.ltr : textDirection;
      this[_textPainter].textScaleFactor = media_query.MediaQuery.of(context).textScaleFactor;
      let child = new basic.Directionality.new({textDirection: this[_textDirection$], child: new basic.Wrap.new({direction: this[_direction], spacing: this.widget.settings.spacing, children: this[_getBarSegments](), runSpacing: 6.0, runAlignment: wrap.WrapAlignment.center, alignment: wrap.WrapAlignment.start, $creationLocationd_0dea112b090073317d4: C[104] || CT.C104}), $creationLocationd_0dea112b090073317d4: C[112] || CT.C112});
      if (this.widget.settings.padding != null) {
        return new basic.Padding.new({padding: dart.nullCheck(this.widget.settings.padding), child: child, $creationLocationd_0dea112b090073317d4: C[116] || CT.C116});
      }
      return child;
    }
    [_getBarSegments]() {
      let t11;
      if (this.widget.dataSource != null && dart.dtest(dart.dload(this.widget.dataSource, 'isNotEmpty'))) {
        if (core.List.is(this.widget.dataSource)) {
          return this[_getSegmentsForColorMapper]();
        } else {
          this[_labelsPlacement$] = (t11 = this.widget.settings[_labelsPlacement$], t11 == null ? legend$.TreemapLegendLabelsPlacement.onItem : t11);
          return this[_getSegmentsForShapeSource]();
        }
      }
      return T.JSArrayOfWidget().of([]);
    }
    [_getSegmentsForColorMapper]() {
      let t11;
      let legendItems = T.JSArrayOfWidget().of([]);
      let length = core.int.as(dart.dload(this.widget.dataSource, 'length'));
      let currentText = null;
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        this[_isOverlapSegmentText] = false;
        let colorMapper = treemap.TreemapColorMapper.as(dart.dsend(this.widget.dataSource, '_get', [i]));
        this[_labelsPlacement$] = (t11 = this[_labelsPlacement$], t11 == null ? colorMapper.from != null ? legend$.TreemapLegendLabelsPlacement.betweenItems : legend$.TreemapLegendLabelsPlacement.onItem : t11);
        if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
          if (i === dart.notNull(length) - 1) {
            currentText = this[_getTrimmedText](this[_getText](treemap.TreemapColorMapper.as(dart.dsend(this.widget.dataSource, '_get', [i]))), currentText, i, length);
          } else {
            if (i === 0) {
              let firstSegmentLabels = this[_getStartSegmentLabel](colorMapper);
              currentText = dart.notNull(firstSegmentLabels[$length]) > 1 ? firstSegmentLabels[$_get](1) : firstSegmentLabels[$_get](0);
            } else {
              currentText = this[_getText](colorMapper);
            }
            currentText = this[_getTrimmedText](currentText, this[_getText](treemap.TreemapColorMapper.as(dart.dsend(this.widget.dataSource, '_get', [i + 1]))), i, length);
          }
        } else {
          currentText = this[_getText](colorMapper);
          if (this[_direction] == basic_types.Axis.horizontal && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem) {
            this[_isOverlapSegmentText] = dart.notNull(this[_getTextWidth](currentText)) > dart.notNull(this[_segmentSize$].width);
          }
        }
        legendItems[$add](this[_getSegment](currentText, colorMapper.color, i, length, colorMapper));
      }
      return legendItems;
    }
    [_getSegmentsForShapeSource]() {
      let barSegments = T.JSArrayOfWidget().of([]);
      let length = core.int.as(dart.dload(this.widget.dataSource, 'length'));
      let currentIterator = T.IteratorOfTreemapTile().as(dart.dload(dart.dload(this.widget.dataSource, 'values'), 'iterator'));
      let nextIterator = T.IteratorOfTreemapTile().as(dart.dload(dart.dload(this.widget.dataSource, 'values'), 'iterator'));
      let text = null;
      nextIterator.moveNext();
      while (dart.test(currentIterator.moveNext())) {
        let treemapModel = currentIterator.current;
        if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
          if (dart.test(nextIterator.moveNext())) {
            text = this[_getTrimmedText](treemapModel.group, nextIterator.current.group, 0, length);
          } else {
            text = this[_getTrimmedText](currentIterator.current.group, text, 0, length);
          }
        } else if (this[_direction] == basic_types.Axis.horizontal && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem) {
          text = treemapModel.group;
          this[_isOverlapSegmentText] = dart.notNull(this[_getTextWidth](text)) > dart.notNull(this[_segmentSize$].width);
        }
        barSegments[$add](this[_getSegment](dart.nullCheck(text), treemapModel.color, 0, length));
      }
      return barSegments;
    }
    [_getTrimmedText](currentText, nextText, index, length) {
      if (currentText == null) dart.nullFailed(I[2], 1960, 14, "currentText");
      if (index == null) dart.nullFailed(I[2], 1960, 49, "index");
      if (length == null) dart.nullFailed(I[2], 1960, 60, "length");
      if (this.widget.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.visible || currentText[$isEmpty] || nextText != null && nextText[$isEmpty] || nextText == null) {
        return currentText;
      }
      let barSize = this[_segmentSize$];
      let refCurrentTextWidth = null;
      let refNextTextWidth = null;
      if (this[_direction] == basic_types.Axis.horizontal && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        let isLastInsideItem = false;
        if (index === dart.notNull(length) - 1) {
          isLastInsideItem = this.widget.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside;
          refNextTextWidth = dart.notNull(this[_getTextWidth](nextText)) / 2;
          refCurrentTextWidth = isLastInsideItem ? this[_getTextWidth](currentText) : dart.notNull(this[_getTextWidth](currentText)) / 2;
        } else {
          refCurrentTextWidth = dart.notNull(this[_getTextWidth](currentText)) / 2;
          refNextTextWidth = dart.notNull(index) + 1 === dart.notNull(length) - 1 && this.widget.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside ? this[_getTextWidth](nextText) : dart.notNull(this[_getTextWidth](nextText)) / 2;
        }
        this[_isOverlapSegmentText] = dart.notNull(refCurrentTextWidth) + dart.notNull(refNextTextWidth) > dart.notNull(barSize.width) + dart.notNull(this.widget.settings.spacing);
        if (this.widget.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.ellipsis) {
          let textWidth = dart.notNull(refCurrentTextWidth) + dart.notNull(refNextTextWidth);
          return legend$._getTrimText(currentText, this.widget.textStyle, dart.notNull(this[_segmentSize$].width) + dart.notNull(this.widget.settings.spacing) / 2, this[_textPainter], textWidth, refNextTextWidth, isLastInsideItem);
        }
      }
      return currentText;
    }
    [_getText](colorMapper) {
      let t11;
      if (colorMapper == null) dart.nullFailed(I[2], 2007, 38, "colorMapper");
      return colorMapper.from != null ? (t11 = colorMapper.name, t11 == null ? this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems ? dart.toString(colorMapper.to) : this[_textDirection$] == ui.TextDirection.ltr ? dart.str(colorMapper.from) + " - " + dart.str(colorMapper.to) : dart.str(colorMapper.to) + " - " + dart.str(colorMapper.from) : t11) : dart.nullCheck(colorMapper.value);
    }
    [_getTextWidth](text) {
      if (text == null) dart.nullFailed(I[2], 2018, 31, "text");
      this[_textPainter].text = new text_span.TextSpan.new({text: text, style: this.widget.textStyle});
      this[_textPainter].layout();
      return this[_textPainter].width;
    }
    [_getSegment](text, color, index, length, colorMapper = null) {
      if (text == null) dart.nullFailed(I[2], 2025, 29, "text");
      if (color == null) dart.nullFailed(I[2], 2025, 41, "color");
      if (index == null) dart.nullFailed(I[2], 2025, 52, "index");
      if (length == null) dart.nullFailed(I[2], 2025, 63, "length");
      let iconColor = color;
      return this[_getBarWithLabel](iconColor, index, text, colorMapper, length);
    }
    [_getBarWithLabel](iconColor, index, text, colorMapper, dataSourceLength) {
      if (iconColor == null) dart.nullFailed(I[2], 2031, 33, "iconColor");
      if (index == null) dart.nullFailed(I[2], 2031, 48, "index");
      if (text == null) dart.nullFailed(I[2], 2031, 62, "text");
      if (dataSourceLength == null) dart.nullFailed(I[2], 2032, 44, "dataSourceLength");
      let textOffset = this[_getTextOffset](index, text, dataSourceLength);
      let crossAxisAlignment = this[_getCrossAxisAlignment](index, dataSourceLength);
      if (this[_direction] == basic_types.Axis.horizontal) {
        textOffset = this[_textDirection$] == ui.TextDirection.rtl ? textOffset._negate() : textOffset;
        return new container.Container.new({width: this[_segmentSize$].width, child: new basic.Column.new({crossAxisAlignment: crossAxisAlignment, children: T.JSArrayOfWidget().of([new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({bottom: 7.0}), child: new container.Container.new({height: this[_segmentSize$].height, color: iconColor, $creationLocationd_0dea112b090073317d4: C[120] || CT.C120}), $creationLocationd_0dea112b090073317d4: C[124] || CT.C124}), this[_getTextWidget](index, text, colorMapper, textOffset)]), $creationLocationd_0dea112b090073317d4: C[128] || CT.C128}), $creationLocationd_0dea112b090073317d4: C[132] || CT.C132});
      } else {
        return this[_getVerticalBar](crossAxisAlignment, iconColor, index, text, colorMapper, textOffset);
      }
    }
    [_getVerticalBar](crossAxisAlignment, iconColor, index, text, colorMapper, textOffset) {
      if (crossAxisAlignment == null) dart.nullFailed(I[2], 2063, 26, "crossAxisAlignment");
      if (iconColor == null) dart.nullFailed(I[2], 2064, 13, "iconColor");
      if (index == null) dart.nullFailed(I[2], 2065, 11, "index");
      if (text == null) dart.nullFailed(I[2], 2066, 14, "text");
      if (textOffset == null) dart.nullFailed(I[2], 2068, 14, "textOffset");
      return new container.Container.new({height: this[_segmentSize$].width, child: new basic.Row.new({crossAxisAlignment: crossAxisAlignment, children: T.JSArrayOfWidget().of([new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({right: 7.0}), child: new container.Container.new({width: this[_segmentSize$].height, color: iconColor, $creationLocationd_0dea112b090073317d4: C[136] || CT.C136}), $creationLocationd_0dea112b090073317d4: C[140] || CT.C140}), this[_getTextWidget](index, text, colorMapper, textOffset)]), $creationLocationd_0dea112b090073317d4: C[144] || CT.C144}), $creationLocationd_0dea112b090073317d4: C[148] || CT.C148});
    }
    [_getCrossAxisAlignment](index, length) {
      if (index == null) dart.nullFailed(I[2], 2088, 49, "index");
      if (length == null) dart.nullFailed(I[2], 2088, 60, "length");
      if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem && this.widget.settings[_labelOverflow$] != legend$.TreemapLabelOverflow.visible) {
        return flex.CrossAxisAlignment.center;
      } else {
        return flex.CrossAxisAlignment.start;
      }
    }
    [_getTextWidget](index, text, colorMapper, legendOffset) {
      if (index == null) dart.nullFailed(I[2], 2097, 29, "index");
      if (text == null) dart.nullFailed(I[2], 2097, 43, "text");
      if (legendOffset == null) dart.nullFailed(I[2], 2098, 14, "legendOffset");
      if (index === 0 && colorMapper != null && colorMapper.from != null && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        return this[_getStartSegmentText](colorMapper, text, legendOffset);
      } else {
        return this[_getAlignedTextWidget](legendOffset, text, this[_isOverlapSegmentText]);
      }
    }
    [_getStartSegmentText](colorMapper, text, legendOffset) {
      if (colorMapper == null) dart.nullFailed(I[2], 2110, 26, "colorMapper");
      if (text == null) dart.nullFailed(I[2], 2110, 46, "text");
      if (legendOffset == null) dart.nullFailed(I[2], 2110, 59, "legendOffset");
      let isStartTextOverlapping = false;
      let startText = null;
      let firstSegmentLabels = this[_getStartSegmentLabel](colorMapper);
      if (dart.notNull(firstSegmentLabels[$length]) > 1) {
        startText = firstSegmentLabels[$_get](0);
      } else {
        startText = dart.nullCheck(colorMapper.from)[$toString]();
      }
      if (this[_direction] == basic_types.Axis.horizontal && this.widget.settings[_labelOverflow$] != legend$.TreemapLabelOverflow.visible && startText[$isNotEmpty] && text[$isNotEmpty]) {
        let refStartTextWidth = this.widget.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside ? this[_getTextWidth](startText) : dart.notNull(this[_getTextWidth](startText)) / 2;
        let refCurrentTextWidth = dart.notNull(this[_getTextWidth](text)) / 2;
        isStartTextOverlapping = dart.notNull(refStartTextWidth) + refCurrentTextWidth > dart.notNull(this[_segmentSize$].width) + dart.notNull(this.widget.settings.spacing);
        if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems && this.widget.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.ellipsis) {
          startText = legend$._getTrimText(startText, this.widget.textStyle, dart.notNull(this[_segmentSize$].width) + dart.notNull(this.widget.settings.spacing) / 2, this[_textPainter], dart.notNull(refStartTextWidth) + refCurrentTextWidth, refCurrentTextWidth);
        }
      }
      let startTextOffset = this[_getStartTextOffset](startText);
      startTextOffset = this[_textDirection$] == ui.TextDirection.rtl && this[_direction] == basic_types.Axis.horizontal ? startTextOffset._negate() : startTextOffset;
      return new basic.Stack.new({children: T.JSArrayOfWidget().of([this[_getAlignedTextWidget](startTextOffset, startText, isStartTextOverlapping), this[_getAlignedTextWidget](legendOffset, text, this[_isOverlapSegmentText])]), $creationLocationd_0dea112b090073317d4: C[152] || CT.C152});
    }
    [_getStartSegmentLabel](colorMapper) {
      if (colorMapper == null) dart.nullFailed(I[2], 2157, 57, "colorMapper");
      if (colorMapper.from != null && colorMapper.name != null && dart.nullCheck(colorMapper.name)[$isNotEmpty] && dart.nullCheck(colorMapper.name)[$_get](0) === "{" && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        let splitText = dart.nullCheck(colorMapper.name)[$split]("},{");
        if (dart.notNull(splitText[$length]) > 1) {
          splitText[$_set](0, splitText[$_get](0)[$replaceAll]("{", ""));
          splitText[$_set](1, splitText[$_get](1)[$replaceAll]("}", ""));
        }
        return splitText;
      } else {
        return T.JSArrayOfString().of([this[_getText](colorMapper)]);
      }
    }
    [_getAlignedTextWidget](offset, text, isOverlapping) {
      if (offset == null) dart.nullFailed(I[2], 2175, 39, "offset");
      if (text == null) dart.nullFailed(I[2], 2175, 54, "text");
      if (isOverlapping == null) dart.nullFailed(I[2], 2175, 65, "isOverlapping");
      if (this.widget.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.hide && dart.test(isOverlapping) || text[$isEmpty]) {
        return new basic.SizedBox.new({width: 0.0, height: 0.0, $creationLocationd_0dea112b090073317d4: C[155] || CT.C155});
      }
      return new basic.Directionality.new({textDirection: ui.TextDirection.ltr, child: !dart.equals(offset, ui.Offset.zero) ? new basic.Transform.translate({offset: offset, child: new text$.Text.new(text, {softWrap: false, overflow: paragraph.TextOverflow.visible, style: this.widget.textStyle, $creationLocationd_0dea112b090073317d4: C[159] || CT.C159}), $creationLocationd_0dea112b090073317d4: C[165] || CT.C165}) : new text$.Text.new(text, {textAlign: ui.TextAlign.center, softWrap: false, overflow: this.widget.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.ellipsis && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem ? paragraph.TextOverflow.ellipsis : paragraph.TextOverflow.visible, style: this.widget.textStyle, $creationLocationd_0dea112b090073317d4: C[169] || CT.C169}), $creationLocationd_0dea112b090073317d4: C[176] || CT.C176});
    }
    [_getTextOffset](index, text, dataSourceLength) {
      if (index == null) dart.nullFailed(I[2], 2208, 29, "index");
      if (text == null) dart.nullFailed(I[2], 2208, 43, "text");
      if (dataSourceLength == null) dart.nullFailed(I[2], 2208, 53, "dataSourceLength");
      if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem && this.widget.settings[_labelOverflow$] != legend$.TreemapLabelOverflow.visible) {
        return ui.Offset.zero;
      }
      if (this[_direction] == basic_types.Axis.horizontal) {
        return this[_getHorizontalTextOffset](index, text, dataSourceLength);
      } else {
        return this[_getVerticalTextOffset](index, text, dataSourceLength);
      }
    }
    [_getVerticalTextOffset](index, text, dataSourceLength) {
      if (index == null) dart.nullFailed(I[2], 2221, 37, "index");
      if (text == null) dart.nullFailed(I[2], 2221, 51, "text");
      if (dataSourceLength == null) dart.nullFailed(I[2], 2221, 61, "dataSourceLength");
      this[_textPainter].text = new text_span.TextSpan.new({text: text, style: this.widget.textStyle});
      this[_textPainter].layout();
      if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        if (index === dart.notNull(dataSourceLength) - 1) {
          if (this.widget.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside) {
            return new ui.Offset.new(0.0, dart.notNull(this[_segmentSize$].width) - dart.notNull(this[_textPainter].height));
          }
          return new ui.Offset.new(0.0, dart.notNull(this[_segmentSize$].width) - dart.notNull(this[_textPainter].height) / 2);
        }
        return new ui.Offset.new(0.0, dart.notNull(this[_segmentSize$].width) - dart.notNull(this[_textPainter].height) / 2 + dart.notNull(this.widget.settings.spacing) / 2);
      } else {
        return new ui.Offset.new(0.0, dart.notNull(this[_segmentSize$].width) / 2 - dart.notNull(this[_textPainter].height) / 2);
      }
    }
    [_getHorizontalTextOffset](index, text, dataSourceLength) {
      if (index == null) dart.nullFailed(I[2], 2244, 11, "index");
      if (text == null) dart.nullFailed(I[2], 2244, 25, "text");
      if (dataSourceLength == null) dart.nullFailed(I[2], 2244, 35, "dataSourceLength");
      this[_textPainter].text = new text_span.TextSpan.new({text: text, style: this.widget.textStyle});
      this[_textPainter].layout();
      if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        let width = this[_textDirection$] == ui.TextDirection.rtl && dart.notNull(this[_segmentSize$].width) < dart.notNull(this[_textPainter].width) ? this[_textPainter].width : this[_segmentSize$].width;
        if (index === dart.notNull(dataSourceLength) - 1) {
          if (this.widget.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside) {
            return new ui.Offset.new(dart.notNull(width) - dart.notNull(this[_textPainter].width), 0.0);
          }
          return new ui.Offset.new(dart.notNull(width) - dart.notNull(this[_textPainter].width) / 2, 0.0);
        }
        return new ui.Offset.new(dart.notNull(width) - dart.notNull(this[_textPainter].width) / 2 + dart.notNull(this.widget.settings.spacing) / 2, 0.0);
      } else {
        let xPosition = this[_textDirection$] == ui.TextDirection.rtl && dart.notNull(this[_segmentSize$].width) < dart.notNull(this[_textPainter].width) ? dart.notNull(this[_textPainter].width) / 2 - dart.notNull(this[_segmentSize$].width) / 2 : dart.notNull(this[_segmentSize$].width) / 2 - dart.notNull(this[_textPainter].width) / 2;
        return new ui.Offset.new(xPosition, 0.0);
      }
    }
    [_getStartTextOffset](text) {
      if (text == null) dart.nullFailed(I[2], 2271, 37, "text");
      this[_textPainter].text = new text_span.TextSpan.new({text: text, style: this.widget.textStyle});
      this[_textPainter].layout();
      if (this.widget.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside) {
        return new ui.Offset.new(0.0, 0.0);
      }
      if (this[_direction] == basic_types.Axis.horizontal) {
        return new ui.Offset.new(-dart.notNull(this[_textPainter].width) / 2, 0.0);
      } else {
        return new ui.Offset.new(0.0, -dart.notNull(this[_textPainter].height) / 2);
      }
    }
  };
  (legend$._SolidBarLegendState.new = function() {
    this[___SolidBarLegendState__direction] = null;
    this[___SolidBarLegendState__textDirection] = null;
    this[_labelsPlacement$] = null;
    this[___SolidBarLegendState__textPainter] = null;
    this[_isOverlapSegmentText] = false;
    this[___SolidBarLegendState__segmentSize] = null;
    legend$._SolidBarLegendState.__proto__.new.call(this);
    ;
  }).prototype = legend$._SolidBarLegendState.prototype;
  dart.addTypeTests(legend$._SolidBarLegendState);
  dart.addTypeCaches(legend$._SolidBarLegendState);
  dart.setMethodSignature(legend$._SolidBarLegendState, () => ({
    __proto__: dart.getMethods(legend$._SolidBarLegendState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getBarSegments]: dart.fnType(core.List$(framework.Widget), []),
    [_getSegmentsForColorMapper]: dart.fnType(core.List$(framework.Widget), []),
    [_getSegmentsForShapeSource]: dart.fnType(core.List$(framework.Widget), []),
    [_getTrimmedText]: dart.fnType(core.String, [core.String, dart.nullable(core.String), core.int, core.int]),
    [_getText]: dart.fnType(core.String, [treemap.TreemapColorMapper]),
    [_getTextWidth]: dart.fnType(core.double, [core.String]),
    [_getSegment]: dart.fnType(framework.Widget, [core.String, ui.Color, core.int, core.int], [dart.nullable(treemap.TreemapColorMapper)]),
    [_getBarWithLabel]: dart.fnType(framework.Widget, [ui.Color, core.int, core.String, dart.nullable(treemap.TreemapColorMapper), core.int]),
    [_getVerticalBar]: dart.fnType(framework.Widget, [flex.CrossAxisAlignment, ui.Color, core.int, core.String, dart.nullable(treemap.TreemapColorMapper), ui.Offset]),
    [_getCrossAxisAlignment]: dart.fnType(flex.CrossAxisAlignment, [core.int, core.int]),
    [_getTextWidget]: dart.fnType(framework.Widget, [core.int, core.String, dart.nullable(treemap.TreemapColorMapper), ui.Offset]),
    [_getStartSegmentText]: dart.fnType(framework.Widget, [treemap.TreemapColorMapper, core.String, ui.Offset]),
    [_getStartSegmentLabel]: dart.fnType(core.List$(core.String), [treemap.TreemapColorMapper]),
    [_getAlignedTextWidget]: dart.fnType(framework.Widget, [ui.Offset, core.String, core.bool]),
    [_getTextOffset]: dart.fnType(ui.Offset, [core.int, core.String, core.int]),
    [_getVerticalTextOffset]: dart.fnType(ui.Offset, [core.int, core.String, core.int]),
    [_getHorizontalTextOffset]: dart.fnType(ui.Offset, [core.int, core.String, core.int]),
    [_getStartTextOffset]: dart.fnType(ui.Offset, [core.String])
  }));
  dart.setGetterSignature(legend$._SolidBarLegendState, () => ({
    __proto__: dart.getGetters(legend$._SolidBarLegendState.__proto__),
    [_direction]: basic_types.Axis,
    [_textDirection$]: ui.TextDirection,
    [_textPainter]: text_painter.TextPainter,
    [_segmentSize$]: ui.Size
  }));
  dart.setSetterSignature(legend$._SolidBarLegendState, () => ({
    __proto__: dart.getSetters(legend$._SolidBarLegendState.__proto__),
    [_direction]: basic_types.Axis,
    [_textDirection$]: ui.TextDirection,
    [_textPainter]: text_painter.TextPainter,
    [_segmentSize$]: ui.Size
  }));
  dart.setLibraryUri(legend$._SolidBarLegendState, I[3]);
  dart.setFieldSignature(legend$._SolidBarLegendState, () => ({
    __proto__: dart.getFields(legend$._SolidBarLegendState.__proto__),
    [___SolidBarLegendState__direction]: dart.fieldType(dart.nullable(basic_types.Axis)),
    [___SolidBarLegendState__textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_labelsPlacement$]: dart.fieldType(dart.nullable(legend$.TreemapLegendLabelsPlacement)),
    [___SolidBarLegendState__textPainter]: dart.fieldType(dart.nullable(text_painter.TextPainter)),
    [_isOverlapSegmentText]: dart.fieldType(core.bool),
    [___SolidBarLegendState__segmentSize]: dart.fieldType(dart.nullable(ui.Size))
  }));
  legend$._GradientBarLabel = class _GradientBarLabel extends core.Object {};
  (legend$._GradientBarLabel.new = function(label, offset = C[180] || CT.C180, isOverlapping = false) {
    if (label == null) dart.nullFailed(I[2], 2288, 26, "label");
    if (offset == null) dart.nullFailed(I[2], 2289, 13, "offset");
    if (isOverlapping == null) dart.nullFailed(I[2], 2289, 40, "isOverlapping");
    this.label = label;
    this.offset = offset;
    this.isOverlapping = isOverlapping;
    ;
  }).prototype = legend$._GradientBarLabel.prototype;
  dart.addTypeTests(legend$._GradientBarLabel);
  dart.addTypeCaches(legend$._GradientBarLabel);
  dart.setLibraryUri(legend$._GradientBarLabel, I[3]);
  dart.setFieldSignature(legend$._GradientBarLabel, () => ({
    __proto__: dart.getFields(legend$._GradientBarLabel.__proto__),
    label: dart.fieldType(core.String),
    offset: dart.fieldType(ui.Offset),
    isOverlapping: dart.fieldType(core.bool)
  }));
  var ___GradientBarLegend__direction = dart.privateName(legend$, "_#_GradientBarLegend#_direction");
  var ___GradientBarLegend__segmentSize = dart.privateName(legend$, "_#_GradientBarLegend#_segmentSize");
  var ___GradientBarLegend__textPainter = dart.privateName(legend$, "_#_GradientBarLegend#_textPainter");
  var ___GradientBarLegend__referenceArea = dart.privateName(legend$, "_#_GradientBarLegend#_referenceArea");
  var _isRTL = dart.privateName(legend$, "_isRTL");
  var _referenceArea = dart.privateName(legend$, "_referenceArea");
  var _updateSegmentSize = dart.privateName(legend$, "_updateSegmentSize");
  var _collectLabelsAndColors = dart.privateName(legend$, "_collectLabelsAndColors");
  var _buildGradientBar = dart.privateName(legend$, "_buildGradientBar");
  var _collectColorMapperLabelsAndColors = dart.privateName(legend$, "_collectColorMapperLabelsAndColors");
  var _getActualText = dart.privateName(legend$, "_getActualText");
  var _collectRageColorMapperLabels = dart.privateName(legend$, "_collectRageColorMapperLabels");
  var _getHorizontalOffset = dart.privateName(legend$, "_getHorizontalOffset");
  var _getChildren = dart.privateName(legend$, "_getChildren");
  var _getLabels = dart.privateName(legend$, "_getLabels");
  legend$._GradientBarLegend = class _GradientBarLegend extends framework.StatelessWidget {
    get [_direction]() {
      let t11;
      t11 = this[___GradientBarLegend__direction];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_direction")) : t11;
    }
    set [_direction](t11) {
      if (t11 == null) dart.nullFailed(I[2], 2309, 13, "null");
      this[___GradientBarLegend__direction] = t11;
    }
    get [_segmentSize$]() {
      let t12;
      t12 = this[___GradientBarLegend__segmentSize];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_segmentSize")) : t12;
    }
    set [_segmentSize$](t12) {
      if (t12 == null) dart.nullFailed(I[2], 2310, 13, "null");
      this[___GradientBarLegend__segmentSize] = t12;
    }
    get [_textPainter]() {
      let t13;
      t13 = this[___GradientBarLegend__textPainter];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_textPainter")) : t13;
    }
    set [_textPainter](t13) {
      if (t13 == null) dart.nullFailed(I[2], 2311, 20, "null");
      this[___GradientBarLegend__textPainter] = t13;
    }
    get [_referenceArea]() {
      let t14;
      t14 = this[___GradientBarLegend__referenceArea];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("_referenceArea")) : t14;
    }
    set [_referenceArea](t14) {
      if (t14 == null) dart.nullFailed(I[2], 2312, 15, "null");
      this[___GradientBarLegend__referenceArea] = t14;
    }
    build(context) {
      let t15, t15$;
      if (context == null) dart.nullFailed(I[2], 2318, 29, "context");
      this[_labelsPlacement$] = (t15 = this.settings[_labelsPlacement$], t15 == null ? legend$.TreemapLegendLabelsPlacement.betweenItems : t15);
      let textDirection = basic.Directionality.of(context);
      this[_isRTL] = textDirection == ui.TextDirection.rtl;
      this[_textPainter] = new text_painter.TextPainter.new({textDirection: ui.TextDirection.ltr, textScaleFactor: media_query.MediaQuery.of(context).textScaleFactor});
      this[_direction] = (t15$ = this.settings.direction, t15$ == null ? this.settings.position == legend$.TreemapLegendPosition.top || this.settings.position == legend$.TreemapLegendPosition.bottom ? basic_types.Axis.horizontal : basic_types.Axis.vertical : t15$);
      textDirection = dart.test(this[_isRTL]) ? this[_direction] == basic_types.Axis.vertical ? ui.TextDirection.ltr : textDirection : textDirection;
      let child = new basic.Directionality.new({textDirection: textDirection, child: new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
            if (context == null) dart.nullFailed(I[2], 2338, 34, "context");
            if (constraints == null) dart.nullFailed(I[2], 2338, 58, "constraints");
            let width = dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : 300.0;
            let height = dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : 300.0;
            this[_updateSegmentSize](new ui.Size.new(width, height).shortestSide);
            this[_collectLabelsAndColors]();
            return this[_buildGradientBar]();
          }, T.BuildContextAndBoxConstraintsToWidget()), $creationLocationd_0dea112b090073317d4: C[181] || CT.C181}), $creationLocationd_0dea112b090073317d4: C[184] || CT.C184});
      if (this.settings.padding != null) {
        return new basic.Padding.new({padding: dart.nullCheck(this.settings.padding), child: child, $creationLocationd_0dea112b090073317d4: C[188] || CT.C188});
      }
      return child;
    }
    [_updateSegmentSize](shortestSide) {
      if (shortestSide == null) dart.nullFailed(I[2], 2355, 34, "shortestSide");
      if (this[_direction] == basic_types.Axis.horizontal) {
        let availableWidth = this.settings.padding != null ? dart.notNull(shortestSide) - dart.notNull(dart.nullCheck(this.settings.padding).horizontal) : shortestSide;
        this[_segmentSize$] = this.settings[_segmentSize$] == null ? new ui.Size.new(availableWidth, 12.0) : new ui.Size.new(dart.notNull(dart.nullCheck(this.settings[_segmentSize$]).width) > dart.notNull(availableWidth) ? availableWidth : dart.nullCheck(this.settings[_segmentSize$]).width, dart.nullCheck(this.settings[_segmentSize$]).height);
        return;
      }
      let availableHeight = this.settings.padding != null ? dart.notNull(shortestSide) - dart.notNull(dart.nullCheck(this.settings.padding).vertical) : shortestSide;
      this[_segmentSize$] = this.settings[_segmentSize$] == null ? new ui.Size.new(12.0, availableHeight) : new ui.Size.new(dart.nullCheck(this.settings[_segmentSize$]).width, dart.notNull(dart.nullCheck(this.settings[_segmentSize$]).height) > dart.notNull(availableHeight) ? availableHeight : dart.nullCheck(this.settings[_segmentSize$]).height);
    }
    [_collectLabelsAndColors]() {
      let length = core.int.as(dart.dload(this.dataSource, 'length'));
      this[_referenceArea] = this[_direction] == basic_types.Axis.horizontal ? this[_segmentSize$].width : this[_segmentSize$].height;
      if (this.dataSource != null && dart.dtest(dart.dload(this.dataSource, 'isNotEmpty'))) {
        if (core.List.is(this.dataSource)) {
          this[_collectColorMapperLabelsAndColors](length);
        } else {
          let length = core.int.as(dart.dload(this.dataSource, 'length'));
          let text = null;
          let slab = null;
          let currentIterator = T.IteratorOfTreemapTile().as(dart.dload(dart.dload(this.dataSource, 'values'), 'iterator'));
          let nextIterator = T.IteratorOfTreemapTile().as(dart.dload(dart.dload(this.dataSource, 'values'), 'iterator'));
          let index = 0;
          nextIterator.moveNext();
          while (dart.test(currentIterator.moveNext())) {
            let treemapModel = currentIterator.current;
            let positionIndex = null;
            if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
              slab = dart.notNull(this[_referenceArea]) / (dart.notNull(length) - 1);
              positionIndex = index;
            } else {
              slab = dart.notNull(this[_referenceArea]) / dart.notNull(length);
              positionIndex = index + 1;
            }
            if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
              if (dart.test(nextIterator.moveNext())) {
                text = this[_getTrimmedText](treemapModel.group, positionIndex, length, slab, nextIterator.current.group);
              } else {
                text = this[_getTrimmedText](treemapModel.group, positionIndex, length, slab, text);
              }
            } else {
              if (this[_direction] == basic_types.Axis.horizontal) {
                text = this[_getTrimmedText](treemapModel.group, positionIndex, length, slab);
              }
            }
            this.labels[$add](new legend$._GradientBarLabel.new(dart.nullCheck(text), this[_getTextOffset](text, positionIndex, dart.notNull(length) - 1, slab), this[_isOverlapSegmentText]));
            this.colors[$add](treemapModel.color);
            index = index + 1;
          }
        }
      }
    }
    [_collectColorMapperLabelsAndColors](length) {
      if (length == null) dart.nullFailed(I[2], 2441, 47, "length");
      if (dart.dtest(dart.dload(this.dataSource, 'isNotEmpty'))) {
        let slab = dart.notNull(this[_referenceArea]) / dart.notNull(this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems && dart.dload(dart.dsend(this.dataSource, '_get', [0]), 'value') != null ? dart.notNull(length) - 1 : length);
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          this[_isOverlapSegmentText] = false;
          let colorMapper = treemap.TreemapColorMapper.as(dart.dsend(this.dataSource, '_get', [i]));
          let text = null;
          if (i === 0) {
            let firstSegmentLabels = this[_getStartSegmentLabel](colorMapper);
            text = dart.notNull(firstSegmentLabels[$length]) > 1 ? firstSegmentLabels[$_get](1) : firstSegmentLabels[$_get](0);
          } else {
            text = this[_getActualText](colorMapper);
          }
          if (dart.dload(dart.dsend(this.dataSource, '_get', [0]), 'from') != null) {
            this[_collectRageColorMapperLabels](i, colorMapper, text, slab, length);
          } else {
            let positionIndex = this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem ? i + 1 : i;
            if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem) {
              text = this[_getTrimmedText](text, i, length, slab);
            } else if (i < dart.notNull(length) - 1) {
              text = this[_getTrimmedText](text, i, length, slab, this[_getActualText](treemap.TreemapColorMapper.as(dart.dsend(this.dataSource, '_get', [i + 1]))));
            }
            this.labels[$add](new legend$._GradientBarLabel.new(text, this[_getTextOffset](text, positionIndex, dart.notNull(length) - 1, slab), this[_isOverlapSegmentText]));
          }
          this.colors[$add](colorMapper.color);
        }
      }
    }
    [_collectRageColorMapperLabels](i, colorMapper, text, slab, length) {
      if (i == null) dart.nullFailed(I[2], 2487, 42, "i");
      if (colorMapper == null) dart.nullFailed(I[2], 2487, 64, "colorMapper");
      if (text == null) dart.nullFailed(I[2], 2488, 14, "text");
      if (slab == null) dart.nullFailed(I[2], 2488, 27, "slab");
      if (length == null) dart.nullFailed(I[2], 2488, 37, "length");
      if (i === 0 && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        let startText = null;
        let firstSegmentLabels = this[_getStartSegmentLabel](colorMapper);
        if (dart.notNull(firstSegmentLabels[$length]) > 1) {
          startText = firstSegmentLabels[$_get](0);
        } else {
          startText = dart.nullCheck(colorMapper.from)[$toString]();
        }
        if (this[_direction] == basic_types.Axis.horizontal && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems && startText[$isNotEmpty] && text[$isNotEmpty]) {
          let refCurrentTextWidth = this.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside ? this[_getTextWidth](startText) : dart.notNull(this[_getTextWidth](startText)) / 2;
          let refNextTextWidth = dart.notNull(this[_getTextWidth](text)) / 2;
          this[_isOverlapSegmentText] = dart.notNull(refCurrentTextWidth) + refNextTextWidth > dart.notNull(slab);
          if (this.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.ellipsis) {
            if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
              let textWidth = dart.notNull(refCurrentTextWidth) + refNextTextWidth;
              startText = legend$._getTrimText(startText, this.textStyle, slab, this[_textPainter], textWidth, refNextTextWidth);
            }
          }
        }
        this.labels[$add](new legend$._GradientBarLabel.new(startText, this[_getTextOffset](startText, i, length, slab), this[_isOverlapSegmentText]));
      }
      if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem) {
        text = this[_getTrimmedText](text, i, length, slab);
      } else if (dart.notNull(i) < dart.notNull(length) - 1) {
        text = this[_getTrimmedText](text, i, length, slab, this[_getActualText](treemap.TreemapColorMapper.as(dart.dsend(this.dataSource, '_get', [dart.notNull(i) + 1]))));
      }
      this.labels[$add](new legend$._GradientBarLabel.new(text, this[_getTextOffset](text, dart.notNull(i) + 1, length, slab), this[_isOverlapSegmentText]));
    }
    [_getTrimmedText](currentText, index, length, slab, nextText = null) {
      if (currentText == null) dart.nullFailed(I[2], 2536, 33, "currentText");
      if (index == null) dart.nullFailed(I[2], 2536, 50, "index");
      if (length == null) dart.nullFailed(I[2], 2536, 61, "length");
      if (slab == null) dart.nullFailed(I[2], 2536, 76, "slab");
      if (this.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.visible || currentText[$isEmpty] || nextText != null && nextText[$isEmpty] || nextText == null) {
        return currentText;
      }
      if (this[_direction] == basic_types.Axis.horizontal && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        let refCurrentTextWidth = null;
        let refNextTextWidth = null;
        let isLastInsideItem = false;
        if (index === dart.notNull(length) - 1) {
          refNextTextWidth = dart.notNull(this[_getTextWidth](nextText)) / 2;
          if (this.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside) {
            refCurrentTextWidth = this[_getTextWidth](currentText);
            isLastInsideItem = true;
          } else {
            refCurrentTextWidth = dart.notNull(this[_getTextWidth](currentText)) / 2;
            isLastInsideItem = false;
          }
        } else {
          refCurrentTextWidth = dart.notNull(this[_getTextWidth](currentText)) / 2;
          refNextTextWidth = dart.notNull(index) + 1 === dart.notNull(length) - 1 && this.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.inside ? this[_getTextWidth](nextText) : dart.notNull(this[_getTextWidth](nextText)) / 2;
        }
        this[_isOverlapSegmentText] = dart.notNull(refCurrentTextWidth) + dart.notNull(refNextTextWidth) > dart.notNull(slab);
        if (this.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.ellipsis && dart.test(this[_isOverlapSegmentText])) {
          if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
            let textWidth = dart.notNull(refCurrentTextWidth) + dart.notNull(refNextTextWidth);
            return legend$._getTrimText(currentText, this.textStyle, slab, this[_textPainter], textWidth, refNextTextWidth, isLastInsideItem);
          }
        }
      } else if (this[_direction] == basic_types.Axis.horizontal && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem) {
        let textWidth = this[_getTextWidth](currentText);
        this[_isOverlapSegmentText] = dart.notNull(textWidth) > dart.notNull(slab);
        if (dart.test(this[_isOverlapSegmentText])) {
          return legend$._getTrimText(currentText, this.textStyle, slab, this[_textPainter], textWidth);
        }
      }
      return currentText;
    }
    [_getTextWidth](text) {
      if (text == null) dart.nullFailed(I[2], 2591, 31, "text");
      this[_textPainter].text = new text_span.TextSpan.new({text: text, style: this.textStyle});
      this[_textPainter].layout();
      return this[_textPainter].width;
    }
    [_getStartSegmentLabel](colorMapper) {
      if (colorMapper == null) dart.nullFailed(I[2], 2597, 57, "colorMapper");
      if (colorMapper.from != null && colorMapper.name != null && dart.nullCheck(colorMapper.name)[$isNotEmpty] && dart.nullCheck(colorMapper.name)[$_get](0) === "{" && this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        let splitText = dart.nullCheck(colorMapper.name)[$split]("},{");
        if (dart.notNull(splitText[$length]) > 1) {
          splitText[$_set](0, splitText[$_get](0)[$replaceAll]("{", ""));
          splitText[$_set](1, splitText[$_get](1)[$replaceAll]("}", ""));
        }
        return splitText;
      } else {
        return T.JSArrayOfString().of([this[_getActualText](colorMapper)]);
      }
    }
    [_getTextOffset](text, positionIndex, length, slab) {
      if (positionIndex == null) dart.nullFailed(I[2], 2616, 25, "positionIndex");
      if (length == null) dart.nullFailed(I[2], 2616, 44, "length");
      if (slab == null) dart.nullFailed(I[2], 2616, 59, "slab");
      this[_textPainter].text = new text_span.TextSpan.new({text: text, style: this.textStyle});
      this[_textPainter].layout();
      let canAdjustLabelToCenter = this.settings[_edgeLabelsPlacement$] == legend$.TreemapLegendEdgeLabelsPlacement.center && (positionIndex === 0 || positionIndex == length) || dart.notNull(positionIndex) > 0 && dart.notNull(positionIndex) < dart.notNull(length) || this.settings[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.onItem;
      if (this[_direction] == basic_types.Axis.horizontal) {
        return this[_getHorizontalOffset](canAdjustLabelToCenter, positionIndex, slab, length);
      } else {
        let referenceTextWidth = canAdjustLabelToCenter ? dart.notNull(this[_textPainter].height) / 2 : positionIndex == length ? this[_textPainter].height : 0.0;
        if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
          return new ui.Offset.new(0.0, dart.notNull(slab) * dart.notNull(positionIndex) - dart.notNull(referenceTextWidth));
        }
        return new ui.Offset.new(0.0, dart.notNull(slab) * dart.notNull(positionIndex) - dart.notNull(referenceTextWidth) - dart.notNull(slab) / 2);
      }
    }
    [_getHorizontalOffset](canAdjustLabelToCenter, positionIndex, slab, length) {
      if (canAdjustLabelToCenter == null) dart.nullFailed(I[2], 2641, 12, "canAdjustLabelToCenter");
      if (positionIndex == null) dart.nullFailed(I[2], 2641, 40, "positionIndex");
      if (slab == null) dart.nullFailed(I[2], 2641, 62, "slab");
      if (length == null) dart.nullFailed(I[2], 2641, 72, "length");
      if (dart.test(this[_isRTL])) {
        let referenceTextWidth = dart.test(canAdjustLabelToCenter) ? -dart.notNull(this[_textPainter].width) / 2 : positionIndex === 0 ? -dart.notNull(this[_textPainter].width) : 0.0;
        let dx = dart.notNull(this[_segmentSize$].width) - (dart.notNull(slab) * dart.notNull(positionIndex) - referenceTextWidth);
        if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
          return new ui.Offset.new(dx, 0.0);
        }
        dx = dart.notNull(this[_segmentSize$].width) - dart.notNull(slab) * dart.notNull(positionIndex);
        return new ui.Offset.new(dx + dart.notNull(slab) / 2 - dart.notNull(this[_textPainter].width) / 2, 0.0);
      }
      let referenceTextWidth = dart.test(canAdjustLabelToCenter) ? dart.notNull(this[_textPainter].width) / 2 : positionIndex == length ? this[_textPainter].width : 0.0;
      if (this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems) {
        return new ui.Offset.new(dart.notNull(slab) * dart.notNull(positionIndex) - dart.notNull(referenceTextWidth), 0.0);
      }
      return new ui.Offset.new(dart.notNull(slab) * dart.notNull(positionIndex) - dart.notNull(this[_textPainter].width) / 2 - dart.notNull(slab) / 2, 0.0);
    }
    [_buildGradientBar]() {
      return this[_direction] == basic_types.Axis.horizontal ? new basic.Column.new({children: this[_getChildren](), $creationLocationd_0dea112b090073317d4: C[192] || CT.C192}) : new basic.Row.new({children: this[_getChildren](), $creationLocationd_0dea112b090073317d4: C[195] || CT.C195});
    }
    [_getChildren]() {
      let labelBoxWidth = this[_segmentSize$].width;
      let labelBoxHeight = null;
      let startAlignment = alignment.Alignment.centerLeft;
      let endAlignment = alignment.Alignment.centerRight;
      if (this[_direction] == basic_types.Axis.vertical) {
        labelBoxWidth = null;
        labelBoxHeight = this[_segmentSize$].height;
        startAlignment = alignment.Alignment.topCenter;
        endAlignment = alignment.Alignment.bottomCenter;
      }
      if (dart.test(this[_isRTL]) && this[_direction] == basic_types.Axis.horizontal) {
        let temp = startAlignment;
        startAlignment = endAlignment;
        endAlignment = temp;
      }
      return T.JSArrayOfWidget().of([new container.Container.new({width: this[_segmentSize$].width, height: this[_segmentSize$].height, decoration: new box_decoration.BoxDecoration.new({gradient: new gradient.LinearGradient.new({begin: startAlignment, end: endAlignment, colors: this.colors})}), $creationLocationd_0dea112b090073317d4: C[198] || CT.C198}), new basic.SizedBox.new({width: this[_direction] == basic_types.Axis.vertical ? 7.0 : 0.0, height: this[_direction] == basic_types.Axis.horizontal ? 7.0 : 0.0, $creationLocationd_0dea112b090073317d4: C[203] || CT.C203}), new container.Container.new({width: labelBoxWidth, height: labelBoxHeight, child: this[_getLabels](), $creationLocationd_0dea112b090073317d4: C[207] || CT.C207})]);
    }
    [_getLabels]() {
      return new basic.Stack.new({textDirection: ui.TextDirection.ltr, children: T.ListOfWidget().generate(this.labels[$length], dart.fn(index => {
          if (index == null) dart.nullFailed(I[2], 2714, 51, "index");
          if (this.settings[_labelOverflow$] == legend$.TreemapLabelOverflow.hide && dart.test(this.labels[$_get](index).isOverlapping) || this.labels[$_get](index).label[$isEmpty]) {
            return new basic.SizedBox.new({height: 0.0, width: 0.0, $creationLocationd_0dea112b090073317d4: C[212] || CT.C212});
          }
          return new basic.Directionality.new({textDirection: ui.TextDirection.ltr, child: new basic.Transform.translate({offset: this.labels[$_get](index).offset, child: new text$.Text.new(this.labels[$_get](index).label, {style: this.textStyle, softWrap: false, $creationLocationd_0dea112b090073317d4: C[216] || CT.C216}), $creationLocationd_0dea112b090073317d4: C[221] || CT.C221}), $creationLocationd_0dea112b090073317d4: C[225] || CT.C225});
        }, T.intToWidget())), $creationLocationd_0dea112b090073317d4: C[229] || CT.C229});
    }
    [_getActualText](colorMapper) {
      let t15;
      if (colorMapper == null) dart.nullFailed(I[2], 2736, 44, "colorMapper");
      return colorMapper.from != null ? (t15 = colorMapper.name, t15 == null ? this[_labelsPlacement$] == legend$.TreemapLegendLabelsPlacement.betweenItems ? dart.toString(colorMapper.to) : dart.test(this[_isRTL]) ? dart.str(colorMapper.to) + " - " + dart.str(colorMapper.from) : dart.str(colorMapper.from) + " - " + dart.str(colorMapper.to) : t15) : dart.nullCheck(colorMapper.value);
    }
  };
  (legend$._GradientBarLegend.new = function(opts) {
    let dataSource = opts && 'dataSource' in opts ? opts.dataSource : null;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    if (settings == null) dart.nullFailed(I[2], 2300, 21, "settings");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    if (textStyle == null) dart.nullFailed(I[2], 2301, 21, "textStyle");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.colors = T.JSArrayOfColor().of([]);
    this.labels = T.JSArrayOf_GradientBarLabel().of([]);
    this[___GradientBarLegend__direction] = null;
    this[___GradientBarLegend__segmentSize] = null;
    this[___GradientBarLegend__textPainter] = null;
    this[___GradientBarLegend__referenceArea] = null;
    this[_isRTL] = false;
    this[_isOverlapSegmentText] = false;
    this[_labelsPlacement$] = null;
    this.dataSource = dataSource;
    this.settings = settings;
    this.textStyle = textStyle;
    legend$._GradientBarLegend.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = legend$._GradientBarLegend.prototype;
  dart.addTypeTests(legend$._GradientBarLegend);
  dart.addTypeCaches(legend$._GradientBarLegend);
  dart.setMethodSignature(legend$._GradientBarLegend, () => ({
    __proto__: dart.getMethods(legend$._GradientBarLegend.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_updateSegmentSize]: dart.fnType(dart.void, [core.double]),
    [_collectLabelsAndColors]: dart.fnType(dart.void, []),
    [_collectColorMapperLabelsAndColors]: dart.fnType(dart.void, [core.int]),
    [_collectRageColorMapperLabels]: dart.fnType(dart.void, [core.int, treemap.TreemapColorMapper, core.String, core.double, core.int]),
    [_getTrimmedText]: dart.fnType(core.String, [core.String, core.int, core.int, core.double], [dart.nullable(core.String)]),
    [_getTextWidth]: dart.fnType(core.double, [core.String]),
    [_getStartSegmentLabel]: dart.fnType(core.List$(core.String), [treemap.TreemapColorMapper]),
    [_getTextOffset]: dart.fnType(ui.Offset, [dart.nullable(core.String), core.int, core.int, core.double]),
    [_getHorizontalOffset]: dart.fnType(ui.Offset, [core.bool, core.int, core.double, core.int]),
    [_buildGradientBar]: dart.fnType(framework.Widget, []),
    [_getChildren]: dart.fnType(core.List$(framework.Widget), []),
    [_getLabels]: dart.fnType(framework.Widget, []),
    [_getActualText]: dart.fnType(core.String, [treemap.TreemapColorMapper])
  }));
  dart.setGetterSignature(legend$._GradientBarLegend, () => ({
    __proto__: dart.getGetters(legend$._GradientBarLegend.__proto__),
    [_direction]: basic_types.Axis,
    [_segmentSize$]: ui.Size,
    [_textPainter]: text_painter.TextPainter,
    [_referenceArea]: core.double
  }));
  dart.setSetterSignature(legend$._GradientBarLegend, () => ({
    __proto__: dart.getSetters(legend$._GradientBarLegend.__proto__),
    [_direction]: basic_types.Axis,
    [_segmentSize$]: ui.Size,
    [_textPainter]: text_painter.TextPainter,
    [_referenceArea]: core.double
  }));
  dart.setLibraryUri(legend$._GradientBarLegend, I[3]);
  dart.setFieldSignature(legend$._GradientBarLegend, () => ({
    __proto__: dart.getFields(legend$._GradientBarLegend.__proto__),
    dataSource: dart.finalFieldType(dart.dynamic),
    settings: dart.finalFieldType(legend$.TreemapLegend),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    labels: dart.finalFieldType(core.List$(legend$._GradientBarLabel)),
    [___GradientBarLegend__direction]: dart.fieldType(dart.nullable(basic_types.Axis)),
    [___GradientBarLegend__segmentSize]: dart.fieldType(dart.nullable(ui.Size)),
    [___GradientBarLegend__textPainter]: dart.fieldType(dart.nullable(text_painter.TextPainter)),
    [___GradientBarLegend__referenceArea]: dart.fieldType(dart.nullable(core.double)),
    [_isRTL]: dart.fieldType(core.bool),
    [_isOverlapSegmentText]: dart.fieldType(core.bool),
    [_labelsPlacement$]: dart.fieldType(dart.nullable(legend$.TreemapLegendLabelsPlacement))
  }));
  legend$._TreemapIconShape = class _TreemapIconShape extends core.Object {
    getPreferredSize(iconSize) {
      if (iconSize == null) dart.nullFailed(I[2], 2752, 30, "iconSize");
      return iconSize;
    }
    paint(context, offset, opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4;
      if (context == null) dart.nullFailed(I[2], 2756, 21, "context");
      if (offset == null) dart.nullFailed(I[2], 2757, 12, "offset");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[2], 2758, 24, "parentBox");
      let iconSize = opts && 'iconSize' in opts ? opts.iconSize : null;
      if (iconSize == null) dart.nullFailed(I[2], 2759, 19, "iconSize");
      let color = opts && 'color' in opts ? opts.color : null;
      if (color == null) dart.nullFailed(I[2], 2760, 20, "color");
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
      let iconType = opts && 'iconType' in opts ? opts.iconType : null;
      if (iconType == null) dart.nullFailed(I[2], 2763, 30, "iconType");
      iconSize = this.getPreferredSize(iconSize);
      let halfIconWidth = dart.notNull(iconSize.width) / 2;
      let halfIconHeight = dart.notNull(iconSize.height) / 2;
      let hasStroke = strokeWidth != null && dart.notNull(strokeWidth) > 0 && strokeColor != null && !dart.equals(strokeColor, colors.Colors.transparent);
      let paint = (t15 = ui.Paint.new(), (() => {
        t15.isAntiAlias = true;
        t15.color = color;
        return t15;
      })());
      let path = null;
      switch (iconType) {
        case C[23] || CT.C23:
        {
          let rect = new ui.Rect.fromLTWH(offset.dx, offset.dy, iconSize.width, iconSize.height);
          context.canvas.drawOval(rect, paint);
          if (hasStroke) {
            t15$ = paint;
            (() => {
              t15$.strokeWidth = strokeWidth;
              t15$.color = strokeColor;
              t15$.style = ui.PaintingStyle.stroke;
              return t15$;
            })();
            context.canvas.drawOval(rect, paint);
          }
          break;
        }
        case C[24] || CT.C24:
        {
          let rect = new ui.Rect.fromLTWH(offset.dx, offset.dy, iconSize.width, iconSize.height);
          context.canvas.drawRect(rect, paint);
          if (hasStroke) {
            t15$0 = paint;
            (() => {
              t15$0.strokeWidth = strokeWidth;
              t15$0.color = strokeColor;
              t15$0.style = ui.PaintingStyle.stroke;
              return t15$0;
            })();
            context.canvas.drawRect(rect, paint);
          }
          break;
        }
        case C[25] || CT.C25:
        {
          path = (t15$1 = ui.Path.new(), (() => {
            t15$1.moveTo(dart.notNull(offset.dx) + halfIconWidth, offset.dy);
            t15$1.lineTo(dart.notNull(offset.dx) + dart.notNull(iconSize.width), dart.notNull(offset.dy) + dart.notNull(iconSize.height));
            t15$1.lineTo(offset.dx, dart.notNull(offset.dy) + dart.notNull(iconSize.height));
            t15$1.close();
            return t15$1;
          })());
          context.canvas.drawPath(path, paint);
          if (hasStroke) {
            t15$2 = paint;
            (() => {
              t15$2.strokeWidth = strokeWidth;
              t15$2.color = strokeColor;
              t15$2.style = ui.PaintingStyle.stroke;
              return t15$2;
            })();
            context.canvas.drawPath(path, paint);
          }
          break;
        }
        case C[26] || CT.C26:
        {
          path = (t15$3 = ui.Path.new(), (() => {
            t15$3.moveTo(dart.notNull(offset.dx) + halfIconWidth, offset.dy);
            t15$3.lineTo(dart.notNull(offset.dx) + dart.notNull(iconSize.width), dart.notNull(offset.dy) + halfIconHeight);
            t15$3.lineTo(dart.notNull(offset.dx) + halfIconWidth, dart.notNull(offset.dy) + dart.notNull(iconSize.height));
            t15$3.lineTo(offset.dx, dart.notNull(offset.dy) + halfIconHeight);
            t15$3.close();
            return t15$3;
          })());
          context.canvas.drawPath(path, paint);
          if (hasStroke) {
            t15$4 = paint;
            (() => {
              t15$4.strokeWidth = strokeWidth;
              t15$4.color = strokeColor;
              t15$4.style = ui.PaintingStyle.stroke;
              return t15$4;
            })();
            context.canvas.drawPath(path, paint);
          }
          break;
        }
      }
    }
  };
  (legend$._TreemapIconShape.new = function() {
    ;
  }).prototype = legend$._TreemapIconShape.prototype;
  dart.addTypeTests(legend$._TreemapIconShape);
  dart.addTypeCaches(legend$._TreemapIconShape);
  dart.setMethodSignature(legend$._TreemapIconShape, () => ({
    __proto__: dart.getMethods(legend$._TreemapIconShape.__proto__),
    getPreferredSize: dart.fnType(ui.Size, [ui.Size]),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset], {strokeColor: dart.nullable(ui.Color), strokeWidth: dart.nullable(core.double)}, {color: ui.Color, iconSize: ui.Size, iconType: legend$.TreemapIconType, parentBox: box.RenderBox})
  }));
  dart.setLibraryUri(legend$._TreemapIconShape, I[3]);
  legend$._getTrimText = function _getTrimText(text, style, maxWidth, painter, width, nextTextHalfWidth = null, isInsideLastItem = false) {
    if (text == null) dart.nullFailed(I[2], 2837, 28, "text");
    if (style == null) dart.nullFailed(I[2], 2837, 44, "style");
    if (maxWidth == null) dart.nullFailed(I[2], 2837, 58, "maxWidth");
    if (painter == null) dart.nullFailed(I[2], 2838, 17, "painter");
    if (width == null) dart.nullFailed(I[2], 2838, 33, "width");
    if (isInsideLastItem == null) dart.nullFailed(I[2], 2839, 38, "isInsideLastItem");
    let actualTextLength = text.length;
    let trimmedText = text;
    let trimLength = 3;
    while (dart.notNull(width) > dart.notNull(maxWidth)) {
      if (trimmedText.length <= 4) {
        trimmedText = trimmedText[$_get](0) + "...";
        painter.text = new text_span.TextSpan.new({style: style, text: trimmedText});
        painter.layout();
        break;
      } else {
        trimmedText = text[$replaceRange](actualTextLength - trimLength, actualTextLength, "...");
        painter.text = new text_span.TextSpan.new({style: style, text: trimmedText});
        painter.layout();
        trimLength = trimLength + 1;
      }
      if (dart.test(isInsideLastItem) && nextTextHalfWidth != null) {
        width = dart.notNull(painter.width) + dart.notNull(nextTextHalfWidth);
      } else {
        width = nextTextHalfWidth != null ? dart.notNull(painter.width) / 2 + dart.notNull(nextTextHalfWidth) : painter.width;
      }
    }
    return trimmedText;
  };
  var _name$0 = dart.privateName(layouts, "_name");
  layouts.PointerKind = class PointerKind extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (layouts.PointerKind.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[4], 27, 6, "index");
    if (_name == null) dart.nullFailed(I[4], 27, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = layouts.PointerKind.prototype;
  dart.addTypeTests(layouts.PointerKind);
  dart.addTypeCaches(layouts.PointerKind);
  dart.setLibraryUri(layouts.PointerKind, I[5]);
  dart.setFieldSignature(layouts.PointerKind, () => ({
    __proto__: dart.getFields(layouts.PointerKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(layouts.PointerKind, ['toString']);
  layouts.PointerKind.touch = C[233] || CT.C233;
  layouts.PointerKind.hover = C[234] || CT.C234;
  layouts.PointerKind.values = C[235] || CT.C235;
  layouts.LayoutType = class LayoutType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (layouts.LayoutType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[4], 36, 6, "index");
    if (_name == null) dart.nullFailed(I[4], 36, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = layouts.LayoutType.prototype;
  dart.addTypeTests(layouts.LayoutType);
  dart.addTypeCaches(layouts.LayoutType);
  dart.setLibraryUri(layouts.LayoutType, I[5]);
  dart.setFieldSignature(layouts.LayoutType, () => ({
    __proto__: dart.getFields(layouts.LayoutType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(layouts.LayoutType, ['toString']);
  layouts.LayoutType.squarified = C[236] || CT.C236;
  layouts.LayoutType.slice = C[237] || CT.C237;
  layouts.LayoutType.dice = C[238] || CT.C238;
  layouts.LayoutType.values = C[239] || CT.C239;
  var __TreemapTile__group = dart.privateName(layouts, "_#TreemapTile#_group");
  var __TreemapTile__indices = dart.privateName(layouts, "_#TreemapTile#_indices");
  var __TreemapTile__weight = dart.privateName(layouts, "_#TreemapTile#_weight");
  var __TreemapTile__color = dart.privateName(layouts, "_#TreemapTile#_color");
  var __TreemapTile__level = dart.privateName(layouts, "_#TreemapTile#_level");
  var _area = dart.privateName(layouts, "_area");
  var _offset = dart.privateName(layouts, "_offset");
  var __TreemapTile__size = dart.privateName(layouts, "_#TreemapTile#_size");
  var _labelBuilderSize = dart.privateName(layouts, "_labelBuilderSize");
  var _padding = dart.privateName(layouts, "_padding");
  var _descendants = dart.privateName(layouts, "_descendants");
  var _group = dart.privateName(layouts, "_group");
  var _indices = dart.privateName(layouts, "_indices");
  var _weight = dart.privateName(layouts, "_weight");
  var _color = dart.privateName(layouts, "_color");
  var _level = dart.privateName(layouts, "_level");
  var _size = dart.privateName(layouts, "_size");
  layouts.TreemapTile = class TreemapTile extends core.Object {
    get group() {
      return this[_group];
    }
    get [_group]() {
      let t15;
      t15 = this[__TreemapTile__group];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("_group")) : t15;
    }
    set [_group](t15) {
      if (t15 == null) dart.nullFailed(I[4], 54, 15, "null");
      this[__TreemapTile__group] = t15;
    }
    get indices() {
      return this[_indices];
    }
    get [_indices]() {
      let t16;
      t16 = this[__TreemapTile__indices];
      return t16 == null ? dart.throw(new _internal.LateError.fieldNI("_indices")) : t16;
    }
    set [_indices](t16) {
      if (t16 == null) dart.nullFailed(I[4], 58, 18, "null");
      this[__TreemapTile__indices] = t16;
    }
    get weight() {
      return this[_weight];
    }
    get [_weight]() {
      let t17;
      t17 = this[__TreemapTile__weight];
      return t17 == null ? dart.throw(new _internal.LateError.fieldNI("_weight")) : t17;
    }
    set [_weight](t17) {
      if (t17 == null) dart.nullFailed(I[4], 62, 15, "null");
      this[__TreemapTile__weight] = t17;
    }
    get color() {
      return this[_color];
    }
    get [_color]() {
      let t18;
      t18 = this[__TreemapTile__color];
      return t18 == null ? dart.throw(new _internal.LateError.fieldNI("_color")) : t18;
    }
    set [_color](t18) {
      if (t18 == null) dart.nullFailed(I[4], 66, 14, "null");
      this[__TreemapTile__color] = t18;
    }
    get level() {
      return this[_level];
    }
    get [_level]() {
      let t19;
      t19 = this[__TreemapTile__level];
      return t19 == null ? dart.throw(new _internal.LateError.fieldNI("_level")) : t19;
    }
    set [_level](t19) {
      if (t19 == null) dart.nullFailed(I[4], 70, 21, "null");
      this[__TreemapTile__level] = t19;
    }
    get [_size]() {
      let t20;
      t20 = this[__TreemapTile__size];
      return t20 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t20;
    }
    set [_size](t20) {
      if (t20 == null) dart.nullFailed(I[4], 79, 13, "null");
      this[__TreemapTile__size] = t20;
    }
  };
  (layouts.TreemapTile.__ = function() {
    this[__TreemapTile__group] = null;
    this[__TreemapTile__indices] = null;
    this[__TreemapTile__weight] = null;
    this[__TreemapTile__color] = null;
    this[__TreemapTile__level] = null;
    this[_area] = null;
    this[_offset] = null;
    this[__TreemapTile__size] = null;
    this[_labelBuilderSize] = null;
    this[_padding] = null;
    this[_descendants] = null;
    ;
  }).prototype = layouts.TreemapTile.prototype;
  dart.addTypeTests(layouts.TreemapTile);
  dart.addTypeCaches(layouts.TreemapTile);
  dart.setGetterSignature(layouts.TreemapTile, () => ({
    __proto__: dart.getGetters(layouts.TreemapTile.__proto__),
    group: core.String,
    [_group]: core.String,
    indices: core.List$(core.int),
    [_indices]: core.List$(core.int),
    weight: core.double,
    [_weight]: core.double,
    color: ui.Color,
    [_color]: ui.Color,
    level: treemap.TreemapLevel,
    [_level]: treemap.TreemapLevel,
    [_size]: ui.Size
  }));
  dart.setSetterSignature(layouts.TreemapTile, () => ({
    __proto__: dart.getSetters(layouts.TreemapTile.__proto__),
    [_group]: core.String,
    [_indices]: core.List$(core.int),
    [_weight]: core.double,
    [_color]: ui.Color,
    [_level]: treemap.TreemapLevel,
    [_size]: ui.Size
  }));
  dart.setLibraryUri(layouts.TreemapTile, I[5]);
  dart.setFieldSignature(layouts.TreemapTile, () => ({
    __proto__: dart.getFields(layouts.TreemapTile.__proto__),
    [__TreemapTile__group]: dart.fieldType(dart.nullable(core.String)),
    [__TreemapTile__indices]: dart.fieldType(dart.nullable(core.List$(core.int))),
    [__TreemapTile__weight]: dart.fieldType(dart.nullable(core.double)),
    [__TreemapTile__color]: dart.fieldType(dart.nullable(ui.Color)),
    [__TreemapTile__level]: dart.fieldType(dart.nullable(treemap.TreemapLevel)),
    [_area]: dart.fieldType(dart.nullable(core.double)),
    [_offset]: dart.fieldType(dart.nullable(ui.Offset)),
    [__TreemapTile__size]: dart.fieldType(dart.nullable(ui.Size)),
    [_labelBuilderSize]: dart.fieldType(dart.nullable(ui.Size)),
    [_padding]: dart.fieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    [_descendants]: dart.fieldType(dart.nullable(core.Map$(core.String, layouts.TreemapTile)))
  }));
  var dataCount$ = dart.privateName(layouts, "Treemap.dataCount");
  var weightValueMapper$ = dart.privateName(layouts, "Treemap.weightValueMapper");
  var levels$ = dart.privateName(layouts, "Treemap.levels");
  var colorMappers$ = dart.privateName(layouts, "Treemap.colorMappers");
  var onSelectionChanged$ = dart.privateName(layouts, "Treemap.onSelectionChanged");
  var selectionSettings$ = dart.privateName(layouts, "Treemap.selectionSettings");
  var tooltipSettings$ = dart.privateName(layouts, "Treemap.tooltipSettings");
  var layoutType$ = dart.privateName(layouts, "Treemap.layoutType");
  var legend$0 = dart.privateName(layouts, "Treemap.legend");
  var hoverBorder$ = dart.privateName(layouts, "Treemap.hoverBorder");
  layouts.Treemap = class Treemap extends framework.StatefulWidget {
    get dataCount() {
      return this[dataCount$];
    }
    set dataCount(value) {
      super.dataCount = value;
    }
    get weightValueMapper() {
      return this[weightValueMapper$];
    }
    set weightValueMapper(value) {
      super.weightValueMapper = value;
    }
    get levels() {
      return this[levels$];
    }
    set levels(value) {
      super.levels = value;
    }
    get colorMappers() {
      return this[colorMappers$];
    }
    set colorMappers(value) {
      super.colorMappers = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get selectionSettings() {
      return this[selectionSettings$];
    }
    set selectionSettings(value) {
      super.selectionSettings = value;
    }
    get tooltipSettings() {
      return this[tooltipSettings$];
    }
    set tooltipSettings(value) {
      super.tooltipSettings = value;
    }
    get layoutType() {
      return this[layoutType$];
    }
    set layoutType(value) {
      super.layoutType = value;
    }
    get legend() {
      return this[legend$0];
    }
    set legend(value) {
      super.legend = value;
    }
    get hoverBorder() {
      return this[hoverBorder$];
    }
    set hoverBorder(value) {
      super.hoverBorder = value;
    }
    createState() {
      return new layouts._TreemapState.new();
    }
  };
  (layouts.Treemap.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let layoutType = opts && 'layoutType' in opts ? opts.layoutType : null;
    if (layoutType == null) dart.nullFailed(I[4], 98, 21, "layoutType");
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    if (dataCount == null) dart.nullFailed(I[4], 99, 21, "dataCount");
    let levels = opts && 'levels' in opts ? opts.levels : null;
    if (levels == null) dart.nullFailed(I[4], 100, 21, "levels");
    let weightValueMapper = opts && 'weightValueMapper' in opts ? opts.weightValueMapper : null;
    if (weightValueMapper == null) dart.nullFailed(I[4], 101, 21, "weightValueMapper");
    let colorMappers = opts && 'colorMappers' in opts ? opts.colorMappers : null;
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : null;
    if (selectionSettings == null) dart.nullFailed(I[4], 105, 21, "selectionSettings");
    let tooltipSettings = opts && 'tooltipSettings' in opts ? opts.tooltipSettings : null;
    if (tooltipSettings == null) dart.nullFailed(I[4], 106, 21, "tooltipSettings");
    let hoverBorder = opts && 'hoverBorder' in opts ? opts.hoverBorder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[layoutType$] = layoutType;
    this[dataCount$] = dataCount;
    this[levels$] = levels;
    this[weightValueMapper$] = weightValueMapper;
    this[colorMappers$] = colorMappers;
    this[legend$0] = legend;
    this[onSelectionChanged$] = onSelectionChanged;
    this[selectionSettings$] = selectionSettings;
    this[tooltipSettings$] = tooltipSettings;
    this[hoverBorder$] = hoverBorder;
    layouts.Treemap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = layouts.Treemap.prototype;
  dart.addTypeTests(layouts.Treemap);
  dart.addTypeCaches(layouts.Treemap);
  dart.setMethodSignature(layouts.Treemap, () => ({
    __proto__: dart.getMethods(layouts.Treemap.__proto__),
    createState: dart.fnType(layouts._TreemapState, [])
  }));
  dart.setLibraryUri(layouts.Treemap, I[5]);
  dart.setFieldSignature(layouts.Treemap, () => ({
    __proto__: dart.getFields(layouts.Treemap.__proto__),
    dataCount: dart.finalFieldType(core.int),
    weightValueMapper: dart.finalFieldType(dart.fnType(core.double, [core.int])),
    levels: dart.finalFieldType(core.List$(treemap.TreemapLevel)),
    colorMappers: dart.finalFieldType(dart.nullable(core.List$(treemap.TreemapColorMapper))),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [layouts.TreemapTile]))),
    selectionSettings: dart.finalFieldType(treemap.TreemapSelectionSettings),
    tooltipSettings: dart.finalFieldType(treemap.TreemapTooltipSettings),
    layoutType: dart.finalFieldType(layouts.LayoutType),
    legend: dart.finalFieldType(dart.nullable(legend$.TreemapLegend)),
    hoverBorder: dart.finalFieldType(dart.nullable(rounded_rectangle_border.RoundedRectangleBorder))
  }));
  var _baseColor = dart.privateName(layouts, "_baseColor");
  var ___TreemapState__tooltipKey = dart.privateName(layouts, "_#_TreemapState#_tooltipKey");
  var ___TreemapState__dataSource = dart.privateName(layouts, "_#_TreemapState#_dataSource");
  var ___TreemapState__levelsLength = dart.privateName(layouts, "_#_TreemapState#_levelsLength");
  var _totalWeight = dart.privateName(layouts, "_totalWeight");
  var _isTooltipEnabled = dart.privateName(layouts, "_isTooltipEnabled");
  var _canUpdateTileColor = dart.privateName(layouts, "_canUpdateTileColor");
  var ___TreemapState__computeDataSource = dart.privateName(layouts, "_#_TreemapState#_computeDataSource");
  var _tooltipKey = dart.privateName(layouts, "_tooltipKey");
  var _dataSource = dart.privateName(layouts, "_dataSource");
  var _levelsLength = dart.privateName(layouts, "_levelsLength");
  var _computeDataSource = dart.privateName(layouts, "_computeDataSource");
  var _squarified = dart.privateName(layouts, "_squarified");
  var _sliceAndDice = dart.privateName(layouts, "_sliceAndDice");
  var _tooltip = dart.privateName(layouts, "_tooltip");
  var _getLegendAlignment = dart.privateName(layouts, "_getLegendAlignment");
  var _getLegendOffset = dart.privateName(layouts, "_getLegendOffset");
  var _buildTreemap = dart.privateName(layouts, "_buildTreemap");
  var _obtainDataSource = dart.privateName(layouts, "_obtainDataSource");
  var _invalidate = dart.privateName(layouts, "_invalidate");
  var _obtainDataSourceAndBindColorMappers = dart.privateName(layouts, "_obtainDataSourceAndBindColorMappers");
  var _groupTiles = dart.privateName(layouts, "_groupTiles");
  var _bindColorMappersIntoDataSource = dart.privateName(layouts, "_bindColorMappersIntoDataSource");
  var _getColor = dart.privateName(layouts, "_getColor");
  var _getRangeColor = dart.privateName(layouts, "_getRangeColor");
  layouts._TreemapState = class _TreemapState extends framework.State$(layouts.Treemap) {
    get [_tooltipKey]() {
      let t21;
      t21 = this[___TreemapState__tooltipKey];
      return t21 == null ? dart.throw(new _internal.LateError.fieldNI("_tooltipKey")) : t21;
    }
    set [_tooltipKey](t21) {
      if (t21 == null) dart.nullFailed(I[4], 148, 18, "null");
      this[___TreemapState__tooltipKey] = t21;
    }
    get [_dataSource]() {
      let t22;
      t22 = this[___TreemapState__dataSource];
      return t22 == null ? dart.throw(new _internal.LateError.fieldNI("_dataSource")) : t22;
    }
    set [_dataSource](t22) {
      if (t22 == null) dart.nullFailed(I[4], 149, 33, "null");
      this[___TreemapState__dataSource] = t22;
    }
    get [_levelsLength]() {
      let t23;
      t23 = this[___TreemapState__levelsLength];
      return t23 == null ? dart.throw(new _internal.LateError.fieldNI("_levelsLength")) : t23;
    }
    set [_levelsLength](t23) {
      if (t23 == null) dart.nullFailed(I[4], 151, 12, "null");
      this[___TreemapState__levelsLength] = t23;
    }
    get [_computeDataSource]() {
      let t24;
      t24 = this[___TreemapState__computeDataSource];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_computeDataSource")) : t24;
    }
    set [_computeDataSource](t24) {
      if (t24 == null) dart.nullFailed(I[4], 159, 21, "null");
      this[___TreemapState__computeDataSource] = t24;
    }
    get [_squarified]() {
      return new layouts._SquarifiedTreemap.new({dataCount: this.widget.dataCount, dataSource: this[_dataSource], totalWeight: this[_totalWeight], tooltipKey: this[_tooltipKey], onSelectionChanged: this.widget.onSelectionChanged, selectionSettings: this.widget.selectionSettings, $creationLocationd_0dea112b090073317d4: C[240] || CT.C240});
    }
    get [_sliceAndDice]() {
      return new layouts._SliceAndDiceTreemap.new({dataCount: this.widget.dataCount, dataSource: this[_dataSource], type: this.widget.layoutType, totalWeight: this[_totalWeight], tooltipKey: this[_tooltipKey], onSelectionChanged: this.widget.onSelectionChanged, selectionSettings: this.widget.selectionSettings, $creationLocationd_0dea112b090073317d4: C[248] || CT.C248});
    }
    get [_tooltip]() {
      return new tooltip.TreemapTooltip.new({key: this[_tooltipKey], settings: this.widget.tooltipSettings, $creationLocationd_0dea112b090073317d4: C[257] || CT.C257});
    }
    [_buildTreemap](context, hasData) {
      let t25;
      if (context == null) dart.nullFailed(I[4], 183, 37, "context");
      if (hasData == null) dart.nullFailed(I[4], 183, 51, "hasData");
      let current = this.widget.layoutType == layouts.LayoutType.squarified ? this[_squarified] : this[_sliceAndDice];
      if (this.widget.legend != null) {
        let legend = new legend$.LegendWidget.new({dataSource: (t25 = this.widget.colorMappers, t25 == null ? this[_dataSource] : t25), settings: dart.nullCheck(this.widget.legend), $creationLocationd_0dea112b090073317d4: C[261] || CT.C261});
        if (dart.nullCheck(this.widget.legend).offset == null) {
          switch (dart.nullCheck(this.widget.legend).position) {
            case C[20] || CT.C20:
            {
              current = new basic.Column.new({children: T.JSArrayOfWidget().of([legend, new basic.Expanded.new({child: current, $creationLocationd_0dea112b090073317d4: C[265] || CT.C265})]), $creationLocationd_0dea112b090073317d4: C[268] || CT.C268});
              break;
            }
            case C[21] || CT.C21:
            {
              current = new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: current, $creationLocationd_0dea112b090073317d4: C[271] || CT.C271}), legend]), $creationLocationd_0dea112b090073317d4: C[274] || CT.C274});
              break;
            }
            case C[18] || CT.C18:
            {
              current = new basic.Row.new({children: T.JSArrayOfWidget().of([legend, new basic.Expanded.new({child: current, $creationLocationd_0dea112b090073317d4: C[277] || CT.C277})]), $creationLocationd_0dea112b090073317d4: C[280] || CT.C280});
              break;
            }
            case C[19] || CT.C19:
            {
              current = new basic.Row.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: current, $creationLocationd_0dea112b090073317d4: C[283] || CT.C283}), legend]), $creationLocationd_0dea112b090073317d4: C[286] || CT.C286});
              break;
            }
          }
        } else {
          current = new basic.Stack.new({children: T.JSArrayOfWidget().of([current, new basic.Align.new({alignment: this[_getLegendAlignment](dart.nullCheck(this.widget.legend).position), child: new basic.Padding.new({padding: this[_getLegendOffset](), child: legend, $creationLocationd_0dea112b090073317d4: C[289] || CT.C289}), $creationLocationd_0dea112b090073317d4: C[293] || CT.C293})]), $creationLocationd_0dea112b090073317d4: C[297] || CT.C297});
        }
      }
      return current;
    }
    [_invalidate]() {
      this[_canUpdateTileColor] = true;
      this[_dataSource][$clear]();
      this[_obtainDataSource]();
    }
    [_obtainDataSource]() {
      this[_computeDataSource] = this[_obtainDataSourceAndBindColorMappers]().then(core.bool, dart.fn(value => {
        if (value == null) dart.nullFailed(I[4], 233, 59, "value");
        return value;
      }, T.boolTobool()));
    }
    [_obtainDataSourceAndBindColorMappers]() {
      return async.async(core.bool, (function* _obtainDataSourceAndBindColorMappers() {
        let t26, t25;
        if (dart.test(this[_dataSource][$isEmpty])) {
          for (let i = 0; i < dart.notNull(this.widget.dataCount); i = i + 1) {
            let weight = (t25 = this.widget, t26 = i, t25.weightValueMapper(t26));
            if (!(dart.notNull(weight) > 0)) dart.assertFailed(null, I[4], 240, 16, "weight > 0");
            this[_totalWeight] = dart.notNull(this[_totalWeight]) + dart.notNull(weight);
            this[_groupTiles](weight, i);
          }
        }
        if (dart.test(this[_dataSource][$isNotEmpty]) && dart.test(this[_canUpdateTileColor])) {
          this[_bindColorMappersIntoDataSource](this[_dataSource]);
          this[_canUpdateTileColor] = false;
        }
        return true;
      }).bind(this));
    }
    [_groupTiles](weight, dataIndex, opts) {
      let t26, t25, t26$, t25$, t25$0;
      if (weight == null) dart.nullFailed(I[4], 254, 27, "weight");
      if (dataIndex == null) dart.nullFailed(I[4], 254, 39, "dataIndex");
      let currentLevelIndex = opts && 'currentLevelIndex' in opts ? opts.currentLevelIndex : 0;
      if (currentLevelIndex == null) dart.nullFailed(I[4], 255, 12, "currentLevelIndex");
      let ancestor = opts && 'ancestor' in opts ? opts.ancestor : null;
      let currentLevel = this.widget.levels[$_get](currentLevelIndex);
      let groupKey = (t25 = currentLevel, t26 = dataIndex, t25.groupMapper(t26));
      let color = currentLevel.color;
      let padding = currentLevel.padding;
      let nextLevelIndex = dart.notNull(currentLevelIndex) + 1;
      this[_isTooltipEnabled] = !!(dart.notNull(this[_isTooltipEnabled]) | currentLevel.tooltipBuilder != null);
      if (groupKey == null) {
        if (nextLevelIndex < dart.notNull(this[_levelsLength])) {
          this[_groupTiles](weight, dataIndex, {currentLevelIndex: nextLevelIndex, ancestor: ancestor});
        }
        return;
      }
      (t25$0 = (t25$ = ancestor, t25$ == null ? null : (t26$ = t25$[_descendants], t26$ == null ? t25$[_descendants] = new (T.IdentityMapOfString$TreemapTile()).new() : t26$)), t25$0 == null ? this[_dataSource] : t25$0)[$update](groupKey, dart.fn(tile => {
        let t25;
        if (tile == null) dart.nullFailed(I[4], 301, 20, "tile");
        t25 = tile;
        t25[_weight] = dart.notNull(t25[_weight]) + dart.notNull(weight);
        tile.indices[$add](dataIndex);
        if (nextLevelIndex < dart.notNull(this[_levelsLength])) {
          this[_groupTiles](weight, dataIndex, {currentLevelIndex: nextLevelIndex, ancestor: tile});
        }
        return tile;
      }, T.TreemapTileToTreemapTile()), {ifAbsent: dart.fn(() => {
          let t25;
          let tile = (t25 = new layouts.TreemapTile.__(), (() => {
            t25[_group] = groupKey;
            t25[_level] = currentLevel;
            t25[_indices] = T.JSArrayOfint().of([dataIndex]);
            t25[_weight] = weight;
            t25[_padding] = padding;
            return t25;
          })());
          if (color != null) {
            tile[_color] = color;
          }
          if (nextLevelIndex < dart.notNull(this[_levelsLength])) {
            this[_groupTiles](weight, dataIndex, {currentLevelIndex: nextLevelIndex, ancestor: tile});
          }
          return tile;
        }, T.VoidToTreemapTile())});
    }
    [_bindColorMappersIntoDataSource](source) {
      let t25;
      if (source != null && dart.test(source[$isNotEmpty])) {
        let baseWeight = source[$values][$map](core.double, dart.fn(tile => {
          if (tile == null) dart.nullFailed(I[4], 333, 42, "tile");
          return tile[_weight];
        }, T.TreemapTileTodouble()))[$reduce](dart.gbind(C[300] || CT.C300, core.double));
        for (let tile of source[$values]) {
          tile[_color] = (t25 = this[_getColor](tile), t25 == null ? layouts._getSaturatedColor(this[_baseColor], 1 - dart.notNull(tile[_weight]) / dart.notNull(baseWeight), colors.Colors.white) : t25);
          this[_bindColorMappersIntoDataSource](tile[_descendants]);
        }
      }
    }
    [_getColor](tile) {
      let t25, t25$;
      if (tile == null) dart.nullFailed(I[4], 343, 32, "tile");
      let colorMappers = this.widget.colorMappers;
      let colorValue = (t25 = tile.level.colorValueMapper, t25 == null ? null : t25(tile));
      if (ui.Color.is(colorValue)) {
        return colorValue;
      } else if (colorMappers != null) {
        if (typeof colorValue == 'string') {
          for (let mapper of colorMappers) {
            if (!(mapper.value != null)) dart.assertFailed(null, I[4], 352, 18, "mapper.value != null");
            if (mapper.value == colorValue) {
              return mapper.color;
            }
          }
        } else if (typeof colorValue == 'number') {
          return this[_getRangeColor](colorValue, colorMappers);
        } else if (colorValue == null) {
          t25$ = tile.level.color;
          return t25$ == null ? this[_getRangeColor](tile[_weight], colorMappers) : t25$;
        }
      }
      return tile.level.color;
    }
    [_getRangeColor](value, colorMappers) {
      if (value == null) dart.nullFailed(I[4], 371, 29, "value");
      if (colorMappers == null) dart.nullFailed(I[4], 371, 61, "colorMappers");
      for (let mapper of colorMappers) {
        if (!(mapper.from != null && mapper.to != null && dart.nullCheck(mapper.from) <= dart.nullCheck(mapper.to))) dart.assertFailed(null, I[4], 373, 14, "mapper.from != null &&\r\n          mapper.to != null &&\r\n          mapper.from! <= mapper.to!");
        if (mapper.from != null && mapper.to != null && dart.nullCheck(mapper.from) <= dart.notNull(value) && dart.nullCheck(mapper.to) >= dart.notNull(value)) {
          return mapper.color;
        }
      }
      return null;
    }
    [_getLegendAlignment](position) {
      if (position == null) dart.nullFailed(I[4], 387, 63, "position");
      switch (position) {
        case C[20] || CT.C20:
        {
          return alignment.Alignment.topCenter;
        }
        case C[21] || CT.C21:
        {
          return alignment.Alignment.bottomCenter;
        }
        case C[18] || CT.C18:
        {
          return alignment.Alignment.centerLeft;
        }
        case C[19] || CT.C19:
        {
          return alignment.Alignment.centerRight;
        }
      }
    }
    [_getLegendOffset]() {
      let offset = dart.nullCheck(dart.nullCheck(this.widget.legend).offset);
      let legendPosition = dart.nullCheck(this.widget.legend).position;
      switch (legendPosition) {
        case C[20] || CT.C20:
        {
          return new edge_insets.EdgeInsets.only({left: dart.notNull(offset.dx) > 0 ? dart.notNull(offset.dx) * 2 : 0.0, right: dart.notNull(offset.dx) < 0 ? offset.dx[$abs]() * 2 : 0.0, top: dart.notNull(offset.dy) > 0 ? offset.dy : 0.0});
        }
        case C[18] || CT.C18:
        {
          return new edge_insets.EdgeInsets.only({top: dart.notNull(offset.dy) > 0 ? dart.notNull(offset.dy) * 2 : 0.0, bottom: dart.notNull(offset.dy) < 0 ? offset.dy[$abs]() * 2 : 0.0, left: dart.notNull(offset.dx) > 0 ? offset.dx : 0.0});
        }
        case C[19] || CT.C19:
        {
          return new edge_insets.EdgeInsets.only({top: dart.notNull(offset.dy) > 0 ? dart.notNull(offset.dy) * 2 : 0.0, bottom: dart.notNull(offset.dy) < 0 ? offset.dy[$abs]() * 2 : 0.0, right: dart.notNull(offset.dx) < 0 ? offset.dx[$abs]() : 0.0});
        }
        case C[21] || CT.C21:
        {
          return new edge_insets.EdgeInsets.only({left: dart.notNull(offset.dx) > 0 ? dart.notNull(offset.dx) * 2 : 0.0, right: dart.notNull(offset.dx) < 0 ? offset.dx[$abs]() * 2 : 0.0, bottom: dart.notNull(offset.dy) < 0 ? offset.dy[$abs]() : 0.0});
        }
      }
    }
    initState() {
      this[_levelsLength] = this.widget.levels[$length];
      this[_dataSource] = new (T.IdentityMapOfString$TreemapTile()).new();
      this[_tooltipKey] = T.GlobalKeyOfStateOfStatefulWidget().new();
      this[_obtainDataSource]();
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      layouts.Treemap.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 445, 32, "oldWidget");
      this[_canUpdateTileColor] = oldWidget.colorMappers == null && this.widget.colorMappers != null || oldWidget.colorMappers != null && this.widget.colorMappers == null || oldWidget.colorMappers != null && this.widget.colorMappers != null && dart.nullCheck(oldWidget.colorMappers)[$length] != dart.nullCheck(this.widget.colorMappers)[$length];
      if (this[_levelsLength] != this.widget.levels[$length]) {
        this[_levelsLength] = this.widget.levels[$length];
        this[_invalidate]();
      } else if (this.widget.dataCount != oldWidget.dataCount) {
        this[_invalidate]();
      }
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      this[_dataSource][$clear]();
      super.dispose();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[4], 470, 29, "context");
      return new (T.FutureBuilderOfbool()).new({future: this[_computeDataSource], builder: dart.fn((context, snapshot) => {
          if (context == null) dart.nullFailed(I[4], 473, 30, "context");
          if (snapshot == null) dart.nullFailed(I[4], 473, 59, "snapshot");
          return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
              if (context == null) dart.nullFailed(I[4], 475, 36, "context");
              if (constraints == null) dart.nullFailed(I[4], 475, 60, "constraints");
              let size = new ui.Size.new(dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : 300.0, dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : 300.0);
              return new basic.SizedBox.new({width: size.width, height: size.height, child: dart.test(snapshot.hasData) ? new basic.Stack.new({children: (() => {
                    let t25 = T.JSArrayOfWidget().of([this[_buildTreemap](context, snapshot.hasData)]);
                    if (dart.test(this[_isTooltipEnabled])) t25[$add](this[_tooltip]);
                    return t25;
                  })(), $creationLocationd_0dea112b090073317d4: C[301] || CT.C301}) : null, $creationLocationd_0dea112b090073317d4: C[304] || CT.C304});
            }, T.BuildContextAndBoxConstraintsToSizedBox()), $creationLocationd_0dea112b090073317d4: C[309] || CT.C309});
        }, T.BuildContextAndAsyncSnapshotOfboolToLayoutBuilder()), $creationLocationd_0dea112b090073317d4: C[312] || CT.C312});
    }
  };
  (layouts._TreemapState.new = function() {
    this[_baseColor] = new ui.Color.fromRGBO(42, 80, 160, 1.0);
    this[___TreemapState__tooltipKey] = null;
    this[___TreemapState__dataSource] = null;
    this[___TreemapState__levelsLength] = null;
    this[_totalWeight] = 0.0;
    this[_isTooltipEnabled] = false;
    this[_canUpdateTileColor] = true;
    this[___TreemapState__computeDataSource] = null;
    layouts._TreemapState.__proto__.new.call(this);
    ;
  }).prototype = layouts._TreemapState.prototype;
  dart.addTypeTests(layouts._TreemapState);
  dart.addTypeCaches(layouts._TreemapState);
  dart.setMethodSignature(layouts._TreemapState, () => ({
    __proto__: dart.getMethods(layouts._TreemapState.__proto__),
    [_buildTreemap]: dart.fnType(framework.Widget, [framework.BuildContext, core.bool]),
    [_invalidate]: dart.fnType(dart.void, []),
    [_obtainDataSource]: dart.fnType(dart.void, []),
    [_obtainDataSourceAndBindColorMappers]: dart.fnType(async.Future$(core.bool), []),
    [_groupTiles]: dart.fnType(dart.void, [core.double, core.int], {ancestor: dart.nullable(layouts.TreemapTile), currentLevelIndex: core.int}, {}),
    [_bindColorMappersIntoDataSource]: dart.fnType(dart.void, [dart.nullable(core.Map$(core.String, layouts.TreemapTile))]),
    [_getColor]: dart.fnType(dart.nullable(ui.Color), [layouts.TreemapTile]),
    [_getRangeColor]: dart.fnType(dart.nullable(ui.Color), [core.num, core.List$(treemap.TreemapColorMapper)]),
    [_getLegendAlignment]: dart.fnType(alignment.AlignmentGeometry, [legend$.TreemapLegendPosition]),
    [_getLegendOffset]: dart.fnType(edge_insets.EdgeInsetsGeometry, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(layouts._TreemapState, () => ({
    __proto__: dart.getGetters(layouts._TreemapState.__proto__),
    [_tooltipKey]: framework.GlobalKey$(framework.State$(framework.StatefulWidget)),
    [_dataSource]: core.Map$(core.String, layouts.TreemapTile),
    [_levelsLength]: core.int,
    [_computeDataSource]: async.Future$(core.bool),
    [_squarified]: layouts._SquarifiedTreemap,
    [_sliceAndDice]: layouts._SliceAndDiceTreemap,
    [_tooltip]: tooltip.TreemapTooltip
  }));
  dart.setSetterSignature(layouts._TreemapState, () => ({
    __proto__: dart.getSetters(layouts._TreemapState.__proto__),
    [_tooltipKey]: framework.GlobalKey$(framework.State$(framework.StatefulWidget)),
    [_dataSource]: core.Map$(core.String, layouts.TreemapTile),
    [_levelsLength]: core.int,
    [_computeDataSource]: async.Future$(core.bool)
  }));
  dart.setLibraryUri(layouts._TreemapState, I[5]);
  dart.setFieldSignature(layouts._TreemapState, () => ({
    __proto__: dart.getFields(layouts._TreemapState.__proto__),
    [_baseColor]: dart.finalFieldType(ui.Color),
    [___TreemapState__tooltipKey]: dart.fieldType(dart.nullable(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))),
    [___TreemapState__dataSource]: dart.fieldType(dart.nullable(core.Map$(core.String, layouts.TreemapTile))),
    [___TreemapState__levelsLength]: dart.fieldType(dart.nullable(core.int)),
    [_totalWeight]: dart.fieldType(core.double),
    [_isTooltipEnabled]: dart.fieldType(core.bool),
    [_canUpdateTileColor]: dart.fieldType(core.bool),
    [___TreemapState__computeDataSource]: dart.fieldType(dart.nullable(async.Future$(core.bool)))
  }));
  var dataCount$0 = dart.privateName(layouts, "_SquarifiedTreemap.dataCount");
  var dataSource$1 = dart.privateName(layouts, "_SquarifiedTreemap.dataSource");
  var totalWeight$ = dart.privateName(layouts, "_SquarifiedTreemap.totalWeight");
  var tooltipKey$ = dart.privateName(layouts, "_SquarifiedTreemap.tooltipKey");
  var onSelectionChanged$0 = dart.privateName(layouts, "_SquarifiedTreemap.onSelectionChanged");
  var selectionSettings$0 = dart.privateName(layouts, "_SquarifiedTreemap.selectionSettings");
  layouts._SquarifiedTreemap = class _SquarifiedTreemap extends framework.StatefulWidget {
    get dataCount() {
      return this[dataCount$0];
    }
    set dataCount(value) {
      super.dataCount = value;
    }
    get dataSource() {
      return this[dataSource$1];
    }
    set dataSource(value) {
      super.dataSource = value;
    }
    get totalWeight() {
      return this[totalWeight$];
    }
    set totalWeight(value) {
      super.totalWeight = value;
    }
    get tooltipKey() {
      return this[tooltipKey$];
    }
    set tooltipKey(value) {
      super.tooltipKey = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$0];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get selectionSettings() {
      return this[selectionSettings$0];
    }
    set selectionSettings(value) {
      super.selectionSettings = value;
    }
    createState() {
      return new layouts._SquarifiedTreemapState.new();
    }
  };
  (layouts._SquarifiedTreemap.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    if (dataCount == null) dart.nullFailed(I[4], 498, 19, "dataCount");
    let dataSource = opts && 'dataSource' in opts ? opts.dataSource : null;
    if (dataSource == null) dart.nullFailed(I[4], 499, 19, "dataSource");
    let totalWeight = opts && 'totalWeight' in opts ? opts.totalWeight : null;
    if (totalWeight == null) dart.nullFailed(I[4], 500, 19, "totalWeight");
    let tooltipKey = opts && 'tooltipKey' in opts ? opts.tooltipKey : null;
    if (tooltipKey == null) dart.nullFailed(I[4], 501, 19, "tooltipKey");
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : null;
    if (selectionSettings == null) dart.nullFailed(I[4], 503, 19, "selectionSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataCount$0] = dataCount;
    this[dataSource$1] = dataSource;
    this[totalWeight$] = totalWeight;
    this[tooltipKey$] = tooltipKey;
    this[onSelectionChanged$0] = onSelectionChanged;
    this[selectionSettings$0] = selectionSettings;
    layouts._SquarifiedTreemap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = layouts._SquarifiedTreemap.prototype;
  dart.addTypeTests(layouts._SquarifiedTreemap);
  dart.addTypeCaches(layouts._SquarifiedTreemap);
  dart.setMethodSignature(layouts._SquarifiedTreemap, () => ({
    __proto__: dart.getMethods(layouts._SquarifiedTreemap.__proto__),
    createState: dart.fnType(layouts._SquarifiedTreemapState, [])
  }));
  dart.setLibraryUri(layouts._SquarifiedTreemap, I[5]);
  dart.setFieldSignature(layouts._SquarifiedTreemap, () => ({
    __proto__: dart.getFields(layouts._SquarifiedTreemap.__proto__),
    dataCount: dart.finalFieldType(core.int),
    dataSource: dart.finalFieldType(core.Map$(core.String, layouts.TreemapTile)),
    totalWeight: dart.finalFieldType(core.double),
    tooltipKey: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [layouts.TreemapTile]))),
    selectionSettings: dart.finalFieldType(treemap.TreemapSelectionSettings)
  }));
  var ___SquarifiedTreemapState__children = dart.privateName(layouts, "_#_SquarifiedTreemapState#_children");
  var ___SquarifiedTreemapState__treemapController = dart.privateName(layouts, "_#_SquarifiedTreemapState#_treemapController");
  var _children = dart.privateName(layouts, "_children");
  var _treemapController = dart.privateName(layouts, "_treemapController");
  var _getAspectRatio = dart.privateName(layouts, "_getAspectRatio");
  var _getTileWidgets = dart.privateName(layouts, "_getTileWidgets");
  var _getTiles = dart.privateName(layouts, "_getTiles");
  var _getDescendants = dart.privateName(layouts, "_getDescendants");
  var _reupdateTiles = dart.privateName(layouts, "_reupdateTiles");
  layouts._SquarifiedTreemapState = class _SquarifiedTreemapState extends framework.State$(layouts._SquarifiedTreemap) {
    get [_children]() {
      let t26;
      t26 = this[___SquarifiedTreemapState__children];
      return t26 == null ? dart.throw(new _internal.LateError.fieldNI("_children")) : t26;
    }
    set [_children](t26) {
      if (t26 == null) dart.nullFailed(I[4], 519, 21, "null");
      this[___SquarifiedTreemapState__children] = t26;
    }
    get [_treemapController]() {
      let t27;
      t27 = this[___SquarifiedTreemapState__treemapController];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("_treemapController")) : t27;
    }
    set [_treemapController](t27) {
      if (t27 == null) dart.nullFailed(I[4], 520, 27, "null");
      this[___SquarifiedTreemapState__treemapController] = t27;
    }
    [_getTiles](source, aggregatedWeight, size, opts) {
      if (source == null) dart.nullFailed(I[4], 529, 32, "source");
      if (aggregatedWeight == null) dart.nullFailed(I[4], 529, 47, "aggregatedWeight");
      if (size == null) dart.nullFailed(I[4], 529, 70, "size");
      let offset = opts && 'offset' in opts ? opts.offset : C[180] || CT.C180;
      if (offset == null) dart.nullFailed(I[4], 530, 15, "offset");
      let start = opts && 'start' in opts ? opts.start : 0;
      if (start == null) dart.nullFailed(I[4], 530, 41, "start");
      let end = opts && 'end' in opts ? opts.end : null;
      let widgetSize = size;
      let groupArea = 0.0;
      let referenceArea = null;
      let prevAspectRatio = null;
      let groupInitialTileArea = null;
      let tiles = source[$values][$toList]();
      tiles[$sort](dart.fn((src, target) => core.int.as(dart.dsend(dart.dload(target, 'weight'), 'compareTo', [dart.dload(src, 'weight')])), T.dynamicAnddynamicToint()));
      end == null ? end = tiles[$length] : null;
      let children = T.JSArrayOfWidget().of([]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let tile = layouts.TreemapTile.as(tiles[$_get](i));
        tile[_area] = dart.notNull(widgetSize.height) * dart.notNull(widgetSize.width) * (dart.notNull(tile.weight) / dart.notNull(aggregatedWeight));
        groupInitialTileArea == null ? groupInitialTileArea = tile[_area] : null;
        let area = (groupArea + dart.nullCheck(tile[_area])) / dart.notNull(size.shortestSide);
        referenceArea = dart.nullCheck(groupInitialTileArea) / area;
        let currentAspectRatio = math.max(core.double, this[_getAspectRatio](referenceArea, area), this[_getAspectRatio](dart.nullCheck(tile[_area]) / area, area));
        if (prevAspectRatio == null || currentAspectRatio < dart.notNull(prevAspectRatio)) {
          prevAspectRatio = currentAspectRatio;
          groupArea = groupArea + dart.nullCheck(tile[_area]);
        } else {
          if (dart.notNull(size.width) > dart.notNull(size.height)) {
            children[$addAll](this[_getTileWidgets](tiles, new ui.Size.new(groupArea / dart.notNull(size.height), size.height), basic_types.Axis.vertical, offset, start, i));
            offset = offset['+'](new ui.Offset.new(groupArea / dart.notNull(size.height), 0.0));
            size = new ui.Size.new(math.max(core.num, 0, size.width) - groupArea / dart.notNull(size.height), size.height);
          } else {
            children[$addAll](this[_getTileWidgets](tiles, new ui.Size.new(size.width, groupArea / dart.notNull(size.width)), basic_types.Axis.horizontal, offset, start, i));
            offset = offset['+'](new ui.Offset.new(0.0, groupArea / dart.notNull(size.width)));
            size = new ui.Size.new(size.width, math.max(core.num, 0, size.height) - groupArea / dart.notNull(size.width));
          }
          start = i;
          groupInitialTileArea = groupArea = dart.nullCheck(tile[_area]);
          referenceArea = dart.nullCheck(tile[_area]) / (dart.notNull(groupInitialTileArea) / dart.notNull(size.shortestSide));
          prevAspectRatio = this[_getAspectRatio](referenceArea, dart.nullCheck(tile[_area]) / dart.notNull(size.shortestSide));
        }
      }
      if (dart.notNull(size.width) > dart.notNull(size.height)) {
        children[$addAll](this[_getTileWidgets](tiles, new ui.Size.new(groupArea / dart.notNull(size.height), size.height), basic_types.Axis.vertical, offset, start, end));
      } else {
        children[$addAll](this[_getTileWidgets](tiles, new ui.Size.new(groupArea / dart.notNull(size.height), size.height), basic_types.Axis.horizontal, offset, start, end));
      }
      return children;
    }
    [_getTileWidgets](source, size, axis, offset, start, end) {
      let t28, t28$;
      if (source == null) dart.nullFailed(I[4], 605, 12, "source");
      if (size == null) dart.nullFailed(I[4], 605, 25, "size");
      if (axis == null) dart.nullFailed(I[4], 605, 36, "axis");
      if (offset == null) dart.nullFailed(I[4], 605, 49, "offset");
      if (start == null) dart.nullFailed(I[4], 605, 61, "start");
      if (end == null) dart.nullFailed(I[4], 605, 72, "end");
      let tiles = T.JSArrayOf_Tile().of([]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let tileDetails = layouts.TreemapTile.as(source[$_get](i));
        if (axis == basic_types.Axis.vertical) {
          t28 = tileDetails;
          (() => {
            t28[_size] = new ui.Size.new(size.width, dart.nullCheck(tileDetails[_area]) / dart.notNull(size.width));
            t28[_offset] = offset;
            return t28;
          })();
          offset = offset['+'](new ui.Offset.new(0.0, tileDetails[_size].height));
        } else {
          t28$ = tileDetails;
          (() => {
            t28$[_size] = new ui.Size.new(dart.nullCheck(tileDetails[_area]) / dart.notNull(size.height), size.height);
            t28$[_offset] = offset;
            return t28$;
          })();
          offset = offset['+'](new ui.Offset.new(tileDetails[_size].width, 0.0));
        }
        tiles[$add](new layouts._Tile.new({size: tileDetails[_size], details: tileDetails, tooltipKey: this.widget.tooltipKey, treemapController: this[_treemapController], child: this[_getDescendants](tileDetails), onSelectionChanged: this.widget.onSelectionChanged, selectionSettings: this.widget.selectionSettings, $creationLocationd_0dea112b090073317d4: C[316] || CT.C316}));
      }
      return tiles;
    }
    [_getDescendants](tile) {
      if (tile == null) dart.nullFailed(I[4], 634, 39, "tile");
      let child = null;
      if (tile.level.labelBuilder != null && tile[_descendants] != null) {
        child = new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([dart.nullCheck(dart.nullCheck(tile.level.labelBuilder)(this.context, tile)), new basic.Expanded.new({child: new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
                  if (context == null) dart.nullFailed(I[4], 648, 40, "context");
                  if (constraints == null) dart.nullFailed(I[4], 648, 64, "constraints");
                  tile[_labelBuilderSize] = new ui.Size.new(dart.notNull(tile[_size].width) - dart.notNull(constraints.maxWidth), dart.notNull(tile[_size].height) - dart.notNull(constraints.maxHeight));
                  return new basic.Stack.new({children: this[_getTiles](dart.nullCheck(tile[_descendants]), tile.weight, new ui.Size.new(dart.notNull(tile[_size].width) - dart.notNull(dart.nullCheck(tile[_labelBuilderSize]).width), dart.notNull(tile[_size].height) - dart.notNull(dart.nullCheck(tile[_labelBuilderSize]).height))), $creationLocationd_0dea112b090073317d4: C[325] || CT.C325});
                }, T.BuildContextAndBoxConstraintsToStack()), $creationLocationd_0dea112b090073317d4: C[328] || CT.C328}), $creationLocationd_0dea112b090073317d4: C[331] || CT.C331})]), $creationLocationd_0dea112b090073317d4: C[334] || CT.C334});
      } else if (tile.level.labelBuilder != null) {
        child = dart.nullCheck(tile.level.labelBuilder)(this.context, tile);
      } else if (tile[_descendants] != null) {
        child = new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
            if (context == null) dart.nullFailed(I[4], 675, 34, "context");
            if (constraints == null) dart.nullFailed(I[4], 675, 58, "constraints");
            return new basic.Stack.new({children: this[_getTiles](dart.nullCheck(tile[_descendants]), tile.weight, constraints.biggest), $creationLocationd_0dea112b090073317d4: C[338] || CT.C338});
          }, T.BuildContextAndBoxConstraintsToStack()), $creationLocationd_0dea112b090073317d4: C[341] || CT.C341});
      }
      return child;
    }
    [_getAspectRatio](width, height) {
      if (width == null) dart.nullFailed(I[4], 685, 33, "width");
      if (height == null) dart.nullFailed(I[4], 685, 47, "height");
      return dart.notNull(width) > dart.notNull(height) ? dart.notNull(width) / dart.notNull(height) : dart.notNull(height) / dart.notNull(width);
    }
    [_reupdateTiles]() {
      this[_children][$clear]();
      this[_children] = this[_getTiles](this.widget.dataSource, this.widget.totalWeight, dart.nullCheck(this[_size]));
    }
    initState() {
      this[_children] = T.JSArrayOfWidget().of([]);
      this[_treemapController] = new layouts._TreemapController.new();
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      layouts._SquarifiedTreemap.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 702, 43, "oldWidget");
      if (this.widget.dataCount != oldWidget.dataCount) {
        this[_reupdateTiles]();
      }
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      this[_children][$clear]();
      this[_treemapController].dispose();
      super.dispose();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[4], 718, 29, "context");
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
          if (context == null) dart.nullFailed(I[4], 720, 17, "context");
          if (constraints == null) dart.nullFailed(I[4], 720, 26, "constraints");
          let newSize = constraints.biggest;
          if (!dart.equals(this[_size], newSize)) {
            this[_size] = newSize;
            this[_reupdateTiles]();
          }
          return new basic.Stack.new({children: this[_children], $creationLocationd_0dea112b090073317d4: C[344] || CT.C344});
        }, T.BuildContextAndBoxConstraintsToStack()), $creationLocationd_0dea112b090073317d4: C[347] || CT.C347});
    }
  };
  (layouts._SquarifiedTreemapState.new = function() {
    this[_size] = null;
    this[___SquarifiedTreemapState__children] = null;
    this[___SquarifiedTreemapState__treemapController] = null;
    layouts._SquarifiedTreemapState.__proto__.new.call(this);
    ;
  }).prototype = layouts._SquarifiedTreemapState.prototype;
  dart.addTypeTests(layouts._SquarifiedTreemapState);
  dart.addTypeCaches(layouts._SquarifiedTreemapState);
  dart.setMethodSignature(layouts._SquarifiedTreemapState, () => ({
    __proto__: dart.getMethods(layouts._SquarifiedTreemapState.__proto__),
    [_getTiles]: dart.fnType(core.List$(framework.Widget), [core.Map$(core.String, layouts.TreemapTile), core.double, ui.Size], {end: dart.nullable(core.int), offset: ui.Offset, start: core.int}, {}),
    [_getTileWidgets]: dart.fnType(core.List$(framework.Widget), [core.List, ui.Size, basic_types.Axis, ui.Offset, core.int, core.int]),
    [_getDescendants]: dart.fnType(dart.nullable(framework.Widget), [layouts.TreemapTile]),
    [_getAspectRatio]: dart.fnType(core.double, [core.double, core.double]),
    [_reupdateTiles]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(layouts._SquarifiedTreemapState, () => ({
    __proto__: dart.getGetters(layouts._SquarifiedTreemapState.__proto__),
    [_children]: core.List$(framework.Widget),
    [_treemapController]: layouts._TreemapController
  }));
  dart.setSetterSignature(layouts._SquarifiedTreemapState, () => ({
    __proto__: dart.getSetters(layouts._SquarifiedTreemapState.__proto__),
    [_children]: core.List$(framework.Widget),
    [_treemapController]: layouts._TreemapController
  }));
  dart.setLibraryUri(layouts._SquarifiedTreemapState, I[5]);
  dart.setFieldSignature(layouts._SquarifiedTreemapState, () => ({
    __proto__: dart.getFields(layouts._SquarifiedTreemapState.__proto__),
    [_size]: dart.fieldType(dart.nullable(ui.Size)),
    [___SquarifiedTreemapState__children]: dart.fieldType(dart.nullable(core.List$(framework.Widget))),
    [___SquarifiedTreemapState__treemapController]: dart.fieldType(dart.nullable(layouts._TreemapController))
  }));
  var dataCount$1 = dart.privateName(layouts, "_SliceAndDiceTreemap.dataCount");
  var type$ = dart.privateName(layouts, "_SliceAndDiceTreemap.type");
  var dataSource$2 = dart.privateName(layouts, "_SliceAndDiceTreemap.dataSource");
  var totalWeight$0 = dart.privateName(layouts, "_SliceAndDiceTreemap.totalWeight");
  var tooltipKey$0 = dart.privateName(layouts, "_SliceAndDiceTreemap.tooltipKey");
  var onSelectionChanged$1 = dart.privateName(layouts, "_SliceAndDiceTreemap.onSelectionChanged");
  var selectionSettings$1 = dart.privateName(layouts, "_SliceAndDiceTreemap.selectionSettings");
  layouts._SliceAndDiceTreemap = class _SliceAndDiceTreemap extends framework.StatefulWidget {
    get dataCount() {
      return this[dataCount$1];
    }
    set dataCount(value) {
      super.dataCount = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get dataSource() {
      return this[dataSource$2];
    }
    set dataSource(value) {
      super.dataSource = value;
    }
    get totalWeight() {
      return this[totalWeight$0];
    }
    set totalWeight(value) {
      super.totalWeight = value;
    }
    get tooltipKey() {
      return this[tooltipKey$0];
    }
    set tooltipKey(value) {
      super.tooltipKey = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$1];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get selectionSettings() {
      return this[selectionSettings$1];
    }
    set selectionSettings(value) {
      super.selectionSettings = value;
    }
    createState() {
      return new layouts._SliceAndDiceTreemapState.new();
    }
  };
  (layouts._SliceAndDiceTreemap.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    if (dataCount == null) dart.nullFailed(I[4], 736, 19, "dataCount");
    let type = opts && 'type' in opts ? opts.type : null;
    if (type == null) dart.nullFailed(I[4], 737, 19, "type");
    let dataSource = opts && 'dataSource' in opts ? opts.dataSource : null;
    if (dataSource == null) dart.nullFailed(I[4], 738, 19, "dataSource");
    let totalWeight = opts && 'totalWeight' in opts ? opts.totalWeight : null;
    if (totalWeight == null) dart.nullFailed(I[4], 739, 19, "totalWeight");
    let tooltipKey = opts && 'tooltipKey' in opts ? opts.tooltipKey : null;
    if (tooltipKey == null) dart.nullFailed(I[4], 740, 19, "tooltipKey");
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : null;
    if (selectionSettings == null) dart.nullFailed(I[4], 742, 19, "selectionSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataCount$1] = dataCount;
    this[type$] = type;
    this[dataSource$2] = dataSource;
    this[totalWeight$0] = totalWeight;
    this[tooltipKey$0] = tooltipKey;
    this[onSelectionChanged$1] = onSelectionChanged;
    this[selectionSettings$1] = selectionSettings;
    layouts._SliceAndDiceTreemap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = layouts._SliceAndDiceTreemap.prototype;
  dart.addTypeTests(layouts._SliceAndDiceTreemap);
  dart.addTypeCaches(layouts._SliceAndDiceTreemap);
  dart.setMethodSignature(layouts._SliceAndDiceTreemap, () => ({
    __proto__: dart.getMethods(layouts._SliceAndDiceTreemap.__proto__),
    createState: dart.fnType(layouts._SliceAndDiceTreemapState, [])
  }));
  dart.setLibraryUri(layouts._SliceAndDiceTreemap, I[5]);
  dart.setFieldSignature(layouts._SliceAndDiceTreemap, () => ({
    __proto__: dart.getFields(layouts._SliceAndDiceTreemap.__proto__),
    dataCount: dart.finalFieldType(core.int),
    type: dart.finalFieldType(layouts.LayoutType),
    dataSource: dart.finalFieldType(core.Map$(core.String, layouts.TreemapTile)),
    totalWeight: dart.finalFieldType(core.double),
    tooltipKey: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [layouts.TreemapTile]))),
    selectionSettings: dart.finalFieldType(treemap.TreemapSelectionSettings)
  }));
  var ___SliceAndDiceTreemapState__children = dart.privateName(layouts, "_#_SliceAndDiceTreemapState#_children");
  var ___SliceAndDiceTreemapState__treemapController = dart.privateName(layouts, "_#_SliceAndDiceTreemapState#_treemapController");
  layouts._SliceAndDiceTreemapState = class _SliceAndDiceTreemapState extends framework.State$(layouts._SliceAndDiceTreemap) {
    get [_children]() {
      let t28;
      t28 = this[___SliceAndDiceTreemapState__children];
      return t28 == null ? dart.throw(new _internal.LateError.fieldNI("_children")) : t28;
    }
    set [_children](t28) {
      if (t28 == null) dart.nullFailed(I[4], 759, 21, "null");
      this[___SliceAndDiceTreemapState__children] = t28;
    }
    get [_treemapController]() {
      let t29;
      t29 = this[___SliceAndDiceTreemapState__treemapController];
      return t29 == null ? dart.throw(new _internal.LateError.fieldNI("_treemapController")) : t29;
    }
    set [_treemapController](t29) {
      if (t29 == null) dart.nullFailed(I[4], 760, 27, "null");
      this[___SliceAndDiceTreemapState__treemapController] = t29;
    }
    [_getTiles](source, aggregatedWeight, size) {
      if (source == null) dart.nullFailed(I[4], 763, 32, "source");
      if (aggregatedWeight == null) dart.nullFailed(I[4], 763, 47, "aggregatedWeight");
      if (size == null) dart.nullFailed(I[4], 763, 70, "size");
      let children = T.JSArrayOfWidget().of([]);
      let tiles = source[$values][$toList]();
      tiles[$sort](dart.fn((src, target) => core.int.as(dart.dsend(dart.dload(target, 'weight'), 'compareTo', [dart.dload(src, 'weight')])), T.dynamicAnddynamicToint()));
      for (let t30 of tiles) {
        let tile = layouts.TreemapTile.as(t30);
        let tileSize = null;
        if (this.widget.type == layouts.LayoutType.slice) {
          tileSize = new ui.Size.new(size.width, dart.notNull(size.height) * (dart.notNull(tile.weight) / dart.notNull(aggregatedWeight)));
        } else {
          tileSize = new ui.Size.new(dart.notNull(size.width) * (dart.notNull(tile.weight) / dart.notNull(aggregatedWeight)), size.height);
        }
        children[$add](new layouts._Tile.new({type: this.widget.type, size: tileSize, details: tile, tooltipKey: this.widget.tooltipKey, treemapController: this[_treemapController], child: this[_getDescendants](tile, tileSize), onSelectionChanged: this.widget.onSelectionChanged, selectionSettings: this.widget.selectionSettings, $creationLocationd_0dea112b090073317d4: C[350] || CT.C350}));
      }
      return children;
    }
    [_getDescendants](tile, tileSize) {
      if (tile == null) dart.nullFailed(I[4], 794, 39, "tile");
      if (tileSize == null) dart.nullFailed(I[4], 794, 50, "tileSize");
      let current = null;
      if (tile.level.labelBuilder != null && tile[_descendants] != null) {
        current = new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([dart.nullCheck(dart.nullCheck(tile.level.labelBuilder)(this.context, tile)), new basic.Expanded.new({child: new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
                  if (context == null) dart.nullFailed(I[4], 808, 40, "context");
                  if (constraints == null) dart.nullFailed(I[4], 808, 64, "constraints");
                  tile[_labelBuilderSize] = new ui.Size.new(dart.notNull(tileSize.width) - dart.notNull(constraints.maxWidth), dart.notNull(tileSize.height) - dart.notNull(constraints.maxHeight));
                  let children = this[_getTiles](dart.nullCheck(tile[_descendants]), tile.weight, new ui.Size.new(dart.notNull(tileSize.width) - dart.notNull(dart.nullCheck(tile[_labelBuilderSize]).width), dart.notNull(tileSize.height) - dart.notNull(dart.nullCheck(tile[_labelBuilderSize]).height)));
                  return this.widget.type == layouts.LayoutType.slice ? new basic.Column.new({children: children, $creationLocationd_0dea112b090073317d4: C[360] || CT.C360}) : new basic.Row.new({children: children, $creationLocationd_0dea112b090073317d4: C[363] || CT.C363});
                }, T.BuildContextAndBoxConstraintsToFlex()), $creationLocationd_0dea112b090073317d4: C[366] || CT.C366}), $creationLocationd_0dea112b090073317d4: C[369] || CT.C369})]), $creationLocationd_0dea112b090073317d4: C[372] || CT.C372});
      } else if (tile.level.labelBuilder != null) {
        current = dart.nullCheck(tile.level.labelBuilder)(this.context, tile);
      } else if (tile[_descendants] != null) {
        current = new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
            if (context == null) dart.nullFailed(I[4], 836, 34, "context");
            if (constraints == null) dart.nullFailed(I[4], 836, 58, "constraints");
            let children = this[_getTiles](dart.nullCheck(tile[_descendants]), tile.weight, constraints.biggest);
            return this.widget.type == layouts.LayoutType.slice ? new basic.Column.new({children: children, $creationLocationd_0dea112b090073317d4: C[376] || CT.C376}) : new basic.Row.new({children: children, $creationLocationd_0dea112b090073317d4: C[379] || CT.C379});
          }, T.BuildContextAndBoxConstraintsToFlex()), $creationLocationd_0dea112b090073317d4: C[382] || CT.C382});
      }
      return current;
    }
    [_reupdateTiles]() {
      this[_children][$clear]();
      this[_children] = this[_getTiles](this.widget.dataSource, this.widget.totalWeight, dart.nullCheck(this[_size]));
    }
    initState() {
      this[_children] = T.JSArrayOfWidget().of([]);
      this[_treemapController] = new layouts._TreemapController.new();
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      layouts._SliceAndDiceTreemap.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 861, 45, "oldWidget");
      if (this.widget.dataCount != oldWidget.dataCount || this.widget.type != oldWidget.type) {
        this[_reupdateTiles]();
      }
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      this[_children][$clear]();
      this[_treemapController].dispose();
      super.dispose();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[4], 878, 29, "context");
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
          if (context == null) dart.nullFailed(I[4], 880, 17, "context");
          if (constraints == null) dart.nullFailed(I[4], 880, 26, "constraints");
          let newSize = constraints.biggest;
          if (!dart.equals(this[_size], newSize)) {
            this[_size] = newSize;
            this[_reupdateTiles]();
          }
          return this.widget.type == layouts.LayoutType.slice ? new basic.Column.new({children: this[_children], $creationLocationd_0dea112b090073317d4: C[385] || CT.C385}) : new basic.Row.new({children: this[_children], $creationLocationd_0dea112b090073317d4: C[388] || CT.C388});
        }, T.BuildContextAndBoxConstraintsToFlex()), $creationLocationd_0dea112b090073317d4: C[391] || CT.C391});
    }
  };
  (layouts._SliceAndDiceTreemapState.new = function() {
    this[_size] = null;
    this[___SliceAndDiceTreemapState__children] = null;
    this[___SliceAndDiceTreemapState__treemapController] = null;
    layouts._SliceAndDiceTreemapState.__proto__.new.call(this);
    ;
  }).prototype = layouts._SliceAndDiceTreemapState.prototype;
  dart.addTypeTests(layouts._SliceAndDiceTreemapState);
  dart.addTypeCaches(layouts._SliceAndDiceTreemapState);
  dart.setMethodSignature(layouts._SliceAndDiceTreemapState, () => ({
    __proto__: dart.getMethods(layouts._SliceAndDiceTreemapState.__proto__),
    [_getTiles]: dart.fnType(core.List$(framework.Widget), [core.Map$(core.String, layouts.TreemapTile), core.double, ui.Size]),
    [_getDescendants]: dart.fnType(dart.nullable(framework.Widget), [layouts.TreemapTile, ui.Size]),
    [_reupdateTiles]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(layouts._SliceAndDiceTreemapState, () => ({
    __proto__: dart.getGetters(layouts._SliceAndDiceTreemapState.__proto__),
    [_children]: core.List$(framework.Widget),
    [_treemapController]: layouts._TreemapController
  }));
  dart.setSetterSignature(layouts._SliceAndDiceTreemapState, () => ({
    __proto__: dart.getSetters(layouts._SliceAndDiceTreemapState.__proto__),
    [_children]: core.List$(framework.Widget),
    [_treemapController]: layouts._TreemapController
  }));
  dart.setLibraryUri(layouts._SliceAndDiceTreemapState, I[5]);
  dart.setFieldSignature(layouts._SliceAndDiceTreemapState, () => ({
    __proto__: dart.getFields(layouts._SliceAndDiceTreemapState.__proto__),
    [_size]: dart.fieldType(dart.nullable(ui.Size)),
    [___SliceAndDiceTreemapState__children]: dart.fieldType(dart.nullable(core.List$(framework.Widget))),
    [___SliceAndDiceTreemapState__treemapController]: dart.fieldType(dart.nullable(layouts._TreemapController))
  }));
  var type$0 = dart.privateName(layouts, "_Tile.type");
  var size$ = dart.privateName(layouts, "_Tile.size");
  var details$ = dart.privateName(layouts, "_Tile.details");
  var tooltipKey$1 = dart.privateName(layouts, "_Tile.tooltipKey");
  var treemapController$ = dart.privateName(layouts, "_Tile.treemapController");
  var child$ = dart.privateName(layouts, "_Tile.child");
  var onSelectionChanged$2 = dart.privateName(layouts, "_Tile.onSelectionChanged");
  var selectionSettings$2 = dart.privateName(layouts, "_Tile.selectionSettings");
  layouts._Tile = class _Tile extends framework.StatelessWidget {
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    get tooltipKey() {
      return this[tooltipKey$1];
    }
    set tooltipKey(value) {
      super.tooltipKey = value;
    }
    get treemapController() {
      return this[treemapController$];
    }
    set treemapController(value) {
      super.treemapController = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$2];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get selectionSettings() {
      return this[selectionSettings$2];
    }
    set selectionSettings(value) {
      super.selectionSettings = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[4], 919, 29, "context");
      let current = new layouts._TileDecor.new({size: this.size, details: this.details, tooltipKey: this.tooltipKey, treemapController: this.treemapController, child: this.child, onSelectionChanged: this.onSelectionChanged, selectionSettings: this.selectionSettings, $creationLocationd_0dea112b090073317d4: C[394] || CT.C394});
      if (this.details[_padding] != null) {
        current = new basic.Padding.new({padding: dart.nullCheck(this.details[_padding]), child: current, $creationLocationd_0dea112b090073317d4: C[403] || CT.C403});
      }
      return this.type == layouts.LayoutType.squarified ? new basic.Positioned.new({width: this.size.width, height: this.size.height, left: dart.nullCheck(this.details[_offset]).dx, top: dart.nullCheck(this.details[_offset]).dy, child: current, $creationLocationd_0dea112b090073317d4: C[407] || CT.C407}) : new basic.SizedBox.new({width: this.size.width, height: this.size.height, child: current, $creationLocationd_0dea112b090073317d4: C[414] || CT.C414});
    }
  };
  (layouts._Tile.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let type = opts && 'type' in opts ? opts.type : C[236] || CT.C236;
    if (type == null) dart.nullFailed(I[4], 899, 10, "type");
    let size = opts && 'size' in opts ? opts.size : null;
    if (size == null) dart.nullFailed(I[4], 900, 19, "size");
    let details = opts && 'details' in opts ? opts.details : null;
    if (details == null) dart.nullFailed(I[4], 901, 19, "details");
    let tooltipKey = opts && 'tooltipKey' in opts ? opts.tooltipKey : null;
    if (tooltipKey == null) dart.nullFailed(I[4], 902, 19, "tooltipKey");
    let treemapController = opts && 'treemapController' in opts ? opts.treemapController : null;
    if (treemapController == null) dart.nullFailed(I[4], 903, 19, "treemapController");
    let child = opts && 'child' in opts ? opts.child : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : null;
    if (selectionSettings == null) dart.nullFailed(I[4], 906, 19, "selectionSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[type$0] = type;
    this[size$] = size;
    this[details$] = details;
    this[tooltipKey$1] = tooltipKey;
    this[treemapController$] = treemapController;
    this[child$] = child;
    this[onSelectionChanged$2] = onSelectionChanged;
    this[selectionSettings$2] = selectionSettings;
    layouts._Tile.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = layouts._Tile.prototype;
  dart.addTypeTests(layouts._Tile);
  dart.addTypeCaches(layouts._Tile);
  dart.setMethodSignature(layouts._Tile, () => ({
    __proto__: dart.getMethods(layouts._Tile.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(layouts._Tile, I[5]);
  dart.setFieldSignature(layouts._Tile, () => ({
    __proto__: dart.getFields(layouts._Tile.__proto__),
    type: dart.finalFieldType(layouts.LayoutType),
    size: dart.finalFieldType(ui.Size),
    details: dart.finalFieldType(layouts.TreemapTile),
    tooltipKey: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    treemapController: dart.finalFieldType(layouts._TreemapController),
    child: dart.finalFieldType(dart.nullable(framework.Widget)),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [layouts.TreemapTile]))),
    selectionSettings: dart.finalFieldType(treemap.TreemapSelectionSettings)
  }));
  var size$0 = dart.privateName(layouts, "_TileDecor.size");
  var details$0 = dart.privateName(layouts, "_TileDecor.details");
  var tooltipKey$2 = dart.privateName(layouts, "_TileDecor.tooltipKey");
  var treemapController$0 = dart.privateName(layouts, "_TileDecor.treemapController");
  var child$0 = dart.privateName(layouts, "_TileDecor.child");
  var onSelectionChanged$3 = dart.privateName(layouts, "_TileDecor.onSelectionChanged");
  var selectionSettings$3 = dart.privateName(layouts, "_TileDecor.selectionSettings");
  layouts._TileDecor = class _TileDecor extends framework.StatefulWidget {
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get details() {
      return this[details$0];
    }
    set details(value) {
      super.details = value;
    }
    get tooltipKey() {
      return this[tooltipKey$2];
    }
    set tooltipKey(value) {
      super.tooltipKey = value;
    }
    get treemapController() {
      return this[treemapController$0];
    }
    set treemapController(value) {
      super.treemapController = value;
    }
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$3];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get selectionSettings() {
      return this[selectionSettings$3];
    }
    set selectionSettings(value) {
      super.selectionSettings = value;
    }
    createState() {
      return new layouts._TileDecorState.new();
    }
  };
  (layouts._TileDecor.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let size = opts && 'size' in opts ? opts.size : null;
    if (size == null) dart.nullFailed(I[4], 948, 19, "size");
    let details = opts && 'details' in opts ? opts.details : null;
    if (details == null) dart.nullFailed(I[4], 949, 19, "details");
    let tooltipKey = opts && 'tooltipKey' in opts ? opts.tooltipKey : null;
    if (tooltipKey == null) dart.nullFailed(I[4], 950, 19, "tooltipKey");
    let treemapController = opts && 'treemapController' in opts ? opts.treemapController : null;
    if (treemapController == null) dart.nullFailed(I[4], 951, 19, "treemapController");
    let child = opts && 'child' in opts ? opts.child : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : null;
    if (selectionSettings == null) dart.nullFailed(I[4], 954, 19, "selectionSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[size$0] = size;
    this[details$0] = details;
    this[tooltipKey$2] = tooltipKey;
    this[treemapController$0] = treemapController;
    this[child$0] = child;
    this[onSelectionChanged$3] = onSelectionChanged;
    this[selectionSettings$3] = selectionSettings;
    layouts._TileDecor.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = layouts._TileDecor.prototype;
  dart.addTypeTests(layouts._TileDecor);
  dart.addTypeCaches(layouts._TileDecor);
  dart.setMethodSignature(layouts._TileDecor, () => ({
    __proto__: dart.getMethods(layouts._TileDecor.__proto__),
    createState: dart.fnType(layouts._TileDecorState, [])
  }));
  dart.setLibraryUri(layouts._TileDecor, I[5]);
  dart.setFieldSignature(layouts._TileDecor, () => ({
    __proto__: dart.getFields(layouts._TileDecor.__proto__),
    size: dart.finalFieldType(ui.Size),
    details: dart.finalFieldType(layouts.TreemapTile),
    tooltipKey: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    treemapController: dart.finalFieldType(layouts._TreemapController),
    child: dart.finalFieldType(dart.nullable(framework.Widget)),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [layouts.TreemapTile]))),
    selectionSettings: dart.finalFieldType(treemap.TreemapSelectionSettings)
  }));
  var ___TileDecorState__animation = dart.privateName(layouts, "_#_TileDecorState#_animation");
  var ___TileDecorState__controller = dart.privateName(layouts, "_#_TileDecorState#_controller");
  var ___TileDecorState__colorTween = dart.privateName(layouts, "_#_TileDecorState#_colorTween");
  var _canAddInteractableWidget = dart.privateName(layouts, "_canAddInteractableWidget");
  var _isSelected = dart.privateName(layouts, "_isSelected");
  var _isHover = dart.privateName(layouts, "_isHover");
  var ___TileDecorState__mouseIsConnected = dart.privateName(layouts, "_#_TileDecorState#_mouseIsConnected");
  var ___TileDecorState__ancestor = dart.privateName(layouts, "_#_TileDecorState#_ancestor");
  var _animation = dart.privateName(layouts, "_animation");
  var _controller = dart.privateName(layouts, "_controller");
  var _colorTween = dart.privateName(layouts, "_colorTween");
  var _mouseIsConnected = dart.privateName(layouts, "_mouseIsConnected");
  var _ancestor = dart.privateName(layouts, "_ancestor");
  var _getTileBorder = dart.privateName(layouts, "_getTileBorder");
  var _border = dart.privateName(layouts, "_border");
  var _showTooltip = dart.privateName(layouts, "_showTooltip");
  var _buildTileDecor = dart.privateName(layouts, "_buildTileDecor");
  var _handleMouseTrackerChange = dart.privateName(layouts, "_handleMouseTrackerChange");
  var _isDescendant = dart.privateName(layouts, "_isDescendant");
  var _updateSelectionTweenColor = dart.privateName(layouts, "_updateSelectionTweenColor");
  var _handleSelectionChange = dart.privateName(layouts, "_handleSelectionChange");
  var _updateHoverTweenColor = dart.privateName(layouts, "_updateHoverTweenColor");
  var _handleHover = dart.privateName(layouts, "_handleHover");
  var _getColorFactor = dart.privateName(layouts, "_getColorFactor");
  var _rebuild = dart.privateName(layouts, "_rebuild");
  var _name = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var OutlinedBorder_side = dart.privateName(borders, "OutlinedBorder.side");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var RoundedRectangleBorder_borderRadius = dart.privateName(rounded_rectangle_border, "RoundedRectangleBorder.borderRadius");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(layouts._TileDecor) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(layouts._TileDecor)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(layouts._TileDecor));
  layouts._TileDecorState = class _TileDecorState extends State_TickerProviderStateMixin$36 {
    get [_animation]() {
      let t31;
      t31 = this[___TileDecorState__animation];
      return t31 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t31;
    }
    set [_animation](t31) {
      if (t31 == null) dart.nullFailed(I[4], 970, 26, "null");
      this[___TileDecorState__animation] = t31;
    }
    get [_controller]() {
      let t32;
      t32 = this[___TileDecorState__controller];
      return t32 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t32;
    }
    set [_controller](t32) {
      if (t32 == null) dart.nullFailed(I[4], 971, 28, "null");
      this[___TileDecorState__controller] = t32;
    }
    get [_colorTween]() {
      let t33;
      t33 = this[___TileDecorState__colorTween];
      return t33 == null ? dart.throw(new _internal.LateError.fieldNI("_colorTween")) : t33;
    }
    set [_colorTween](t33) {
      if (t33 == null) dart.nullFailed(I[4], 972, 19, "null");
      this[___TileDecorState__colorTween] = t33;
    }
    get [_mouseIsConnected]() {
      let t34;
      t34 = this[___TileDecorState__mouseIsConnected];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("_mouseIsConnected")) : t34;
    }
    set [_mouseIsConnected](t34) {
      if (t34 == null) dart.nullFailed(I[4], 977, 13, "null");
      this[___TileDecorState__mouseIsConnected] = t34;
    }
    get [_ancestor]() {
      let t35;
      t35 = this[___TileDecorState__ancestor];
      return t35 == null ? dart.throw(new _internal.LateError.fieldNI("_ancestor")) : t35;
    }
    set [_ancestor](t35) {
      if (t35 == null) dart.nullFailed(I[4], 979, 16, "null");
      this[___TileDecorState__ancestor] = t35;
    }
    [_getTileBorder]() {
      let t36, t36$;
      let tileBorder = this.widget.details.level.border;
      if (dart.test(this[_isHover]) && dart.equals(this.widget.details, this.widget.treemapController.hoveredTile)) {
        tileBorder = this[_ancestor].hoverBorder;
      }
      if (dart.test(this[_isSelected]) && dart.equals(this.widget.details, this.widget.treemapController.selectedTile)) {
        tileBorder = this.widget.selectionSettings.border;
      }
      if (this.widget.details.level.border != null) {
        tileBorder = dart.nullCheck(this.widget.details.level.border).copyWith({side: (t36 = tileBorder, t36 == null ? null : t36.side), borderRadius: (t36$ = tileBorder, t36$ == null ? null : t36$.borderRadius.resolve(basic.Directionality.of(this.context)))});
      }
      return tileBorder;
    }
    get [_border]() {
      return this[_getTileBorder]();
    }
    [_buildTileDecor](child, context) {
      if (child == null) dart.nullFailed(I[4], 1001, 33, "child");
      if (context == null) dart.nullFailed(I[4], 1001, 53, "context");
      let current = child;
      if (dart.test(this[_canAddInteractableWidget])) {
        if (dart.test(this[_mouseIsConnected])) {
          current = new basic.MouseRegion.new({child: current, onEnter: dart.fn(event => {
              if (event == null) dart.nullFailed(I[4], 1007, 39, "event");
              if (this.widget.details.level.tooltipBuilder != null) {
                this[_showTooltip](layouts.PointerKind.hover);
              }
              if (this.widget.onSelectionChanged != null && !dart.test(this[_isSelected])) {
                this.widget.treemapController.hoveredTile = this.widget.details;
              }
            }, T.PointerEnterEventTovoid()), onHover: dart.fn(event => {
              let t36;
              if (event == null) dart.nullFailed(I[4], 1016, 39, "event");
              if (this.widget.onSelectionChanged != null && !dart.test(this[_isSelected])) {
                t36 = this.widget.treemapController;
                t36.hoveredTile == null ? t36.hoveredTile = this.widget.details : null;
              }
            }, T.PointerHoverEventTovoid()), onExit: dart.fn(event => {
              let t36;
              if (event == null) dart.nullFailed(I[4], 1023, 37, "event");
              this.widget.treemapController.hoveredTile = null;
              if (this.widget.details.level.tooltipBuilder != null) {
                let tooltipRenderBox = tooltip.RenderTooltip.as((t36 = this.widget.tooltipKey.currentContext, t36 == null ? null : t36.findRenderObject()));
                tooltipRenderBox.hide();
              }
            }, T.PointerExitEventTovoid()), $creationLocationd_0dea112b090073317d4: C[419] || CT.C419});
        }
        current = new gesture_detector.GestureDetector.new({onTapUp: dart.fn(details => {
            if (details == null) dart.nullFailed(I[4], 1037, 32, "details");
            if (this.widget.details.level.tooltipBuilder != null) {
              this[_showTooltip](layouts.PointerKind.touch);
            }
            if (this.widget.onSelectionChanged != null) {
              this.widget.treemapController.selectedTile = this.widget.details;
              this.widget.treemapController.hoveredTile = null;
              dart.nullCheck(this.widget.onSelectionChanged)(this.widget.details);
            }
          }, T.TapUpDetailsTovoid()), child: current, $creationLocationd_0dea112b090073317d4: C[425] || CT.C425});
      }
      return current;
    }
    [_showTooltip](kind) {
      let t36;
      if (kind == null) dart.nullFailed(I[4], 1062, 33, "kind");
      let tileRenderBox = box.RenderBox.as(this.context.findRenderObject());
      let globalPosition = tileRenderBox.localToGlobal(ui.Offset.zero);
      let referenceTileSize = this.widget.details[_descendants] == null ? this.widget.size : new ui.Size.new(this.widget.size.width, dart.nullCheck(this.widget.details[_labelBuilderSize]).height);
      let tooltipRenderBox = tooltip.RenderTooltip.as((t36 = this.widget.tooltipKey.currentContext, t36 == null ? null : t36.findRenderObject()));
      tooltipRenderBox.show(globalPosition, this.widget.details, referenceTileSize, kind);
    }
    [_handleMouseTrackerChange]() {
      let t36, t36$;
      this[_mouseIsConnected] = (t36$ = (t36 = binding.RendererBinding.instance, t36 == null ? null : t36.mouseTracker.mouseIsConnected), t36$ == null ? false : t36$);
    }
    [_handleSelectionChange]() {
      this[_isHover] = false;
      let selectedTile = this.widget.treemapController.selectedTile;
      let previousSelectedTile = this.widget.treemapController.previousSelectedTile;
      if (selectedTile != null && (dart.equals(selectedTile, this.widget.details) || dart.test(this[_isDescendant](selectedTile)))) {
        this[_isSelected] = true;
        this[_updateSelectionTweenColor]();
        dart.test(this[_mouseIsConnected]) ? this[_controller].forward({from: 0.0}) : this[_controller].forward();
      } else if (previousSelectedTile != null && (dart.equals(previousSelectedTile, this.widget.details) || dart.test(this[_isDescendant](previousSelectedTile)))) {
        this[_isSelected] = false;
        this[_updateSelectionTweenColor]();
        this[_controller].reverse();
      }
    }
    [_handleHover]() {
      core.print("_handleHover is called");
      if (dart.test(this[_isSelected])) {
        return;
      }
      this[_isHover] = true;
      let hoveredTile = this.widget.treemapController.hoveredTile;
      let previousHoveredTile = this.widget.treemapController.previousHoveredTile;
      if (hoveredTile != null && (dart.equals(hoveredTile, this.widget.details) || dart.test(this[_isDescendant](hoveredTile)))) {
        this[_updateHoverTweenColor]();
        this[_controller].forward();
        core.print("hover color forwarded");
      } else if (previousHoveredTile != null && (dart.equals(previousHoveredTile, this.widget.details) || dart.test(this[_isDescendant](previousHoveredTile)))) {
        this[_updateHoverTweenColor]();
        this[_controller].reverse();
        core.print("hover color reversed");
      }
    }
    [_updateSelectionTweenColor]() {
      let selectionColor = this.widget.selectionSettings.color;
      this[_colorTween].begin = dart.test(this[_mouseIsConnected]) && dart.test(this[_isSelected]) ? layouts._getSaturatedColor(this.widget.details.color, this[_getColorFactor]()) : this.widget.details.color;
      this[_colorTween].end = selectionColor == null ? layouts._getSaturatedColor(this.widget.details.color, this[_getColorFactor]()) : dart.equals(selectionColor, colors.Colors.transparent) ? this.widget.details.color : selectionColor;
    }
    [_isDescendant](source) {
      if (source == null) dart.nullFailed(I[4], 1144, 34, "source");
      if (source[_descendants] == null) {
        return false;
      }
      if (dart.notNull(this.widget.details.indices[$length]) < dart.notNull(source.indices[$length])) {
        return this.widget.details.indices[$any](dart.fn(index => {
          if (index == null) dart.nullFailed(I[4], 1151, 21, "index");
          return source.indices[$contains](index);
        }, T.intTobool()));
      } else if (this.widget.details.indices[$length] == source.indices[$length]) {
        for (let index of this.widget.details.indices) {
          let hasIndex = source.indices[$contains](index);
          if (dart.test(hasIndex) && dart.notNull(this[_ancestor].levels[$indexOf](this.widget.details.level)) >= dart.notNull(this[_ancestor].levels[$indexOf](source.level))) {
            return true;
          }
        }
      }
      return false;
    }
    [_rebuild]() {
      if (dart.test(this.mounted)) {
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
    }
    [_getColorFactor]() {
      return dart.test(this[_mouseIsConnected]) ? dart.test(this[_isHover]) ? 0.2 : 0.4 : 0.4;
    }
    [_updateHoverTweenColor]() {
      this[_colorTween].begin = this.widget.details.color;
      this[_colorTween].end = layouts._getSaturatedColor(this.widget.details.color, this[_getColorFactor]());
    }
    initState() {
      let t36, t36$, t36$0, t36$1;
      this[_mouseIsConnected] = (t36$ = (t36 = binding.RendererBinding.instance, t36 == null ? null : t36.mouseTracker.mouseIsConnected), t36$ == null ? false : t36$);
      t36$0 = binding.RendererBinding.instance;
      t36$0 == null ? null : t36$0.mouseTracker.addListener(dart.bind(this, _handleMouseTrackerChange));
      this[_canAddInteractableWidget] = this.widget.onSelectionChanged != null || this.widget.details.level.tooltipBuilder != null;
      this[_controller] = new animation_controller.AnimationController.new({duration: C[3] || CT.C3, vsync: this});
      this[_animation] = new animations.CurvedAnimation.new({parent: this[_controller], curve: curves.Curves.linear});
      this[_animation].addListener(dart.bind(this, _rebuild));
      this[_colorTween] = new tween.ColorTween.new({begin: this.widget.details.color, end: this.widget.details.color});
      t36$1 = this.widget.treemapController;
      (() => {
        t36$1.addSelectionListener(dart.bind(this, _handleSelectionChange));
        t36$1.addHoverListener(dart.bind(this, _handleHover));
        return t36$1;
      })();
      super.initState();
    }
    didChangeDependencies() {
      this[_ancestor] = dart.nullCheck(this.context.findAncestorWidgetOfExactType(layouts.Treemap));
      super.didChangeDependencies();
    }
    dispose() {
      let t36, t36$, t36$0;
      t36 = this[_controller];
      (() => {
        t36.removeListener(dart.bind(this, _rebuild));
        t36.dispose();
        return t36;
      })();
      t36$ = this.widget.treemapController;
      (() => {
        t36$.removeSelectionListener(dart.bind(this, _handleSelectionChange));
        t36$.removeHoverListener(dart.bind(this, _handleHover));
        return t36$;
      })();
      t36$0 = binding.RendererBinding.instance;
      t36$0 == null ? null : t36$0.mouseTracker.removeListener(dart.bind(this, _handleMouseTrackerChange));
      super.dispose();
    }
    build(context) {
      let t36, t36$, t36$0;
      if (context == null) dart.nullFailed(I[4], 1232, 29, "context");
      let current = this.widget.details[_descendants] == null ? this.widget.child : null;
      if (this.widget.details.level.itemBuilder != null) {
        if (current != null) {
          current = new basic.Stack.new({children: T.JSArrayOfWidget().of([dart.nullCheck(dart.nullCheck(this.widget.details.level.itemBuilder)(context, this.widget.details)), current]), $creationLocationd_0dea112b090073317d4: C[429] || CT.C429});
        } else {
          current = dart.nullCheck(this.widget.details.level.itemBuilder)(context, this.widget.details);
        }
      }
      current = new basic.ColoredBox.new({color: dart.nullCheck(this[_colorTween].evaluate(this[_animation])), child: current, $creationLocationd_0dea112b090073317d4: C[432] || CT.C432});
      let padding = (t36$ = (t36 = this[_border], t36 == null ? null : t36.dimensions), t36$ == null ? edge_insets.EdgeInsets.zero : t36$);
      if (this[_border] != null || this.widget.onSelectionChanged != null) {
        current = new basic.CustomPaint.new({size: this.widget.size, foregroundPainter: new layouts._BorderPainter.new(this[_border]), child: basic.ClipPath.shape({shape: (t36$0 = this[_border], t36$0 == null ? C[436] || CT.C436 : t36$0), child: new basic.Padding.new({padding: padding, child: current, $creationLocationd_0dea112b090073317d4: C[442] || CT.C442})}), $creationLocationd_0dea112b090073317d4: C[446] || CT.C446});
      }
      if (this.widget.details[_descendants] == null) {
        return this[_buildTileDecor](current, context);
      } else {
        return new basic.Stack.new({fit: stack.StackFit.expand, children: (() => {
            let t36 = T.JSArrayOfWidget().of([this[_buildTileDecor](current, context)]);
            if (this.widget.child != null) t36[$add](new basic.Padding.new({padding: padding, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[451] || CT.C451}));
            return t36;
          })(), $creationLocationd_0dea112b090073317d4: C[455] || CT.C455});
      }
    }
  };
  (layouts._TileDecorState.new = function() {
    this[___TileDecorState__animation] = null;
    this[___TileDecorState__controller] = null;
    this[___TileDecorState__colorTween] = null;
    this[_canAddInteractableWidget] = false;
    this[_isSelected] = false;
    this[_isHover] = false;
    this[___TileDecorState__mouseIsConnected] = null;
    this[___TileDecorState__ancestor] = null;
    layouts._TileDecorState.__proto__.new.call(this);
    ;
  }).prototype = layouts._TileDecorState.prototype;
  dart.addTypeTests(layouts._TileDecorState);
  dart.addTypeCaches(layouts._TileDecorState);
  dart.setMethodSignature(layouts._TileDecorState, () => ({
    __proto__: dart.getMethods(layouts._TileDecorState.__proto__),
    [_getTileBorder]: dart.fnType(dart.nullable(rounded_rectangle_border.RoundedRectangleBorder), []),
    [_buildTileDecor]: dart.fnType(framework.Widget, [framework.Widget, framework.BuildContext]),
    [_showTooltip]: dart.fnType(dart.void, [layouts.PointerKind]),
    [_handleMouseTrackerChange]: dart.fnType(dart.void, []),
    [_handleSelectionChange]: dart.fnType(dart.void, []),
    [_handleHover]: dart.fnType(dart.void, []),
    [_updateSelectionTweenColor]: dart.fnType(dart.void, []),
    [_isDescendant]: dart.fnType(core.bool, [layouts.TreemapTile]),
    [_rebuild]: dart.fnType(dart.void, []),
    [_getColorFactor]: dart.fnType(core.double, []),
    [_updateHoverTweenColor]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(layouts._TileDecorState, () => ({
    __proto__: dart.getGetters(layouts._TileDecorState.__proto__),
    [_animation]: animation.Animation$(core.double),
    [_controller]: animation_controller.AnimationController,
    [_colorTween]: tween.ColorTween,
    [_mouseIsConnected]: core.bool,
    [_ancestor]: layouts.Treemap,
    [_border]: dart.nullable(rounded_rectangle_border.RoundedRectangleBorder)
  }));
  dart.setSetterSignature(layouts._TileDecorState, () => ({
    __proto__: dart.getSetters(layouts._TileDecorState.__proto__),
    [_animation]: animation.Animation$(core.double),
    [_controller]: animation_controller.AnimationController,
    [_colorTween]: tween.ColorTween,
    [_mouseIsConnected]: core.bool,
    [_ancestor]: layouts.Treemap
  }));
  dart.setLibraryUri(layouts._TileDecorState, I[5]);
  dart.setFieldSignature(layouts._TileDecorState, () => ({
    __proto__: dart.getFields(layouts._TileDecorState.__proto__),
    [___TileDecorState__animation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___TileDecorState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___TileDecorState__colorTween]: dart.fieldType(dart.nullable(tween.ColorTween)),
    [_canAddInteractableWidget]: dart.fieldType(core.bool),
    [_isSelected]: dart.fieldType(core.bool),
    [_isHover]: dart.fieldType(core.bool),
    [___TileDecorState__mouseIsConnected]: dart.fieldType(dart.nullable(core.bool)),
    [___TileDecorState__ancestor]: dart.fieldType(dart.nullable(layouts.Treemap))
  }));
  var border$ = dart.privateName(layouts, "_BorderPainter.border");
  layouts._BorderPainter = class _BorderPainter extends custom_paint.CustomPainter {
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    paint(canvas, size) {
      if (canvas == null) dart.nullFailed(I[4], 1293, 21, "canvas");
      if (size == null) dart.nullFailed(I[4], 1293, 34, "size");
      if (this.border != null) {
        dart.nullCheck(this.border).paint(canvas, ui.Offset.zero['&'](size));
      }
    }
    shouldRepaint(oldDelegate) {
      layouts._BorderPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[4], 1300, 37, "oldDelegate");
      return !dart.equals(oldDelegate.border, this.border);
    }
  };
  (layouts._BorderPainter.new = function(border) {
    this[border$] = border;
    layouts._BorderPainter.__proto__.new.call(this);
    ;
  }).prototype = layouts._BorderPainter.prototype;
  dart.addTypeTests(layouts._BorderPainter);
  dart.addTypeCaches(layouts._BorderPainter);
  dart.setMethodSignature(layouts._BorderPainter, () => ({
    __proto__: dart.getMethods(layouts._BorderPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(layouts._BorderPainter, I[5]);
  dart.setFieldSignature(layouts._BorderPainter, () => ({
    __proto__: dart.getFields(layouts._BorderPainter.__proto__),
    border: dart.finalFieldType(dart.nullable(rounded_rectangle_border.RoundedRectangleBorder))
  }));
  var _selectionListeners = dart.privateName(layouts, "_selectionListeners");
  var _hoverListeners = dart.privateName(layouts, "_hoverListeners");
  var _previousSelectedTile = dart.privateName(layouts, "_previousSelectedTile");
  var _selectedTile = dart.privateName(layouts, "_selectedTile");
  var _previousHoveredTile = dart.privateName(layouts, "_previousHoveredTile");
  var _hoveredTile = dart.privateName(layouts, "_hoveredTile");
  layouts._TreemapController = class _TreemapController extends core.Object {
    addSelectionListener(listener) {
      let t37;
      if (listener == null) dart.nullFailed(I[4], 1310, 42, "listener");
      t37 = this[_selectionListeners];
      t37 == null ? null : t37.add(listener);
    }
    addHoverListener(listener) {
      let t37;
      if (listener == null) dart.nullFailed(I[4], 1314, 38, "listener");
      t37 = this[_hoverListeners];
      t37 == null ? null : t37.add(listener);
    }
    removeSelectionListener(listener) {
      let t37;
      if (listener == null) dart.nullFailed(I[4], 1318, 45, "listener");
      t37 = this[_selectionListeners];
      t37 == null ? null : t37.remove(listener);
    }
    removeHoverListener(listener) {
      let t37;
      if (listener == null) dart.nullFailed(I[4], 1322, 41, "listener");
      t37 = this[_hoverListeners];
      t37 == null ? null : t37.remove(listener);
    }
    notifySelectionListeners() {
      for (let listener of dart.nullCheck(this[_selectionListeners])) {
        listener();
      }
    }
    notifyHoverListeners() {
      for (let listener of dart.nullCheck(this[_hoverListeners])) {
        listener();
      }
    }
    get previousSelectedTile() {
      return this[_previousSelectedTile];
    }
    get selectedTile() {
      return this[_selectedTile];
    }
    set selectedTile(value) {
      this[_previousSelectedTile] = this[_selectedTile];
      this[_selectedTile] = dart.equals(this[_selectedTile], value) ? null : value;
      this.notifySelectionListeners();
    }
    get previousHoveredTile() {
      return this[_previousHoveredTile];
    }
    get hoveredTile() {
      return this[_hoveredTile];
    }
    set hoveredTile(value) {
      this[_previousHoveredTile] = this[_hoveredTile];
      this[_hoveredTile] = dart.equals(this[_hoveredTile], value) ? null : value;
      this.notifyHoverListeners();
    }
    dispose() {
      this[_selectionListeners] = null;
      this[_hoverListeners] = null;
    }
  };
  (layouts._TreemapController.new = function() {
    this[_selectionListeners] = new (T.ObserverListOfVoidTovoid()).new();
    this[_hoverListeners] = new (T.ObserverListOfVoidTovoid()).new();
    this[_previousSelectedTile] = null;
    this[_selectedTile] = null;
    this[_previousHoveredTile] = null;
    this[_hoveredTile] = null;
    ;
  }).prototype = layouts._TreemapController.prototype;
  dart.addTypeTests(layouts._TreemapController);
  dart.addTypeCaches(layouts._TreemapController);
  dart.setMethodSignature(layouts._TreemapController, () => ({
    __proto__: dart.getMethods(layouts._TreemapController.__proto__),
    addSelectionListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    addHoverListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeSelectionListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeHoverListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    notifySelectionListeners: dart.fnType(dart.void, []),
    notifyHoverListeners: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(layouts._TreemapController, () => ({
    __proto__: dart.getGetters(layouts._TreemapController.__proto__),
    previousSelectedTile: dart.nullable(layouts.TreemapTile),
    selectedTile: dart.nullable(layouts.TreemapTile),
    previousHoveredTile: dart.nullable(layouts.TreemapTile),
    hoveredTile: dart.nullable(layouts.TreemapTile)
  }));
  dart.setSetterSignature(layouts._TreemapController, () => ({
    __proto__: dart.getSetters(layouts._TreemapController.__proto__),
    selectedTile: dart.nullable(layouts.TreemapTile),
    hoveredTile: dart.nullable(layouts.TreemapTile)
  }));
  dart.setLibraryUri(layouts._TreemapController, I[5]);
  dart.setFieldSignature(layouts._TreemapController, () => ({
    __proto__: dart.getFields(layouts._TreemapController.__proto__),
    [_selectionListeners]: dart.fieldType(dart.nullable(observer_list.ObserverList$(dart.fnType(dart.void, [])))),
    [_hoverListeners]: dart.fieldType(dart.nullable(observer_list.ObserverList$(dart.fnType(dart.void, [])))),
    [_previousSelectedTile]: dart.fieldType(dart.nullable(layouts.TreemapTile)),
    [_selectedTile]: dart.fieldType(dart.nullable(layouts.TreemapTile)),
    [_previousHoveredTile]: dart.fieldType(dart.nullable(layouts.TreemapTile)),
    [_hoveredTile]: dart.fieldType(dart.nullable(layouts.TreemapTile))
  }));
  layouts._getSaturatedColor = function _getSaturatedColor(color, factor, mix = C[439] || CT.C439) {
    if (color == null) dart.nullFailed(I[4], 15, 32, "color");
    if (factor == null) dart.nullFailed(I[4], 15, 46, "factor");
    if (mix == null) dart.nullFailed(I[4], 16, 12, "mix");
    return dart.equals(color, colors.Colors.transparent) ? color : new ui.Color.fromRGBO(((1 - dart.notNull(factor)) * dart.notNull(color.red) + dart.notNull(factor) * dart.notNull(mix.red))[$toInt](), ((1 - dart.notNull(factor)) * dart.notNull(color.green) + dart.notNull(factor) * dart.notNull(mix.green))[$toInt](), ((1 - dart.notNull(factor)) * dart.notNull(color.blue) + dart.notNull(factor) * dart.notNull(mix.blue))[$toInt](), 1.0);
  };
  var color$ = dart.privateName(treemap, "TreemapLevel.color");
  var border$0 = dart.privateName(treemap, "TreemapLevel.border");
  var padding$0 = dart.privateName(treemap, "TreemapLevel.padding");
  var groupMapper$ = dart.privateName(treemap, "TreemapLevel.groupMapper");
  var colorValueMapper$ = dart.privateName(treemap, "TreemapLevel.colorValueMapper");
  var labelBuilder$ = dart.privateName(treemap, "TreemapLevel.labelBuilder");
  var itemBuilder$ = dart.privateName(treemap, "TreemapLevel.itemBuilder");
  var tooltipBuilder$ = dart.privateName(treemap, "TreemapLevel.tooltipBuilder");
  treemap.TreemapLevel = class TreemapLevel extends core.Object {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$0];
    }
    set border(value) {
      super.border = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get groupMapper() {
      return this[groupMapper$];
    }
    set groupMapper(value) {
      super.groupMapper = value;
    }
    get colorValueMapper() {
      return this[colorValueMapper$];
    }
    set colorValueMapper(value) {
      super.colorValueMapper = value;
    }
    get labelBuilder() {
      return this[labelBuilder$];
    }
    set labelBuilder(value) {
      super.labelBuilder = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get tooltipBuilder() {
      return this[tooltipBuilder$];
    }
    set tooltipBuilder(value) {
      super.tooltipBuilder = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      return treemap.TreemapLevel.is(other) && dart.equals(other.color, this.color) && dart.equals(other.border, this.border) && dart.equals(other.padding, this.padding) && dart.equals(other.groupMapper, this.groupMapper) && dart.equals(other.colorValueMapper, this.colorValueMapper) && dart.equals(other.labelBuilder, this.labelBuilder) && dart.equals(other.itemBuilder, this.itemBuilder) && dart.equals(other.tooltipBuilder, this.tooltipBuilder);
    }
    get hashCode() {
      return ui.hashValues(this.groupMapper, this.color, this.border, this.colorValueMapper, this.padding, this.tooltipBuilder);
    }
  };
  (treemap.TreemapLevel.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let padding = opts && 'padding' in opts ? opts.padding : C[459] || CT.C459;
    let groupMapper = opts && 'groupMapper' in opts ? opts.groupMapper : null;
    if (groupMapper == null) dart.nullFailed(I[6], 172, 19, "groupMapper");
    let colorValueMapper = opts && 'colorValueMapper' in opts ? opts.colorValueMapper : null;
    let tooltipBuilder = opts && 'tooltipBuilder' in opts ? opts.tooltipBuilder : null;
    let labelBuilder = opts && 'labelBuilder' in opts ? opts.labelBuilder : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    this[color$] = color;
    this[border$0] = border;
    this[padding$0] = padding;
    this[groupMapper$] = groupMapper;
    this[colorValueMapper$] = colorValueMapper;
    this[tooltipBuilder$] = tooltipBuilder;
    this[labelBuilder$] = labelBuilder;
    this[itemBuilder$] = itemBuilder;
    ;
  }).prototype = treemap.TreemapLevel.prototype;
  dart.addTypeTests(treemap.TreemapLevel);
  dart.addTypeCaches(treemap.TreemapLevel);
  dart.setLibraryUri(treemap.TreemapLevel, I[7]);
  dart.setFieldSignature(treemap.TreemapLevel, () => ({
    __proto__: dart.getFields(treemap.TreemapLevel.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    border: dart.finalFieldType(dart.nullable(rounded_rectangle_border.RoundedRectangleBorder)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    groupMapper: dart.finalFieldType(dart.fnType(dart.nullable(core.String), [core.int])),
    colorValueMapper: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [layouts.TreemapTile]))),
    labelBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, layouts.TreemapTile]))),
    itemBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, layouts.TreemapTile]))),
    tooltipBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, layouts.TreemapTile])))
  }));
  dart.defineExtensionMethods(treemap.TreemapLevel, ['_equals']);
  dart.defineExtensionAccessors(treemap.TreemapLevel, ['hashCode']);
  var color$0 = dart.privateName(treemap, "TreemapSelectionSettings.color");
  var border$1 = dart.privateName(treemap, "TreemapSelectionSettings.border");
  treemap.TreemapSelectionSettings = class TreemapSelectionSettings extends core.Object {
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$1];
    }
    set border(value) {
      super.border = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      return treemap.TreemapSelectionSettings.is(other) && dart.equals(other.color, this.color) && dart.equals(other.border, this.border);
    }
    get hashCode() {
      return ui.hashValues(this.color, this.border);
    }
  };
  (treemap.TreemapSelectionSettings.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    this[color$0] = color;
    this[border$1] = border;
    ;
  }).prototype = treemap.TreemapSelectionSettings.prototype;
  dart.addTypeTests(treemap.TreemapSelectionSettings);
  dart.addTypeCaches(treemap.TreemapSelectionSettings);
  dart.setLibraryUri(treemap.TreemapSelectionSettings, I[7]);
  dart.setFieldSignature(treemap.TreemapSelectionSettings, () => ({
    __proto__: dart.getFields(treemap.TreemapSelectionSettings.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    border: dart.finalFieldType(dart.nullable(rounded_rectangle_border.RoundedRectangleBorder))
  }));
  dart.defineExtensionMethods(treemap.TreemapSelectionSettings, ['_equals']);
  dart.defineExtensionAccessors(treemap.TreemapSelectionSettings, ['hashCode']);
  var color$1 = dart.privateName(treemap, "TreemapTooltipSettings.color");
  var borderColor$ = dart.privateName(treemap, "TreemapTooltipSettings.borderColor");
  var borderWidth$ = dart.privateName(treemap, "TreemapTooltipSettings.borderWidth");
  var borderRadius$ = dart.privateName(treemap, "TreemapTooltipSettings.borderRadius");
  treemap.TreemapTooltipSettings = class TreemapTooltipSettings extends core.Object {
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      return treemap.TreemapTooltipSettings.is(other) && dart.equals(other.color, this.color) && dart.equals(other.borderColor, this.borderColor) && other.borderWidth == this.borderWidth && dart.equals(other.borderRadius, this.borderRadius);
    }
    get hashCode() {
      return ui.hashValues(this.color, this.borderColor, this.borderWidth, this.borderRadius);
    }
    copyWith(opts) {
      let t37, t37$, t37$0, t37$1;
      let color = opts && 'color' in opts ? opts.color : null;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      return new treemap.TreemapTooltipSettings.new({color: (t37 = color, t37 == null ? this.color : t37), borderColor: (t37$ = borderColor, t37$ == null ? this.borderColor : t37$), borderWidth: (t37$0 = borderWidth, t37$0 == null ? this.borderWidth : t37$0), borderRadius: (t37$1 = borderRadius, t37$1 == null ? this.borderRadius : t37$1)});
    }
  };
  (treemap.TreemapTooltipSettings.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
    if (borderWidth == null) dart.nullFailed(I[6], 1042, 10, "borderWidth");
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : C[460] || CT.C460;
    if (borderRadius == null) dart.nullFailed(I[6], 1043, 10, "borderRadius");
    this[color$1] = color;
    this[borderColor$] = borderColor;
    this[borderWidth$] = borderWidth;
    this[borderRadius$] = borderRadius;
    ;
  }).prototype = treemap.TreemapTooltipSettings.prototype;
  dart.addTypeTests(treemap.TreemapTooltipSettings);
  dart.addTypeCaches(treemap.TreemapTooltipSettings);
  dart.setMethodSignature(treemap.TreemapTooltipSettings, () => ({
    __proto__: dart.getMethods(treemap.TreemapTooltipSettings.__proto__),
    copyWith: dart.fnType(treemap.TreemapTooltipSettings, [], {borderColor: dart.nullable(ui.Color), borderRadius: dart.nullable(border_radius.BorderRadiusGeometry), borderWidth: dart.nullable(core.double), color: dart.nullable(ui.Color)}, {})
  }));
  dart.setLibraryUri(treemap.TreemapTooltipSettings, I[7]);
  dart.setFieldSignature(treemap.TreemapTooltipSettings, () => ({
    __proto__: dart.getFields(treemap.TreemapTooltipSettings.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    borderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    borderWidth: dart.finalFieldType(core.double),
    borderRadius: dart.finalFieldType(border_radius.BorderRadiusGeometry)
  }));
  dart.defineExtensionMethods(treemap.TreemapTooltipSettings, ['_equals']);
  dart.defineExtensionAccessors(treemap.TreemapTooltipSettings, ['hashCode']);
  var color$2 = dart.privateName(treemap, "TreemapColorMapper.color");
  var from$ = dart.privateName(treemap, "TreemapColorMapper.from");
  var to$ = dart.privateName(treemap, "TreemapColorMapper.to");
  var value$ = dart.privateName(treemap, "TreemapColorMapper.value");
  var name$ = dart.privateName(treemap, "TreemapColorMapper.name");
  treemap.TreemapColorMapper = class TreemapColorMapper extends core.Object {
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get from() {
      return this[from$];
    }
    set from(value) {
      super.from = value;
    }
    get to() {
      return this[to$];
    }
    set to(value) {
      super.to = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
  };
  (treemap.TreemapColorMapper.range = function(opts) {
    let from = opts && 'from' in opts ? opts.from : null;
    let to = opts && 'to' in opts ? opts.to : null;
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[6], 1313, 60, "color");
    let name = opts && 'name' in opts ? opts.name : null;
    this[from$] = from;
    this[to$] = to;
    this[color$2] = color;
    this[name$] = name;
    if (!(from != null && to != null && dart.notNull(from) <= dart.notNull(to))) dart.assertFailed(null, I[6], 1314, 16, "from != null && to != null && from <= to");
    this[value$] = null;
    ;
  }).prototype = treemap.TreemapColorMapper.prototype;
  (treemap.TreemapColorMapper.value = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[6], 1382, 70, "color");
    this[value$] = value;
    this[color$2] = color;
    if (!(value != null)) dart.assertFailed(null, I[6], 1383, 16, "value != null");
    this[from$] = null;
    this[to$] = null;
    this[name$] = null;
    ;
  }).prototype = treemap.TreemapColorMapper.prototype;
  dart.addTypeTests(treemap.TreemapColorMapper);
  dart.addTypeCaches(treemap.TreemapColorMapper);
  dart.setLibraryUri(treemap.TreemapColorMapper, I[7]);
  dart.setFieldSignature(treemap.TreemapColorMapper, () => ({
    __proto__: dart.getFields(treemap.TreemapColorMapper.__proto__),
    color: dart.finalFieldType(ui.Color),
    from: dart.finalFieldType(dart.nullable(core.double)),
    to: dart.finalFieldType(dart.nullable(core.double)),
    value: dart.finalFieldType(dart.nullable(core.String)),
    name: dart.finalFieldType(dart.nullable(core.String))
  }));
  var dataCount$2 = dart.privateName(treemap, "SfTreemap.dataCount");
  var weightValueMapper$0 = dart.privateName(treemap, "SfTreemap.weightValueMapper");
  var levels$0 = dart.privateName(treemap, "SfTreemap.levels");
  var tooltipSettings$0 = dart.privateName(treemap, "SfTreemap.tooltipSettings");
  var colorMappers$0 = dart.privateName(treemap, "SfTreemap.colorMappers");
  var onSelectionChanged$4 = dart.privateName(treemap, "SfTreemap.onSelectionChanged");
  var selectionSettings$4 = dart.privateName(treemap, "SfTreemap.selectionSettings");
  var _layoutType = dart.privateName(treemap, "SfTreemap._layoutType");
  var legend$1 = dart.privateName(treemap, "SfTreemap.legend");
  var hoverBorder$0 = dart.privateName(treemap, "SfTreemap.hoverBorder");
  var _layoutType$ = dart.privateName(treemap, "_layoutType");
  treemap.SfTreemap = class SfTreemap extends framework.StatelessWidget {
    get dataCount() {
      return this[dataCount$2];
    }
    set dataCount(value) {
      super.dataCount = value;
    }
    get weightValueMapper() {
      return this[weightValueMapper$0];
    }
    set weightValueMapper(value) {
      super.weightValueMapper = value;
    }
    get levels() {
      return this[levels$0];
    }
    set levels(value) {
      super.levels = value;
    }
    get tooltipSettings() {
      return this[tooltipSettings$0];
    }
    set tooltipSettings(value) {
      super.tooltipSettings = value;
    }
    get colorMappers() {
      return this[colorMappers$0];
    }
    set colorMappers(value) {
      super.colorMappers = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$4];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get selectionSettings() {
      return this[selectionSettings$4];
    }
    set selectionSettings(value) {
      super.selectionSettings = value;
    }
    get [_layoutType$]() {
      return this[_layoutType];
    }
    set [_layoutType$](value) {
      super[_layoutType$] = value;
    }
    get legend() {
      return this[legend$1];
    }
    set legend(value) {
      super.legend = value;
    }
    get hoverBorder() {
      return this[hoverBorder$0];
    }
    set hoverBorder(value) {
      super.hoverBorder = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[6], 2498, 29, "context");
      return new layouts.Treemap.new({layoutType: this[_layoutType$], dataCount: this.dataCount, levels: this.levels, weightValueMapper: this.weightValueMapper, colorMappers: this.colorMappers, legend: this.legend, onSelectionChanged: this.onSelectionChanged, selectionSettings: this.selectionSettings, tooltipSettings: this.tooltipSettings, hoverBorder: this.hoverBorder, $creationLocationd_0dea112b090073317d4: C[464] || CT.C464});
    }
  };
  (treemap.SfTreemap.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    if (dataCount == null) dart.nullFailed(I[6], 1662, 19, "dataCount");
    let levels = opts && 'levels' in opts ? opts.levels : null;
    if (levels == null) dart.nullFailed(I[6], 1663, 19, "levels");
    let weightValueMapper = opts && 'weightValueMapper' in opts ? opts.weightValueMapper : null;
    if (weightValueMapper == null) dart.nullFailed(I[6], 1664, 19, "weightValueMapper");
    let colorMappers = opts && 'colorMappers' in opts ? opts.colorMappers : null;
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let hoverBorder = opts && 'hoverBorder' in opts ? opts.hoverBorder : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : C[462] || CT.C462;
    if (selectionSettings == null) dart.nullFailed(I[6], 1669, 10, "selectionSettings");
    let tooltipSettings = opts && 'tooltipSettings' in opts ? opts.tooltipSettings : C[463] || CT.C463;
    if (tooltipSettings == null) dart.nullFailed(I[6], 1670, 10, "tooltipSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataCount$2] = dataCount;
    this[levels$0] = levels;
    this[weightValueMapper$0] = weightValueMapper;
    this[colorMappers$0] = colorMappers;
    this[legend$1] = legend;
    this[onSelectionChanged$4] = onSelectionChanged;
    this[hoverBorder$0] = hoverBorder;
    this[selectionSettings$4] = selectionSettings;
    this[tooltipSettings$0] = tooltipSettings;
    if (!(dart.notNull(dataCount) > 0)) dart.assertFailed(null, I[6], 1671, 16, "dataCount > 0");
    if (!(dart.notNull(levels[$length]) > 0)) dart.assertFailed(null, I[6], 1672, 16, "levels.length > 0");
    if (!(colorMappers == null || dart.notNull(colorMappers[$length]) > 0)) dart.assertFailed(null, I[6], 1673, 16, "colorMappers == null || colorMappers.length > 0");
    this[_layoutType] = layouts.LayoutType.squarified;
    treemap.SfTreemap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = treemap.SfTreemap.prototype;
  (treemap.SfTreemap.slice = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    if (dataCount == null) dart.nullFailed(I[6], 1777, 19, "dataCount");
    let levels = opts && 'levels' in opts ? opts.levels : null;
    if (levels == null) dart.nullFailed(I[6], 1778, 19, "levels");
    let weightValueMapper = opts && 'weightValueMapper' in opts ? opts.weightValueMapper : null;
    if (weightValueMapper == null) dart.nullFailed(I[6], 1779, 19, "weightValueMapper");
    let colorMappers = opts && 'colorMappers' in opts ? opts.colorMappers : null;
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let hoverBorder = opts && 'hoverBorder' in opts ? opts.hoverBorder : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : C[462] || CT.C462;
    if (selectionSettings == null) dart.nullFailed(I[6], 1784, 10, "selectionSettings");
    let tooltipSettings = opts && 'tooltipSettings' in opts ? opts.tooltipSettings : C[463] || CT.C463;
    if (tooltipSettings == null) dart.nullFailed(I[6], 1785, 10, "tooltipSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataCount$2] = dataCount;
    this[levels$0] = levels;
    this[weightValueMapper$0] = weightValueMapper;
    this[colorMappers$0] = colorMappers;
    this[legend$1] = legend;
    this[onSelectionChanged$4] = onSelectionChanged;
    this[hoverBorder$0] = hoverBorder;
    this[selectionSettings$4] = selectionSettings;
    this[tooltipSettings$0] = tooltipSettings;
    if (!(dart.notNull(dataCount) > 0)) dart.assertFailed(null, I[6], 1786, 16, "dataCount > 0");
    if (!(dart.notNull(levels[$length]) > 0)) dart.assertFailed(null, I[6], 1787, 16, "levels.length > 0");
    if (!(colorMappers == null || dart.notNull(colorMappers[$length]) > 0)) dart.assertFailed(null, I[6], 1788, 16, "colorMappers == null || colorMappers.length > 0");
    this[_layoutType] = layouts.LayoutType.slice;
    treemap.SfTreemap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = treemap.SfTreemap.prototype;
  (treemap.SfTreemap.dice = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    if (dataCount == null) dart.nullFailed(I[6], 1891, 19, "dataCount");
    let levels = opts && 'levels' in opts ? opts.levels : null;
    if (levels == null) dart.nullFailed(I[6], 1892, 19, "levels");
    let weightValueMapper = opts && 'weightValueMapper' in opts ? opts.weightValueMapper : null;
    if (weightValueMapper == null) dart.nullFailed(I[6], 1893, 19, "weightValueMapper");
    let colorMappers = opts && 'colorMappers' in opts ? opts.colorMappers : null;
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let hoverBorder = opts && 'hoverBorder' in opts ? opts.hoverBorder : null;
    let selectionSettings = opts && 'selectionSettings' in opts ? opts.selectionSettings : C[462] || CT.C462;
    if (selectionSettings == null) dart.nullFailed(I[6], 1898, 10, "selectionSettings");
    let tooltipSettings = opts && 'tooltipSettings' in opts ? opts.tooltipSettings : C[463] || CT.C463;
    if (tooltipSettings == null) dart.nullFailed(I[6], 1899, 10, "tooltipSettings");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dataCount$2] = dataCount;
    this[levels$0] = levels;
    this[weightValueMapper$0] = weightValueMapper;
    this[colorMappers$0] = colorMappers;
    this[legend$1] = legend;
    this[onSelectionChanged$4] = onSelectionChanged;
    this[hoverBorder$0] = hoverBorder;
    this[selectionSettings$4] = selectionSettings;
    this[tooltipSettings$0] = tooltipSettings;
    if (!(dart.notNull(dataCount) > 0)) dart.assertFailed(null, I[6], 1900, 16, "dataCount > 0");
    if (!(dart.notNull(levels[$length]) > 0)) dart.assertFailed(null, I[6], 1901, 16, "levels.length > 0");
    if (!(colorMappers == null || dart.notNull(colorMappers[$length]) > 0)) dart.assertFailed(null, I[6], 1902, 16, "colorMappers == null || colorMappers.length > 0");
    this[_layoutType] = layouts.LayoutType.dice;
    treemap.SfTreemap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = treemap.SfTreemap.prototype;
  dart.addTypeTests(treemap.SfTreemap);
  dart.addTypeCaches(treemap.SfTreemap);
  dart.setMethodSignature(treemap.SfTreemap, () => ({
    __proto__: dart.getMethods(treemap.SfTreemap.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(treemap.SfTreemap, I[7]);
  dart.setFieldSignature(treemap.SfTreemap, () => ({
    __proto__: dart.getFields(treemap.SfTreemap.__proto__),
    dataCount: dart.finalFieldType(core.int),
    weightValueMapper: dart.finalFieldType(dart.fnType(core.double, [core.int])),
    levels: dart.finalFieldType(core.List$(treemap.TreemapLevel)),
    tooltipSettings: dart.finalFieldType(treemap.TreemapTooltipSettings),
    colorMappers: dart.finalFieldType(dart.nullable(core.List$(treemap.TreemapColorMapper))),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [layouts.TreemapTile]))),
    selectionSettings: dart.finalFieldType(treemap.TreemapSelectionSettings),
    [_layoutType$]: dart.finalFieldType(layouts.LayoutType),
    legend: dart.finalFieldType(dart.nullable(legend$.TreemapLegend)),
    hoverBorder: dart.finalFieldType(dart.nullable(rounded_rectangle_border.RoundedRectangleBorder))
  }));
  dart.trackLibraries("packages/syncfusion_flutter_treemap/src/tooltip.dart", {
    "package:syncfusion_flutter_treemap/src/tooltip.dart": tooltip,
    "package:syncfusion_flutter_treemap/src/legend.dart": legend$,
    "package:syncfusion_flutter_treemap/src/layouts.dart": layouts,
    "package:syncfusion_flutter_treemap/treemap.dart": treemap
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tooltip.dart","legend.dart","layouts.dart","../treemap.dart"],"names":[],"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","file":"../../../../../../packages/syncfusion_flutter_treemap/src/tooltip.dart.lib.js"}');
  // Exports:
  return {
    src__tooltip: tooltip,
    src__legend: legend$,
    src__layouts: layouts,
    treemap: treemap
  };
}));

//# sourceMappingURL=tooltip.dart.lib.js.map
